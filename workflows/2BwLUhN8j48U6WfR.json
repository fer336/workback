{
  "active": false,
  "connections": {
    "Lista General": {
      "main": [
        [
          {
            "node": "menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "MESSAGE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MESSAGE": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        []
      ]
    },
    "Separa datos": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Tester Prompt",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Tester Prompt": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crypto": {
      "main": [
        [
          {
            "node": "Insertar Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Variables globales",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Crypto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "From Me3": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "getCliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insertar Lead": {
      "main": [
        [
          {
            "node": "Variables globales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Variables globales": {
      "main": [
        [
          {
            "node": "Listas1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getCliente": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "From Me3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Tester Prompt",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Redis3",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis3": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "JSON Parse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON Parse": {
      "main": [
        [
          {
            "node": "Message Type1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type1": {
      "main": [
        [
          {
            "node": "text1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Transcribir",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribir": {
      "main": [
        [
          {
            "node": "text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "text": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "chatInput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chatInput": {
      "main": [
        [
          {
            "node": "Tester Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "text1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Listas1": {
      "main": [
        [],
        [],
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "text3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "text3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insertar": {
      "ai_tool": [
        [
          {
            "node": "Tester Prompt",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB": {
      "ai_tool": [
        [
          {
            "node": "Tester Prompt",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-24T20:26:25.574Z",
  "id": "2BwLUhN8j48U6WfR",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Agente recordatorios",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Funci√≥n para generar el men√∫ principal (categor√≠as)\nfunction generarMenuPrincipal(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üçî Men√∫ Delivery\",\n      \"description\": \"¬°Hola! Bienvenido a nuestro servicio de delivery\",\n      \"buttonText\": \"Ver Categor√≠as\",\n      \"footerText\": \"Selecciona una categor√≠a para continuar\",\n      \"sections\": [\n        {\n          \"title\": \"üçî Nuestro Men√∫\",\n          \"rows\": [\n            {\n              \"title\": \"Burgers con papas\",\n              \"description\": \"Hamburguesas gourmet con papas fritas incluidas\",\n              \"rowId\": \"cat_burgers\"\n            },\n            {\n              \"title\": \"Veggies con papas\",\n              \"description\": \"Hamburguesas vegetarianas con papas fritas incluidas\",\n              \"rowId\": \"cat_veggies\"\n            },\n            {\n              \"title\": \"Fries\",\n              \"description\": \"Papas fritas y toppings especiales\",\n              \"rowId\": \"cat_fries\"\n            },\n            {\n              \"title\": \"Ensaladas\",\n              \"description\": \"Opciones frescas y saludables\",\n              \"rowId\": \"cat_ensaladas\"\n            },\n            {\n              \"title\": \"Menu Kids\",\n              \"description\": \"Opciones especiales para los m√°s peque√±os\",\n              \"rowId\": \"cat_kids\"\n            },\n            {\n              \"title\": \"Tostados con papas\",\n              \"description\": \"Tostados gourmet con papas fritas incluidas\",\n              \"rowId\": \"cat_tostados\"\n            }\n          ]\n        },\n        {\n          \"title\": \"ü•§ Bebidas\",\n          \"rows\": [\n            {\n              \"title\": \"Bebidas sin alcohol\",\n              \"description\": \"Refrescos, jugos y aguas\",\n              \"rowId\": \"cat_bebidas\"\n            },\n            {\n              \"title\": \"Cerveza Artesanal MINGA\",\n              \"description\": \"Variedad de cervezas artesanales\",\n              \"rowId\": \"cat_cervezas\"\n            },\n            {\n              \"title\": \"Tragos\",\n              \"description\": \"Bebidas con alcohol y c√≥cteles\",\n              \"rowId\": \"cat_tragos\"\n            }\n          ]\n        },\n        {\n          \"title\": \"‚ú® Especiales\",\n          \"rows\": [\n            {\n              \"title\": \"Invitados especiales\",\n              \"description\": \"Nuestras creaciones destacadas\",\n              \"rowId\": \"cat_invitados\"\n            },\n            {\n              \"title\": \"Combo Del d√≠a\",\n              \"description\": \"La mejor opci√≥n al mejor precio\",\n              \"rowId\": \"cat_combo\"\n            },\n            {\n              \"title\": \"Promos\",\n              \"description\": \"Ofertas y promociones especiales\",\n              \"rowId\": \"cat_promos\"\n            },\n            {\n              \"title\": \"Postres\",\n              \"description\": \"Dulces para completar tu experiencia\",\n              \"rowId\": \"cat_postres\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para generar el men√∫ de hamburguesas cuando se selecciona \"Burgers con papas\"\nfunction generarMenuBurgers(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üçî Burgers con Papas\",\n      \"description\": \"Selecciona la hamburguesa que deseas ordenar\",\n      \"buttonText\": \"Ver Hamburguesas\",\n      \"footerText\": \"Todas nuestras hamburguesas incluyen papas fritas\",\n      \"sections\": [\n        {\n          \"title\": \"‚≠ê Hamburguesas Cl√°sicas\",\n          \"rows\": [\n            {\n              \"title\": \"Cheese Burger\",\n              \"description\": \"Medall√≥n 120gr (blend secreto), cheddar x4\\nSimple: $14.500 | Doble: $17.300\",\n              \"rowId\": \"burger_cheese\"\n            },\n            {\n              \"title\": \"American\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, ketchup, mostaza, cebolla cubitos, pepinillos\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_american\"\n            },\n            {\n              \"title\": \"Classic\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, salsa mil islas, cebollas, pepinillos, lechuga, tomate\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_classic\"\n            },\n            {\n              \"title\": \"Tasty\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, lechuga, tomate, cebolla morada, aderezo tasty\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_tasty\"\n            }\n          ]\n        },\n        {\n          \"title\": \"ü•ì Hamburguesas con Bacon\",\n          \"rows\": [\n            {\n              \"title\": \"Cheese Bacon\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado\\nSimple: $16.500 | Doble: $19.000 | Triple: $21.900\",\n              \"rowId\": \"burger_cheese_bacon\"\n            },\n            {\n              \"title\": \"Sistons\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado, aioli de berenjena ahumada, pepinillos\\nSimple: $16.500 | Doble: $19.000 | Triple: $21.900\",\n              \"rowId\": \"burger_sistons\"\n            },\n            {\n              \"title\": \"Candy\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado, cebolla caramelizada\\nSimple: $16.500 | Doble: $19.100 | Triple: $21.900\",\n              \"rowId\": \"burger_candy\"\n            },\n            {\n              \"title\": \"Cheese Bacon Egg\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado, huevo a la plancha\\nSimple: $16.700 | Doble: $19.800 | Triple: $22.900\",\n              \"rowId\": \"burger_egg\"\n            }\n          ]\n        },\n        {\n          \"title\": \"üßÖ Hamburguesas con Cebolla\",\n          \"rows\": [\n            {\n              \"title\": \"Fried Onion\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, cebolla smasheada en la plancha\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_fried_onion\"\n            },\n            {\n              \"title\": \"Fried Onion 2.0\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, cebolla smasheada, ali oli, pepinillos (opcional)\\nSimple: $15.800 | Doble: $18.800 | Triple: $21.000\",\n              \"rowId\": \"burger_fried_onion2\"\n            },\n            {\n              \"title\": \"Crispy Onion\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado, ali oli, mil islas, cebolla crispy, pepinillos\\nSimple: $16.700 | Doble: $19.800 | Triple: $22.900\",\n              \"rowId\": \"burger_crispy_onion\"\n            }\n          ]\n        },\n        {\n          \"title\": \"üåü Hamburguesas Especiales\",\n          \"rows\": [\n            {\n              \"title\": \"Blue Cheese\",\n              \"description\": \"Medall√≥n 120gr, queso emmental x2, queso azul, bacon ahumado, cebolla morada\\nSimple: $16.500 | Doble: $19.000 | Triple: $21.900\",\n              \"rowId\": \"burger_blue_cheese\"\n            },\n            {\n              \"title\": \"Butter Sriracha\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, manteca, sriracha\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_sriracha\"\n            },\n            {\n              \"title\": \"Gesell Burger\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, cebolla brunoise salteada, mayonesa heinz\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_gesell\"\n            },\n            {\n              \"title\": \"Pina Burger\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado, aros de cebolla, barbacoa, aioli ahumado\\nSimple: $16.700 | Doble: $19.800 | Triple: $22.900\",\n              \"rowId\": \"burger_pina\"\n            }\n          ]\n        },\n        {\n          \"title\": \"üîù Premium\",\n          \"rows\": [\n            {\n              \"title\": \"Juicy\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado (2 fetas), cebolla morada, salsa secreta, pepinillos\\nSimple: $16.700 | Doble: $19.800 | Triple: $22.900\",\n              \"rowId\": \"burger_juicy\"\n            },\n            {\n              \"title\": \"Sistons Scott\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, ketchup, mostaza, cebolla, pepinillos, lechuga, bacon\\nSimple: $16.700 | Doble: $19.800 | Triple: $22.900\",\n              \"rowId\": \"burger_sistons_scott\"\n            },\n            {\n              \"title\": \"Triple Queso\",\n              \"description\": \"3 medallones 120gr (blend secreto), x6 cheddar\\n$19.800\",\n              \"rowId\": \"burger_triple_queso\"\n            },\n            {\n              \"title\": \"Chicken Burger\",\n              \"description\": \"Pollo crispy, salsa caesar, lechuga, crispy, bacon, cheddar\\n$16.700\",\n              \"rowId\": \"burger_chicken\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para mostrar opciones de una hamburguesa espec√≠fica (Simple/Doble/Triple)\nfunction generarOpcionesHamburguesa(numeroCliente, burgerId, nombreHamburguesa) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": `üçî ${nombreHamburguesa}`,\n      \"description\": \"Selecciona el tama√±o de tu hamburguesa\",\n      \"buttonText\": \"Seleccionar Tama√±o\",\n      \"footerText\": \"Todas nuestras hamburguesas incluyen papas fritas\",\n      \"sections\": [\n        {\n          \"title\": \"üîÑ Selecciona el Tama√±o\",\n          \"rows\": [\n            {\n              \"title\": \"Simple\",\n              \"description\": \"1 medall√≥n de carne de 120gr\",\n              \"rowId\": `${burgerId}_simple`\n            },\n            {\n              \"title\": \"Doble\",\n              \"description\": \"2 medallones de carne de 120gr\",\n              \"rowId\": `${burgerId}_doble`\n            },\n            {\n              \"title\": \"Triple\",\n              \"description\": \"3 medallones de carne de 120gr\",\n              \"rowId\": `${burgerId}_triple`\n            }\n          ]\n        },\n        {\n          \"title\": \"‚¨ÖÔ∏è Navegaci√≥n\",\n          \"rows\": [\n            {\n              \"title\": \"Volver a Hamburguesas\",\n              \"description\": \"Ver otras opciones\",\n              \"rowId\": \"volver_burgers\"\n            },\n            {\n              \"title\": \"Volver al Men√∫ Principal\",\n              \"description\": \"Ver otras categor√≠as\",\n              \"rowId\": \"volver_menu\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para generar la lista de bebidas sin alcohol\nfunction generarMenuBebidas(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"ü•§ Bebidas sin Alcohol\",\n      \"description\": \"Selecciona la bebida que deseas ordenar\",\n      \"buttonText\": \"Ver Bebidas\",\n      \"footerText\": \"Bebidas refrescantes para acompa√±ar tu comida\",\n      \"sections\": [\n        {\n          \"title\": \"ü•§ Gaseosas\",\n          \"rows\": [\n            {\n              \"title\": \"Coca-Cola 500ml\",\n              \"description\": \"Gaseosa sabor cola\\n$1.800\",\n              \"rowId\": \"bebida_coca_500\"\n            },\n            {\n              \"title\": \"Sprite 500ml\",\n              \"description\": \"Gaseosa sabor lima-lim√≥n\\n$1.800\",\n              \"rowId\": \"bebida_sprite_500\"\n            },\n            {\n              \"title\": \"Fanta 500ml\",\n              \"description\": \"Gaseosa sabor naranja\\n$1.800\",\n              \"rowId\": \"bebida_fanta_500\"\n            },\n            {\n              \"title\": \"Coca-Cola Zero 500ml\",\n              \"description\": \"Gaseosa sabor cola sin az√∫car\\n$1.800\",\n              \"rowId\": \"bebida_coca_zero_500\"\n            }\n          ]\n        },\n        {\n          \"title\": \"üíß Agua y Jugos\",\n          \"rows\": [\n            {\n              \"title\": \"Agua Mineral 500ml\",\n              \"description\": \"Agua mineral sin gas\\n$1.500\",\n              \"rowId\": \"bebida_agua_500\"\n            },\n            {\n              \"title\": \"Agua con Gas 500ml\",\n              \"description\": \"Agua mineral con gas\\n$1.500\",\n              \"rowId\": \"bebida_agua_gas_500\"\n            },\n            {\n              \"title\": \"Jugo de Naranja Natural\",\n              \"description\": \"Exprimido al momento\\n$2.200\",\n              \"rowId\": \"bebida_jugo_naranja\"\n            },\n            {\n              \"title\": \"Limonada\",\n              \"description\": \"Con menta y jengibre\\n$2.200\",\n              \"rowId\": \"bebida_limonada\"\n            }\n          ]\n        },\n        {\n          \"title\": \"‚¨ÖÔ∏è Navegaci√≥n\",\n          \"rows\": [\n            {\n              \"title\": \"Volver al Men√∫ Principal\",\n              \"description\": \"Ver otras categor√≠as\",\n              \"rowId\": \"volver_menu\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para generar el men√∫ de cervezas artesanales\nfunction generarMenuCervezas(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üç∫ Cerveza Artesanal MINGA\",\n      \"description\": \"Selecciona la cerveza que deseas ordenar\",\n      \"buttonText\": \"Ver Cervezas\",\n      \"footerText\": \"Cervezas artesanales de producci√≥n local\",\n      \"sections\": [\n        {\n          \"title\": \"üç∫ Cervezas MINGA\",\n          \"rows\": [\n            {\n              \"title\": \"IPA\",\n              \"description\": \"Indian Pale Ale, con notas c√≠tricas y amargor pronunciado\\nPinta: $2.900\",\n              \"rowId\": \"cerveza_ipa\"\n            },\n            {\n              \"title\": \"Golden\",\n              \"description\": \"Rubia suave y refrescante, f√°cil de tomar\\nPinta: $2.700\",\n              \"rowId\": \"cerveza_golden\"\n            },\n            {\n              \"title\": \"Amber\",\n              \"description\": \"Roja con notas a caramelo y cuerpo medio\\nPinta: $2.700\",\n              \"rowId\": \"cerveza_amber\"\n            },\n            {\n              \"title\": \"Stout\",\n              \"description\": \"Negra con notas a caf√© y chocolate\\nPinta: $2.900\",\n              \"rowId\": \"cerveza_stout\"\n            }\n          ]\n        },\n        {\n          \"title\": \"‚¨ÖÔ∏è Navegaci√≥n\",\n          \"rows\": [\n            {\n              \"title\": \"Volver al Men√∫ Principal\",\n              \"description\": \"Ver otras categor√≠as\",\n              \"rowId\": \"volver_menu\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para los combos del d√≠a\nfunction generarMenuCombos(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üî• Combos del D√≠a\",\n      \"description\": \"Nuestras mejores ofertas de hoy\",\n      \"buttonText\": \"Ver Combos\",\n      \"footerText\": \"Aprovecha nuestras promociones especiales\",\n      \"sections\": [\n        {\n          \"title\": \"üî• Combos Especiales\",\n          \"rows\": [\n            {\n              \"title\": \"Combo Individual\",\n              \"description\": \"Hamburguesa Simple + Bebida\\nCon 20% de descuento sobre el precio individual\",\n              \"rowId\": \"combo_individual\"\n            },\n            {\n              \"title\": \"Combo Pareja\",\n              \"description\": \"2 Hamburguesas Dobles + 2 Bebidas\\nCon 25% de descuento sobre el precio individual\",\n              \"rowId\": \"combo_pareja\"\n            },\n            {\n              \"title\": \"Combo Familiar\",\n              \"description\": \"4 Hamburguesas + 4 Bebidas + 2 Postres\\nCon 30% de descuento sobre el precio individual\",\n              \"rowId\": \"combo_familiar\"\n            }\n          ]\n        },\n        {\n          \"title\": \"‚¨ÖÔ∏è Navegaci√≥n\",\n          \"rows\": [\n            {\n              \"title\": \"Volver al Men√∫ Principal\",\n              \"description\": \"Ver otras categor√≠as\",\n              \"rowId\": \"volver_menu\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para solicitar direcci√≥n de entrega\nfunction solicitarDireccion(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"type\": \"text\",\n      \"text\": \"üè† Por favor, ind√≠canos la direcci√≥n de entrega para tu pedido. Incluye calle, n√∫mero, piso/departamento (si aplica) y referencias que nos ayuden a encontrar tu domicilio.\"\n    }\n  ];\n}\n\n// Funci√≥n para solicitar m√©todo de pago\nfunction solicitarMetodoPago(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üí∞ M√©todo de Pago\",\n      \"description\": \"Selecciona c√≥mo deseas pagar tu pedido\",\n      \"buttonText\": \"Seleccionar Pago\",\n      \"footerText\": \"Elige el m√©todo de pago m√°s conveniente\",\n      \"sections\": [\n        {\n          \"title\": \"üí≥ Opciones de Pago\",\n          \"rows\": [\n            {\n              \"title\": \"Efectivo\",\n              \"description\": \"Pagar√© en efectivo al momento de la entrega\",\n              \"rowId\": \"pago_efectivo\"\n            },\n            {\n              \"title\": \"Tarjeta (en delivery)\",\n              \"description\": \"Pagar√© con tarjeta al momento de la entrega\",\n              \"rowId\": \"pago_tarjeta\"\n            },\n            {\n              \"title\": \"Transferencia\",\n              \"description\": \"Realizar√© una transferencia bancaria\",\n              \"rowId\": \"pago_transferencia\"\n            },\n            {\n              \"title\": \"Mercado Pago\",\n              \"description\": \"Pagar√© usando Mercado Pago\",\n              \"rowId\": \"pago_mercadopago\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para procesar mensajes de la IA (personalizaci√≥n de hamburguesa)\nfunction mensajeIA(numeroCliente, nombreHamburguesa, tamano) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"type\": \"text\",\n      \"text\": `¬°Excelente elecci√≥n! Has seleccionado una ${nombreHamburguesa} ${tamano}.\\n\\n¬øDeseas personalizar tu hamburguesa? Puedes decirme si quieres quitar o agregar alg√∫n ingrediente.\\n\\nPor ejemplo:\\n- \"Sin cebolla\"\\n- \"Sin ketchup\"\\n- \"Extra queso\"\\n- \"Agregar bacon\"\\n\\nO simplemente dime \"Est√° bien as√≠\" para continuar con tu pedido.`\n    }\n  ];\n}\n\n// Funci√≥n para confirmar el pedido final\nfunction confirmarPedido(numeroCliente, detallePedido, precioTotal) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üõí Confirmar Pedido\",\n      \"description\": `Tu pedido:\\n${detallePedido}\\n\\nTotal: $${precioTotal}`,\n      \"buttonText\": \"Confirmar\",\n      \"footerText\": \"Verifica que tu pedido est√© correcto\",\n      \"sections\": [\n        {\n          \"title\": \"‚úÖ Finalizar\",\n          \"rows\": [\n            {\n              \"title\": \"Confirmar Pedido\",\n              \"description\": \"Proceder con la compra\",\n              \"rowId\": \"confirmar_pedido\"\n            },\n            {\n              \"title\": \"Editar Pedido\",\n              \"description\": \"Realizar cambios\",\n              \"rowId\": \"editar_pedido\"\n            },\n            {\n              \"title\": \"Cancelar\",\n              \"description\": \"Cancelar todo el pedido\",\n              \"rowId\": \"cancelar_pedido\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Exportar las funciones para su uso\nmodule.exports = {\n  generarMenuPrincipal,\n  generarMenuBurgers,\n  generarOpcionesHamburguesa,\n  generarMenuBebidas,\n  generarMenuCervezas,\n  generarMenuCombos,\n  solicitarDireccion,\n  solicitarMetodoPago,\n  mensajeIA,\n  confirmarPedido\n};\n\n// Si se ejecuta directamente, retornar el men√∫ principal por defecto\n// (Con un n√∫mero de cliente de ejemplo, debe ser reemplazado por el n√∫mero real)\nreturn generarMenuPrincipal($input.first().json.numero_cliente);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1160,
        -240
      ],
      "id": "bf25e0cf-b29e-458f-b6bc-fa53e8c9face",
      "name": "Lista General"
    },
    {
      "parameters": {
        "batchSize": "=1",
        "options": {
          "reset": false
        }
      },
      "id": "b47a0797-5216-4270-b127-9950f5ca409f",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2820,
        -20
      ],
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$node[\"Webhook\"].json.body.server_url}}/message/sendText/{{$node[\"Webhook\"].json.body.instance}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$node[\"Webhook\"].json.body.apikey}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"delay\": 1500,\n    \"number\":\"{{ $('Variables globales').item.json.msg.telefono }}\",\n    \"text\": \"{{ $('Loop Over Items').first().json.output.replace(/\\n/g,'\\\\n').replace(/\\\"/g,'\\'') }}\"\n\n}",
        "options": {}
      },
      "id": "30e02270-9324-4163-8003-a544f130c01e",
      "name": "MESSAGE",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3060,
        100
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "text",
        "options": {}
      },
      "id": "5f091168-7ea7-4fb8-aaf6-f0180fb24780",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2280,
        -420
      ]
    },
    {
      "parameters": {
        "jsCode": "// --- Funciones de procesamiento de texto ---\n\n// Funci√≥n para procesar el texto y dividirlo inteligentemente\nfunction processAndSplitText(textInput) {\n  // Aseg√∫rate de que textInput sea un string o pueda ser convertido\n  let text = textInput;\n\n  // Si la entrada no es un string\n  if (typeof text !== 'string') {\n    // Si es null o undefined, simplemente devolvemos un array vac√≠o\n    if (text === null || text === undefined) {\n      return [];\n    }\n\n    // Si es un objeto, intentamos encontrar campos comunes que contengan texto\n    if (typeof text === 'object') {\n      if (text.text) {\n        text = text.text;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.type === 'text' && text.text) {\n        text = text.text;\n      } else if (text.output) { // Intentamos extraer de un campo 'output'\n          // Si output es un string, lo usamos\n          if (typeof text.output === 'string') {\n              text = text.output;\n          } else { // Si output es un objeto o array, intentamos extraer de ah√≠\n              const extracted = extractTextContent(text.output); // Usamos la funci√≥n de extracci√≥n\n              if (extracted) {\n                  text = extracted;\n              } else {\n                   // Si no pudimos extraer, intentamos convertir todo el objeto a string\n                   try {\n                       text = JSON.stringify(text);\n                   } catch (e) {\n                       console.error(\"No se pudo serializar el objeto a string:\", e);\n                       return []; // Si falla la serializaci√≥n, devolvemos vac√≠o\n                   }\n              }\n          }\n      } else {\n        // Si no encontramos campos de texto comunes ni 'output', intentamos convertir a string\n        try {\n          text = JSON.stringify(text);\n        } catch (e) {\n           console.error(\"No se pudo serializar el objeto a string:\", e);\n           return []; // Si falla la serializaci√≥n, devolvemos vac√≠o\n        }\n      }\n    } else { // Si no es string, objeto, null o undefined, devolvemos vac√≠o\n       console.warn(\"Entrada a processAndSplitText no es string, objeto, null o undefined:\", typeof text);\n       return [];\n    }\n  }\n\n  // Si despu√©s de los intentos no tenemos un string v√°lido, devolvemos vac√≠o\n  if (typeof text !== 'string' || text.trim() === '') {\n      return [];\n  }\n\n  // Ahora que tenemos un string, procesamos el formato\n  const processedText = text\n    .replace(/\\*\\*(.+?)\\*\\*/g, '*$1*') // **texto** -> *texto*\n    .replace(/###\\s*/g, '')         // Elimina encabezados ###\n    .replace(/[¬°¬ø!]/g, '');         // Elimina signos de exclamaci√≥n e interrogaci√≥n iniciales y finales\n\n  // Divide en l√≠neas para an√°lisis\n  const lines = processedText.split('\\n');\n\n  // Grupos para almacenar los mensajes\n  const messages = [];\n  let currentMessage = [];\n  let inNumberedSection = false;\n  let currentSectionNumber = null;\n\n  // Detectar secciones numeradas y agrupables\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    // Detecta si la l√≠nea es un encabezado numerado (ej: \"1. Tipo de propiedad:\")\n    const numberedHeaderMatch = line.match(/^\\s*(\\d+)\\.\\s+([^:]+):/);\n\n    if (numberedHeaderMatch) {\n      const sectionNumber = parseInt(numberedHeaderMatch[1]);\n\n      // Si estamos empezando una nueva secci√≥n numerada O si el n√∫mero no es el siguiente esperado\n      if (!inNumberedSection || (inNumberedSection && sectionNumber !== currentSectionNumber + 1)) {\n         // Si tenemos contenido previo, guardamos como mensaje separado\n         if (currentMessage.length > 0) {\n             messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n             currentMessage = [];\n         }\n         inNumberedSection = true;\n      }\n      currentSectionNumber = sectionNumber; // Actualizamos el n√∫mero de secci√≥n actual\n       currentMessage.push(line); // Agregamos la l√≠nea al mensaje actual\n\n    } else if (line.trim() === '') { // L√≠nea vac√≠a\n        // Una l√≠nea vac√≠a puede terminar una secci√≥n si hay contenido previo\n        if (currentMessage.length > 0) {\n             // Si no estamos en una secci√≥n numerada, una l√≠nea vac√≠a termina el mensaje actual\n             if (!inNumberedSection) {\n                 messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n                 currentMessage = [];\n             } else {\n                 // Si estamos en una secci√≥n numerada, una l√≠nea vac√≠a se agrega al mensaje actual,\n                 // podr√≠a terminar la secci√≥n si hay otra l√≠nea vac√≠a o fin de texto despu√©s.\n                 currentMessage.push(line);\n             }\n        }\n         // Si currentMessage est√° vac√≠o, una l√≠nea vac√≠a consecutiva no hace nada\n\n    } else { // L√≠nea con contenido que no es un encabezado numerado\n        currentMessage.push(line);\n        inNumberedSection = false; // Salimos de la secci√≥n numerada si el contenido no sigue el patr√≥n\n    }\n  }\n\n  // Agregar el √∫ltimo mensaje si queda algo\n  if (currentMessage.length > 0) {\n    messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n  }\n\n  // Filtrar mensajes vac√≠os y limpiar l√≠neas vac√≠as extra\n  return messages\n    .filter(msg => msg.length > 0) // Filtrar cadenas vac√≠as despu√©s del trim\n    .map(msg => {\n      // Eliminar l√≠neas vac√≠as m√∫ltiples dentro del mensaje\n      return msg.replace(/\\n{2,}/g, '\\n\\n');\n    });\n}\n\n// Funci√≥n para extraer texto de diferentes estructuras de datos\nfunction extractTextContent(data) {\n  // Si la data es null o undefined, retornamos null inmediatamente\n  if (data === null || data === undefined) {\n    return null;\n  }\n\n  // Si es un string, lo retornamos directamente\n  if (typeof data === 'string') {\n    return data;\n  }\n\n  // Si es un array\n  if (Array.isArray(data)) {\n    // Iteramos sobre el array e intentamos extraer texto de cada elemento\n    for (const item of data) {\n       const extracted = extractTextContent(item); // Llamada recursiva para elementos del array\n       if (extracted) {\n           return extracted; // Devolvemos el primer texto que encontramos\n       }\n    }\n    return null; // Si no encontramos texto en ning√∫n elemento del array\n  }\n\n  // Si es un objeto\n  if (typeof data === 'object') {\n    // Priorizamos campos comunes que suelen contener texto\n    if (data.text) {\n      return data.text;\n    }\n    if (data.message) {\n      return data.message;\n    }\n    // Si tiene un campo 'output', intentamos extraer texto de √©l (puede ser string, array u objeto)\n    if (data.output !== undefined && data.output !== null) {\n         const extracted = extractTextContent(data.output); // Llamada recursiva para el campo output\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'response', intentamos extraer texto de √©l\n     if (data.response !== undefined && data.response !== null) {\n         const extracted = extractTextContent(data.response); // Llamada recursiva para el campo response\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'json', intentamos extraer texto de √©l\n     if (data.json !== undefined && data.json !== null) {\n         const extracted = extractTextContent(data.json); // Llamada recursiva para el campo json\n         if (extracted) {\n             return extracted;\n         }\n    }\n    // Si no encontramos campos de texto comunes ni estructuras anidadas esperadas,\n    // intentamos convertir el objeto completo a string como √∫ltimo recurso\n     try {\n         return JSON.stringify(data);\n     } catch (e) {\n         console.error(\"No se pudo serializar el objeto a string en extractTextContent:\", e);\n         return null; // Si falla la serializaci√≥n\n     }\n  }\n\n  // Si el tipo de dato no es manejado, retornamos null\n  console.warn(\"Tipo de dato no manejado en extractTextContent:\", typeof data);\n  return null;\n}\n\n// --- L√≥gica Principal con manejo seguro de nodos ---\nlet textToProcess = null;\n\ntry {\n  // Verificar si el nodo \"Cancelar evento\" existe y tiene datos\n  let cancelarEventoData = null;\n  try {\n    // Usamos try-catch para capturar errores si el nodo no existe\n    cancelarEventoData = $('Cancelar evento');\n    if (cancelarEventoData && cancelarEventoData.first() && cancelarEventoData.first().json) {\n      if (cancelarEventoData.first().json.response !== undefined) {\n        textToProcess = extractTextContent(cancelarEventoData.first().json.response);\n      } else {\n        textToProcess = extractTextContent(cancelarEventoData.first().json);\n      }\n    }\n  } catch (e) {\n    // Silenciosamente ignoramos errores si el nodo no existe\n    console.log(\"Nodo 'Cancelar evento' no disponible o sin datos v√°lidos\");\n  }\n  \n  // Solo intentamos acceder a AGE3 si a√∫n no hemos encontrado texto para procesar\n  if (!textToProcess) {\n    try {\n      // Usamos try-catch para capturar errores si el nodo no existe\n      const age3Data = $('AGE3');\n      if (age3Data && age3Data.first() && age3Data.first().json) {\n        if (age3Data.first().json.output !== undefined) {\n          textToProcess = extractTextContent(age3Data.first().json.output);\n        } else {\n          textToProcess = extractTextContent(age3Data.first().json);\n        }\n      }\n    } catch (e) {\n      // Silenciosamente ignoramos errores si el nodo no existe\n      console.log(\"Nodo 'AGE3' no disponible o sin datos v√°lidos\");\n    }\n  }\n  \n  // Si no hemos encontrado datos en los nodos espec√≠ficos, intentamos con $input directamente\n  if (!textToProcess) {\n    try {\n      const inputItems = $input.all();\n      if (inputItems && inputItems.length > 0 && inputItems[0].json) {\n        textToProcess = extractTextContent(inputItems[0].json);\n      }\n    } catch (e) {\n      console.log(\"No se pudo acceder a los datos de entrada directamente:\", e.message);\n    }\n  }\n  \n  // Procesar y retornar el resultado\n  if (textToProcess) {\n    const textArray = processAndSplitText(textToProcess);\n    // Devolvemos un array con un objeto que contiene el array de texto\n    return [{json: {text: textArray}}];\n  } else {\n    // Si no se pudo obtener ni procesar texto, devolvemos un array vac√≠o\n    return [{json: {text: []}}];\n  }\n} catch (error) {\n  // Capturamos cualquier error no manejado y devolvemos un objeto con informaci√≥n del error\n  console.error(\"Error general en el nodo:\", error.message);\n  return [{json: {text: [], error: error.message}}];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2100,
        -220
      ],
      "id": "8392157c-243c-426b-a54b-10824f1dcf49",
      "name": "Separa datos"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1620,
        500
      ],
      "id": "aec5b216-0d45-40db-bfa2-43a330d49dda",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "9O8uUWkp7h4KwsVD",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "options": {
          "systemMessage": "=# Prompt para Agente de Recordatorios Personales\n\nEres Fer, un agente conversacional especializado en crear recordatorios personales por WhatsApp. Eres amigable, eficiente y siempre confirmas los detalles antes de programar.\n\n## Tu Personalidad\n- Saluda con \"¬°Hola [nombre]! üòä\" \n- Usa emojis ocasionalmente para ser m√°s amigable\n- **RESPONDE SIEMPRE CON UNA SOLA ORACI√ìN**\n- S√© conversacional y natural\n- Confirma siempre los datos antes de crear el recordatorio\n\n## Proceso de Creaci√≥n de Recordatorios\n\n### 1. Recepci√≥n de Solicitud\nCuando alguien te pida un recordatorio, identifica qu√© informaci√≥n necesitas:\n- **Mensaje**: ¬øQu√© recordar?\n- **Fecha y hora**: ¬øCu√°ndo?\n- **Destinatario**: ¬øA qui√©n? (necesitas el n√∫mero de tel√©fono)\n\n### 2. Solicitar Informaci√≥n Faltante\nSi falta alg√∫n dato, pregunta de forma conversacional:\n\n**Para la hora:**\n\"¬øA qu√© hora quieres que te recuerde que [acci√≥n]?\"\n\n**Para el n√∫mero de tel√©fono de otra persona:**\n\"Para enviarle el mensaje a [nombre], necesito su n√∫mero de tel√©fono.\"\n\n**Para confirmar si es el n√∫mero correcto:**\n\"¬øEst√°s segura de que el n√∫mero [n√∫mero] es de [nombre] y quieres que le env√≠e '[mensaje]' [fecha] a las [hora]?\"\n\n### 3. Formato de Salida Final\nUna vez que tengas toda la informaci√≥n, ejecuta la herramienta con estos 4 par√°metros separados:\n\n**PAR√ÅMETROS DE LA HERRAMIENTA:**\n- mensaje: [mensaje del recordatorio]\n- fecha_hora: YYYY-MM-DDTHH:MM\n- destinatario: [n√∫mero de tel√©fono sin +]\n- estado: pendiente\n\n**Despu√©s de ejecutar la herramienta, responde:**\n\"¬°Recordatorio creado! üìã\"\n\n## Reglas para Interpretar Fechas y Horas\n\n### Fechas Relativas:\n- \"ma√±ana\" = d√≠a siguiente a hoy\n- \"pasado ma√±ana\" = dos d√≠as despu√©s de hoy\n- \"la pr√≥xima semana\" = lunes de la siguiente semana\n- \"en X d√≠as\" = sumar X d√≠as a la fecha actual\n- \"el viernes\" = pr√≥ximo viernes\n- \"el [n√∫mero]\" = d√≠a [n√∫mero] del mes actual (si ya pas√≥, del pr√≥ximo mes)\n\n### Horas:\n- Si no se especifica hora, preguntar\n- \"por la ma√±ana\" = 09:00\n- \"al mediod√≠a\" = 12:00  \n- \"por la tarde\" = 15:00\n- \"por la noche\" = 20:00\n- Convertir formato 12h a 24h (ej: \"9 AM\" = \"09:00\")\n\n### Fecha de Referencia:\nHoy es **2025-05-24** (s√°bado). Usa esta fecha como referencia.\n\n## Ejemplos de Conversaciones\n\n### Ejemplo 1: Recordatorio Personal\n**Usuario:** \"Hola podes anotarme que ma√±ana tengo q ir al medico\"\n**Agente:** \"¬øA qu√© hora quieres que te recuerde que ma√±ana tienes que ir al m√©dico?\"\n**Usuario:** \"A las 8 am\"\n**Agente:** [Ejecuta herramienta con par√°metros: mensaje=\"Tienes que ir al m√©dico\", fecha_hora=\"2025-05-25T08:00\", destinatario=\"5491123456789\", estado=\"pendiente\"]\n**Agente:** \"¬°Recordatorio creado! üìã\"\n\n### Ejemplo 2: Recordatorio para Otra Persona\n**Usuario:** \"Y env√≠ale un msg a Pablo que ma√±ana compre pastitas\"\n**Agente:** \"¬øA qu√© hora quieres que le env√≠e el mensaje a Pablo para que compre pastillas ma√±ana?\"\n**Usuario:** \"A las 9am\"\n**Agente:** \"Para enviarle el mensaje a Pablo, necesito su n√∫mero de tel√©fono.\"\n**Usuario:** \"Te paso el n√∫mero?\"\n**Agente:** \"S√≠, por favor.\"\n**Usuario:** \"2254423559\"\n**Agente:** \"¬øEst√°s segura de que el n√∫mero 2254423559 es de Pablo y quieres que le env√≠e 'Compra pastillas' ma√±ana a las 9 AM?\"\n**Usuario:** \"S√≠\"\n**Agente:** [Ejecuta herramienta con par√°metros: mensaje=\"Compra pastillas\", fecha_hora=\"2025-05-25T09:00\", destinatario=\"2254423559\", estado=\"pendiente\"]\n**Agente:** \"¬°Recordatorio creado! üìã\"\n\n## Validaciones Importantes\n1. **Siempre confirma el n√∫mero de tel√©fono** cuando es para otra persona\n2. **Repite el mensaje final** para confirmar que entendiste bien\n3. **Si el n√∫mero parece ser el del usuario**, pregunta para confirmar\n4. **S√© amigable pero eficiente** en las confirmaciones\n5. **Usa nombres cuando los conozcas** en lugar de \"el destinatario\"\n6. **SIEMPRE ejecuta la herramienta con los 4 par√°metros separados**\n\n## Respuestas para Consultas No V√°lidas\nSi te preguntan algo que no sea crear recordatorios:\n\"Soy tu asistente para crear recordatorios personales, ¬øqu√© te gustar√≠a recordar? üòä\"\n\n## IMPORTANTE: Uso de Herramientas\nCuando tengas toda la informaci√≥n completa (mensaje, fecha_hora, destinatario), DEBES ejecutar la herramienta de recordatorios pasando cada variable como par√°metro separado:\n\n- Par√°metro 1: mensaje\n- Par√°metro 2: fecha_hora  \n- Par√°metro 3: destinatario\n- Par√°metro 4: estado\n\nNO devuelvas texto con las variables, sino ejecuta directamente la herramienta.\n\n¬°Listo para ayudarte con tus recordatorios!"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1980,
        260
      ],
      "id": "fcb1691a-ecfb-49b7-8519-7e7eab45e1c2",
      "name": "Tester Prompt"
    },
    {
      "parameters": {
        "action": "generate"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -2360,
        400
      ],
      "id": "0dfcf41e-c777-4333-8e48-bb4fd3383a6a",
      "name": "Crypto"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e02fa309-efdc-4424-a35e-232970a746cf",
              "leftValue": "={{ $json.telefono }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2580,
        300
      ],
      "id": "20208830-2805-4548-8c01-6e88d90337b1",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "60a730ae-12a3-4199-88e0-86b27dcbd9cc",
              "leftValue": "={{ $json.body.data.key.remoteJid.match(/@g\\.us$/) !== null }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d7778363-7941-4c98-9754-6ebcb7cea814",
      "name": "From Me3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3700,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bc1dbc77-10d2-48f4-ad72-0b5cffc255c7",
              "leftValue": "={{ $json.body.data.key.fromMe }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3480,
        300
      ],
      "id": "6a514313-7c6d-43b9-85b1-4d029aca4711",
      "name": "If"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "pp0ryisp756shl2",
        "table": "mokibxtj81aic9y",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "pushname",
              "fieldValue": "={{ $node[\"Webhook\"].json.body.data.pushName }}"
            },
            {
              "fieldName": "telefono",
              "fieldValue": "={{ $node[\"Webhook\"].json.body.data.key.remoteJid.replace(/\\D/g, '') }}"
            },
            {
              "fieldName": "key",
              "fieldValue": "={{ $json.data }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -2140,
        400
      ],
      "id": "3cebb634-63d3-4de5-8e95-41dfdec85ff8",
      "name": "Insertar Lead",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f9ecf2fc-da2c-4f44-897a-5dc0a2f2f379",
              "name": "msg.telefono",
              "value": "={{ $('Webhook').item?.json?.body?.data?.key?.remoteJid.replace(/\\D/g, '') || $('Webhook').item?.json?.body?.meta?.sender?.identifier.replace(/\\D/g, '') || null}}",
              "type": "string"
            },
            {
              "id": "dab7ca54-c3d2-4a36-a9ca-a0ebbd375ef5",
              "name": "msg.nombre",
              "value": "={{ $('Webhook').item?.json?.body?.data?.pushName || $('Webhook').item.json.body.meta.sender.name }}",
              "type": "string"
            },
            {
              "id": "01238a36-6907-4aec-ab21-26345ed5fc96",
              "name": "datos.server",
              "value": "={{ $('Webhook').item.json.body.instance }}",
              "type": "string"
            },
            {
              "id": "81612acf-1b66-4c8e-82e4-ce8c77b31334",
              "name": "msg.content",
              "value": "={{ \n  $('Webhook').item?.json?.body?.content?.mensaje?.extendedTextMessage?.text ||\n     $('Webhook').item?.json?.body?.data?.message?.extendedTextMessage?.text ||\n  $('Webhook').item?.json?.body?.data?.message?.imageMessage?.caption || \n  $('Webhook').item?.json?.body?.data?.message?.conversation || \n  $('Webhook').item?.json?.message?.text || \n  $('Webhook').item?.json?.message?.caption || $('Webhook').item.json.body.data.message.audioMessage \n}}",
              "type": "string"
            },
            {
              "id": "cc7dcfe1-8ad7-4fe8-93ec-8f643c7d08c7",
              "name": "msg.type",
              "value": "={{ $('Webhook').item?.json?.body?.data?.messageType || $('Webhook').item.json.body.messages[0].content_type }}",
              "type": "string"
            },
            {
              "id": "2dfc64f4-b222-4ea7-b095-fdd96d9fcb95",
              "name": "msg.idmsg",
              "value": "={{ $('Webhook').item?.json?.body?.data?.key?.id || $('Webhook').item.json.body.contact_inbox.source_id }}",
              "type": "string"
            },
            {
              "id": "076ad2d4-b8ea-440f-9c02-f7e8417a984d",
              "name": "datos.apikey",
              "value": "={{ $('Webhook').item?.json?.body?.apikey || '084938B823FE-4BA9-974E-8C8951DB4277' }}",
              "type": "string"
            },
            {
              "id": "01710423-6391-4a34-81e1-06d4779caf4d",
              "name": "msg.timestamp",
              "value": "={{ $('Webhook').item.json.body.data.messageTimestamp.toDateTime('s').toLocal().toISO()}}",
              "type": "string"
            },
            {
              "id": "e8e6023d-7c0e-4f8b-815f-2abdff369912",
              "name": "datos.server_url",
              "value": "={{ $('Webhook').item?.json?.body?.server_url || 'https://evo.innovasoftpro.dev'}}",
              "type": "string"
            },
            {
              "id": "ca81718f-74eb-4960-ac3a-5b59f39f8710",
              "name": "datos.server_db",
              "value": "https://db.innovasoftpro.dev",
              "type": "string"
            },
            {
              "id": "5553db2c-49aa-4a58-bafe-f8794ce8832d",
              "name": "datos.cliente_key",
              "value": "={{ $('getCliente').item.json.key }}",
              "type": "string"
            },
            {
              "id": "720d2599-daac-474d-904e-0ea0ee40689b",
              "name": "datos.cliente_id",
              "value": "={{ $('getCliente').item.json.Id }}",
              "type": "number"
            },
            {
              "id": "9115b918-14e1-4b2c-95ae-a926e65f61ca",
              "name": "bot.activo",
              "value": "={{ $json.activo }}",
              "type": "string"
            },
            {
              "id": "16fd7a29-5af4-4a04-9efb-ab0c249bf230",
              "name": "lista.id_row",
              "value": "={{ $('From Me3').item.json.body.data.message.listResponseMessage.singleSelectReply.selectedRowId }}",
              "type": "string"
            },
            {
              "id": "cfaf2792-627a-4d9f-a039-5741c802749f",
              "name": "datos.instance",
              "value": "={{ $('Webhook').item.json.body.instance }}",
              "type": "string"
            },
            {
              "id": "a3d07914-3c39-47d8-a122-9c1f6062c940",
              "name": "msg.ListaResponse",
              "value": "={{ $('Webhook').item.json.body.data.message.listResponseMessage.title }}\n{{ $('Webhook').item.json.body.data.message.listResponseMessage.description }}",
              "type": "string"
            },
            {
              "id": "d2215ba8-1fc7-46c2-bcc0-7bd813badd5b",
              "name": "msg.tittle_row_id",
              "value": "={{ $('Webhook').item.json.body.data.message.listResponseMessage.title }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d8069e39-29a8-4c9d-b69c-b042c2ff8044",
      "name": "Variables globales",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1900,
        280
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pp0ryisp756shl2",
        "table": "mokibxtj81aic9y",
        "returnAll": true,
        "options": {
          "where": "=(telefono,eq,{{ $('Webhook').first().json.body.data.key.remoteJid.replace(/\\D/g, '') }}) "
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -2800,
        300
      ],
      "id": "47a72902-531f-4c7e-afab-af2653f49fe8",
      "name": "getCliente",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_delivery",
          "mode": "list",
          "cachedResultName": "n8n_delivery"
        },
        "deleteCommand": "delete",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3160,
        760
      ],
      "id": "1568a282-2a31-423a-9533-c4c20b9a22ff",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "E1mi81N6Tmr5cHS5",
          "name": "GENERICO"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "qeva",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3920,
        300
      ],
      "id": "e71a9a80-2b08-4b9b-b8f8-afd1ac9cd70f",
      "name": "Webhook",
      "webhookId": "160af03a-d560-413b-bea9-ea1007aa1570"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=cel:{{ $('Variables globales').item.json.msg.telefono }}",
        "sessionTTL": 300,
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        1780,
        500
      ],
      "id": "8807f907-9745-43f8-af13-f895d3d88275",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "=msg:{{ $json.msg.telefono }}",
        "messageData": "={{ JSON.stringify($json.msg) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1180,
        680
      ],
      "id": "2d0e5fcc-472b-421d-8733-6d9b0a9d7671",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "message",
        "key": "=msg:{{ $('Variables globales').item.json.msg.telefono }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -980,
        680
      ],
      "id": "5de9dc4e-844c-4703-9529-1afe3715f5ef",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "37fa4c10-4aa3-4c88-8793-c66f540ea575",
                    "leftValue": "={{ JSON.parse($json.message.last()).timestamp }}",
                    "rightValue": "={{ $now.minus(1,'seconds').toLocal().toISO() }}",
                    "operator": {
                      "type": "dateTime",
                      "operation": "before"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "seguir"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "302c2f76-f09c-4d60-bfee-e77b9efe825e",
                    "leftValue": "ListaResponse",
                    "rightValue": "={{ $('Variables globales').item.json.lista }}",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -780,
        680
      ],
      "id": "aaf6610d-0419-45be-94b2-b2429e8c121a",
      "name": "Switch"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -500,
        860
      ],
      "id": "a61487c4-9226-44b9-9142-7b25b0c0e020",
      "name": "Wait",
      "webhookId": "31ebb3ff-4ccd-4bf1-ac16-b2dd2061d3b6"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=msg:{{ $('Variables globales').item.json.msg.telefono }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -500,
        660
      ],
      "id": "aedb9c43-b97f-4a7b-99ff-bcbdc6493ef7",
      "name": "Redis3",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "message",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -340,
        660
      ],
      "id": "00bfe911-ed3d-4b75-9913-08b92280dc6c",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $json.message }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -180,
        660
      ],
      "id": "0bbd8df4-fe01-4e19-90b8-d9c5bc9fb9c4",
      "name": "JSON Parse"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "726ef588-43c5-472e-89e8-a5bfb7656bba",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8cb854e2-c9dc-45e9-b6aa-5f6c0266b561",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "id": "a7fc336a-715c-4297-8b2c-e7b35529ce8c",
      "name": "Message Type1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -20,
        660
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "X7HpeR5PlAtWKQXi",
          "mode": "list",
          "cachedResultName": "AGENTE DELIVERY - LISTAS"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "numero_cliente": "={{ $('Variables globales').item.json.msg.telefono }}",
            "session_id": "={{ $('Variables globales').item.json.msg.idmsg }}",
            "instancia": "={{ $('Variables globales').item.json.datos.instance }}",
            "apikey": "={{ $('Variables globales').item.json.datos.apikey }}",
            "tittle": "={{ $('Variables globales').item.json.lista.id_row }}",
            "url": "={{ $('Variables globales').item.json.datos.server_url }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "numero_cliente",
              "displayName": "numero_cliente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "apikey",
              "displayName": "apikey",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "tittle",
              "displayName": "tittle",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1160,
        -460
      ],
      "id": "be39c842-0fe9-453f-88fa-4944af4b8fce",
      "name": "Listas"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b7d210f0-6a18-456d-9e89-aa28f548b2a0",
              "name": "body.data.message.base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "3a196e47-acec-4c91-81e6-be417a975f37",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        260,
        720
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "body.data.message.base64",
        "options": {
          "mimeType": "audio/mp3"
        }
      },
      "id": "7798159c-b680-4b03-8602-b34a8f984642",
      "name": "Convert to File1",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        420,
        720
      ]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        580,
        720
      ],
      "id": "0407209d-de5c-4baf-975e-4670078a51e1",
      "name": "Transcribir",
      "credentials": {
        "openAiApi": {
          "id": "UfA35dBDzEebw8zR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1120,
        280
      ],
      "id": "dfb1693b-e5ee-4784-a02a-1d1c7a0c9d57",
      "name": "Merge1"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "timestamp"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1460,
        280
      ],
      "id": "d2042e3f-37df-4f62-a1eb-52f8ba150a0e",
      "name": "Sort"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "592a9044-042e-4906-a512-1dca3c55cd6a",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "1b82679b-242a-47f8-a614-662442de52ac",
              "name": "timestamp",
              "value": "={{ $('Edit Fields1').item.json.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        740,
        720
      ],
      "id": "27a14cef-329c-4184-9d24-1e9b6da99093",
      "name": "text"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "text",
              "renameField": true,
              "outputFieldName": "message"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1620,
        280
      ],
      "id": "402d4388-8d5a-46b4-b86e-41e9de2f9d39",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fae28c9-d30a-4250-9a50-5b68c61164cf",
              "name": "message",
              "value": "={{ $json.message.join(\"\\n\") }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1780,
        260
      ],
      "id": "11a9dde8-2d6a-4534-84da-5841ac0385fd",
      "name": "chatInput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "592a9044-042e-4906-a512-1dca3c55cd6a",
              "name": "text",
              "value": "={{ $('JSON Parse').item.json.content }}",
              "type": "string"
            },
            {
              "id": "1b82679b-242a-47f8-a614-662442de52ac",
              "name": "timestamp",
              "value": "={{ $('JSON Parse').item.json.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        280,
        280
      ],
      "id": "c3aa690b-d18a-45e6-8b94-4597abbf226d",
      "name": "text1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ /^cat_.*/.test($json.lista.id_row) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "29901a2b-7a51-4913-82e8-b76f745ec990"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Listas"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fd254dd5-b87c-474c-847c-a95e32ab63da",
                    "leftValue": "={{ $json.msg.content }}",
                    "rightValue": "#menu",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Menu"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8389ffd3-a729-4622-b59f-b4948ba88079",
                    "leftValue": "={{ $json.msg.type }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "texto"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1640,
        260
      ],
      "id": "7145a677-bd29-4e4e-9650-7b8c514c50c0",
      "name": "Listas1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Variables globales').item.json.datos.server_url }}/message/sendList/{{ $('Variables globales').item.json.datos.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Variables globales').item.json.datos.apikey}}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Variables globales').item.json.msg.telefono }}"
            },
            {
              "name": "title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "description",
              "value": "={{ $json.description }}"
            },
            {
              "name": "buttonText",
              "value": "={{ $json.buttonText }}"
            },
            {
              "name": "footerText",
              "value": "={{ $json.footerText }}"
            },
            {
              "name": "sections",
              "value": "={{ $json.sections }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -900,
        -240
      ],
      "id": "55c022a9-0dc1-4c2f-bd65-b2ad4b874be1",
      "name": "menu",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "592a9044-042e-4906-a512-1dca3c55cd6a",
              "name": "text",
              "value": "={{ $('Variables globales').item.json.msg.ListaResponse }}",
              "type": "string"
            },
            {
              "id": "1b82679b-242a-47f8-a614-662442de52ac",
              "name": "timestamp",
              "value": "={{ $('Variables globales').item.json.msg.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        280,
        60
      ],
      "id": "61370456-3b51-4e43-9420-72ff89f8a2dd",
      "name": "text3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3724f9da-543d-4d38-8a62-1a49840dfedf",
              "leftValue": "={{ $json.msg.ListaResponse }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1160,
        80
      ],
      "id": "4e16282d-7bc8-4559-a8d9-56ae424ded82",
      "name": "If1"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Llama a esta heramienta para agendar un recordatorio",
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "pgzahexmtqessds",
        "table": "mlqtf9yegpk7jr5",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "mensaje",
              "fieldValue": "={{ JSON.parse($fromAI('Field_Value', 'string')).mensaje }}"
            },
            {
              "fieldName": "destinatario",
              "fieldValue": "={{ JSON.parse($fromAI('Field_Value', 'string')).destinatario }}"
            },
            {
              "fieldName": "fecha",
              "fieldValue": "={{ JSON.parse($fromAI('Field_Value', 'string')).fecha_hora }}"
            },
            {
              "fieldName": "estado",
              "fieldValue": "={{ JSON.parse($fromAI('Field_Value', 'string')).estado }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        2280,
        480
      ],
      "id": "513aab94-49b9-4128-9c56-161009481205",
      "name": "Insertar",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "cel:5492254423359"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1660,
        860
      ],
      "id": "9221f29c-e44c-4f14-928e-d12ff0ee3538",
      "name": "Redis2",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "projectId": "pgzahexmtqessds",
        "table": "mlqtf9yegpk7jr5",
        "id": "={{ $fromAI('Row_ID_Value', ``, 'string') }}"
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        2140,
        480
      ],
      "id": "10193c06-a4a8-4202-82e8-6fce64b21426",
      "name": "NocoDB",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.innovasoftpro.dev",
            "user-agent": "axios/1.7.9",
            "content-length": "885",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n.innovasoftpro.dev",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "575dad520f0e",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "qeva",
            "data": {
              "key": {
                "remoteJid": "5492254423359@s.whatsapp.net",
                "fromMe": false,
                "id": "5B9B07591FF5F1A242896288372DB4B0"
              },
              "pushName": "Fer { }",
              "status": "DELIVERY_ACK",
              "message": {
                "conversation": "5492254423359",
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "XCEUl9K6Uf8n1g==",
                    "senderTimestamp": "1747842721",
                    "recipientKeyHash": "Q8eaFJBuT8upuA==",
                    "recipientTimestamp": "1747842817"
                  },
                  "deviceListMetadataVersion": 2,
                  "messageSecret": "D2fN5O1bzdngDOwsT7do4VOiYJN1wmcqXk/ykjO+D9s="
                }
              },
              "messageType": "conversation",
              "messageTimestamp": 1748126541,
              "instanceId": "588f50d5-9323-4ec2-a701-6019611508c0",
              "source": "android"
            },
            "destination": "https://n8n.innovasoftpro.dev/webhook/qeva",
            "date_time": "2025-05-24T19:42:21.559Z",
            "sender": "5492254596618@s.whatsapp.net",
            "server_url": "https://evo.innovasoftpro.dev",
            "apikey": "3463F236FF41-417E-8F0A-7F1D0F575FF9"
          },
          "webhookUrl": "https://n8n.innovasoftpro.dev/webhook/qeva",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "2kOn0Oz7c2uvczPK"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-05-27T23:14:24.393Z",
  "versionId": "c31ef672-f8a2-4110-af75-16414af5646f"
}