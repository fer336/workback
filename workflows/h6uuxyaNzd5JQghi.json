{
  "active": false,
  "connections": {
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "escribiendo...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa datos": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type": {
      "main": [
        [
          {
            "node": "Encolado de msg",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Encolado de msg",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "Encolado de msg",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "chatInput",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Elimina la cita1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Elimina la cita - Reagendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Cliente": {
      "main": [
        [
          {
            "node": "Variables globales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Encolado de msg": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "chatInput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chatInput": {
      "main": [
        [
          {
            "node": "Juli",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Variables globales": {
      "main": [
        [
          {
            "node": "Message Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "From Me2": {
      "main": [
        [
          {
            "node": "Validar Cliente",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Redis4": {
      "main": [
        [
          {
            "node": "Texto4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Redis5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "V1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis5": {
      "main": [
        [
          {
            "node": "Texto3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis6": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        []
      ]
    },
    "Redis7": {
      "main": [
        [
          {
            "node": "Redis4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "Redis7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Texto3": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Texto4": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "Separa datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [],
        [
          {
            "node": "From Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "CreateCITA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CreateCITA": {
      "main": [
        [
          {
            "node": "Turno creado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Juli": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turno creado": {
      "main": [
        [
          {
            "node": "Delete lista",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "escribiendo...": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tool_agendar": {
      "ai_tool": [
        [
          {
            "node": "agente_vero",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "tool_cancelar": {
      "ai_tool": [
        [
          {
            "node": "agente_vero",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "tool_reagendar": {
      "ai_tool": [
        [
          {
            "node": "agente_vero",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "tool_turnos": {
      "ai_tool": [
        [
          {
            "node": "agente_vero",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Elimina la cita1": {
      "main": [
        [
          {
            "node": "Cancelar turno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "V1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "V",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "agente_vero": {
      "ai_tool": [
        [
          {
            "node": "Juli",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "agente_martina": {
      "ai_tool": [
        [
          {
            "node": "Juli",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "update_paciente": {
      "ai_tool": [
        [
          {
            "node": "agente_martina",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_paciente": {
      "ai_tool": [
        [
          {
            "node": "agente_martina",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "gemini2": {
      "ai_languageModel": [
        [
          {
            "node": "agente_vero",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Juli",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "agente_martina",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "memory1": {
      "ai_memory": [
        [
          {
            "node": "agente_vero",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "agente_martina",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Juli",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory Manager",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Elimina la cita - Reagendar": {
      "main": [
        [
          {
            "node": "Cancelar turno1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cancelar turno": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cancelar turno1": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tool_think": {
      "ai_tool": [
        [
          {
            "node": "Juli",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "agente_vero",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "agente_martina",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-31T07:33:31.322Z",
  "id": "h6uuxyaNzd5JQghi",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "AGENTE CITAS - MASTER testing",
  "nodes": [
    {
      "parameters": {
        "batchSize": "=1",
        "options": {
          "reset": false
        }
      },
      "id": "c86240e0-c3e0-473b-b188-fcb8e2e6245f",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        6128,
        864
      ],
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "messages",
        "options": {}
      },
      "id": "39b71550-23b9-4c76-a6a9-b9356497b1ae",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        5616,
        912
      ]
    },
    {
      "parameters": {
        "jsCode": "// --- Funciones de procesamiento de texto ---\n\n// Función para dividir texto en fragmentos con tiempo de lectura\nfunction splitTextIntoChunks(text, maxChars = 200) {\n  // Si el texto es muy corto, devolvemos un solo fragmento\n  if (!text || text.length <= maxChars) {\n    return [{\n      parte: 1,\n      texto: text || '',\n      time: calculateReadingTime(text || '')\n    }];\n  }\n\n  const chunks = [];\n  let currentChunk = '';\n  let partNumber = 1;\n  \n  // Dividimos por palabras para no cortar palabras a la mitad\n  const words = text.split(' ');\n  \n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const potentialChunk = currentChunk ? currentChunk + ' ' + word : word;\n    \n    // Si agregar la siguiente palabra excede el límite\n    if (potentialChunk.length > maxChars) {\n      // Si la palabra sola es más larga que maxChars, la cortamos\n      if (word.length > maxChars) {\n        // Guardamos el chunk actual si tiene contenido\n        if (currentChunk) {\n          chunks.push({\n            parte: partNumber++,\n            texto: currentChunk.trim(),\n            time: calculateReadingTime(currentChunk.trim())\n          });\n        }\n        \n        // Cortamos la palabra larga en pedazos\n        let remainingWord = word;\n        while (remainingWord.length > maxChars) {\n          chunks.push({\n            parte: partNumber++,\n            texto: remainingWord.substring(0, maxChars),\n            time: calculateReadingTime(remainingWord.substring(0, maxChars))\n          });\n          remainingWord = remainingWord.substring(maxChars);\n        }\n        \n        // El resto de la palabra se convierte en el nuevo currentChunk\n        currentChunk = remainingWord;\n      } else {\n        // Guardamos el chunk actual y empezamos uno nuevo con esta palabra\n        chunks.push({\n          parte: partNumber++,\n          texto: currentChunk.trim(),\n          time: calculateReadingTime(currentChunk.trim())\n        });\n        currentChunk = word;\n      }\n    } else {\n      // Si cabe, agregamos la palabra al chunk actual\n      currentChunk = potentialChunk;\n    }\n  }\n  \n  // Agregar el último chunk si queda algo\n  if (currentChunk.trim()) {\n    chunks.push({\n      parte: partNumber,\n      texto: currentChunk.trim(),\n      time: calculateReadingTime(currentChunk.trim())\n    });\n  }\n  \n  return chunks;\n}\n\n// Función para calcular el tiempo de lectura basado en la longitud del texto\nfunction calculateReadingTime(text) {\n  const length = text.length;\n  \n  if (length > 150) {\n    return 4; // segundos\n  } else if (length >= 50) {\n    return 3; // segundos\n  } else {\n    return 1; // segundo\n  }\n}\n\n// Función para determinar si un texto necesita ser dividido\nfunction needsSplitting(text) {\n  if (!text || typeof text !== 'string') return false;\n  \n  // Criterios: más de 500 caracteres o más de 100 palabras\n  const charCount = text.length;\n  const wordCount = text.split(/\\s+/).filter(word => word.length > 0).length;\n  \n  return charCount > 500 || wordCount > 100;\n}\n\n// Función para procesar el texto y dividirlo inteligentemente (función original mejorada)\nfunction processAndSplitText(textInput) {\n  // Asegúrate de que textInput sea un string o pueda ser convertido\n  let text = textInput;\n\n  // Si la entrada no es un string\n  if (typeof text !== 'string') {\n    // Si es null o undefined, simplemente devolvemos un array vacío\n    if (text === null || text === undefined) {\n      return [];\n    }\n\n    // Si es un objeto, intentamos encontrar campos comunes que contengan texto\n    if (typeof text === 'object') {\n      if (text.text) {\n        text = text.text;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.type === 'text' && text.text) {\n        text = text.text;\n      } else if (text.output) {\n        // Si output es un string, lo usamos\n        if (typeof text.output === 'string') {\n          text = text.output;\n        } else {\n          // Si output es un objeto o array, intentamos extraer de ahí\n          const extracted = extractTextContent(text.output);\n          if (extracted) {\n            text = extracted;\n          } else {\n            // Si no pudimos extraer, intentamos convertir todo el objeto a string\n            try {\n              text = JSON.stringify(text);\n            } catch (e) {\n              console.error(\"No se pudo serializar el objeto a string:\", e);\n              return [];\n            }\n          }\n        }\n      } else {\n        // Si no encontramos campos de texto comunes ni 'output', intentamos convertir a string\n        try {\n          text = JSON.stringify(text);\n        } catch (e) {\n          console.error(\"No se pudo serializar el objeto a string:\", e);\n          return [];\n        }\n      }\n    } else {\n      // Si no es string, objeto, null o undefined, devolvemos vacío\n      console.warn(\"Entrada a processAndSplitText no es string, objeto, null o undefined:\", typeof text);\n      return [];\n    }\n  }\n\n  // Si después de los intentos no tenemos un string válido, devolvemos vacío\n  if (typeof text !== 'string' || text.trim() === '') {\n    return [];\n  }\n\n  // Ahora que tenemos un string, procesamos el formato\n  const processedText = text\n    .replace(/\\*\\*(.+?)\\*\\*/g, '*$1*') // **texto** -> *texto*\n    .replace(/###\\s*/g, '')         // Elimina encabezados ###\n    .replace(/[¡¿!]/g, '');         // Elimina signos de exclamación e interrogación iniciales y finales\n\n  // Divide en líneas para análisis\n  const lines = processedText.split('\\n');\n\n  // Grupos para almacenar los mensajes\n  const messages = [];\n  let currentMessage = [];\n  let inNumberedSection = false;\n  let currentSectionNumber = null;\n\n  // Detectar secciones numeradas y agrupables\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    // Detecta si la línea es un encabezado numerado (ej: \"1. Tipo de propiedad:\")\n    const numberedHeaderMatch = line.match(/^\\s*(\\d+)\\.\\s+([^:]+):/);\n\n    if (numberedHeaderMatch) {\n      const sectionNumber = parseInt(numberedHeaderMatch[1]);\n\n      // Si estamos empezando una nueva sección numerada O si el número no es el siguiente esperado\n      if (!inNumberedSection || (inNumberedSection && sectionNumber !== currentSectionNumber + 1)) {\n        // Si tenemos contenido previo, guardamos como mensaje separado\n        if (currentMessage.length > 0) {\n          messages.push(currentMessage.join('\\n').trim());\n          currentMessage = [];\n        }\n        inNumberedSection = true;\n      }\n      currentSectionNumber = sectionNumber;\n      currentMessage.push(line);\n\n    } else if (line.trim() === '') {\n      // Una línea vacía puede terminar una sección si hay contenido previo\n      if (currentMessage.length > 0) {\n        // Si no estamos en una sección numerada, una línea vacía termina el mensaje actual\n        if (!inNumberedSection) {\n          messages.push(currentMessage.join('\\n').trim());\n          currentMessage = [];\n        } else {\n          // Si estamos en una sección numerada, una línea vacía se agrega al mensaje actual\n          currentMessage.push(line);\n        }\n      }\n\n    } else {\n      // Línea con contenido que no es un encabezado numerado\n      currentMessage.push(line);\n      inNumberedSection = false;\n    }\n  }\n\n  // Agregar el último mensaje si queda algo\n  if (currentMessage.length > 0) {\n    messages.push(currentMessage.join('\\n').trim());\n  }\n\n  // Filtrar mensajes vacíos y limpiar líneas vacías extra\n  return messages\n    .filter(msg => msg.length > 0)\n    .map(msg => {\n      // Eliminar líneas vacías múltiples dentro del mensaje\n      return msg.replace(/\\n{2,}/g, '\\n\\n');\n    });\n}\n\n// Función para extraer texto de diferentes estructuras de datos\nfunction extractTextContent(data) {\n  // Si la data es null o undefined, retornamos null inmediatamente\n  if (data === null || data === undefined) {\n    return null;\n  }\n\n  // Si es un string, lo retornamos directamente\n  if (typeof data === 'string') {\n    return data;\n  }\n\n  // Si es un array\n  if (Array.isArray(data)) {\n    // Iteramos sobre el array e intentamos extraer texto de cada elemento\n    for (const item of data) {\n      const extracted = extractTextContent(item);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    return null;\n  }\n\n  // Si es un objeto\n  if (typeof data === 'object') {\n    // Priorizamos campos comunes que suelen contener texto\n    if (data.text) {\n      return data.text;\n    }\n    if (data.message) {\n      return data.message;\n    }\n    // Si tiene un campo 'output', intentamos extraer texto de él\n    if (data.output !== undefined && data.output !== null) {\n      const extracted = extractTextContent(data.output);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    // Si tiene un campo 'response', intentamos extraer texto de él\n    if (data.response !== undefined && data.response !== null) {\n      const extracted = extractTextContent(data.response);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    // Si tiene un campo 'json', intentamos extraer texto de él\n    if (data.json !== undefined && data.json !== null) {\n      const extracted = extractTextContent(data.json);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    // Si no encontramos campos de texto comunes ni estructuras anidadas esperadas,\n    // intentamos convertir el objeto completo a string como último recurso\n    try {\n      return JSON.stringify(data);\n    } catch (e) {\n      console.error(\"No se pudo serializar el objeto a string en extractTextContent:\", e);\n      return null;\n    }\n  }\n\n  // Si el tipo de dato no es manejado, retornamos null\n  console.warn(\"Tipo de dato no manejado en extractTextContent:\", typeof data);\n  return null;\n}\n\n// --- Lógica Principal con manejo seguro de nodos ---\nlet textToProcess = null;\n\ntry {\n  // Verificar si el nodo \"Cancelar evento\" existe y tiene datos\n  let cancelarEventoData = null;\n  try {\n    // Usamos try-catch para capturar errores si el nodo no existe\n    cancelarEventoData = $('Cancelar evento');\n    if (cancelarEventoData && cancelarEventoData.first() && cancelarEventoData.first().json) {\n      if (cancelarEventoData.first().json.response !== undefined) {\n        textToProcess = extractTextContent(cancelarEventoData.first().json.response);\n      } else {\n        textToProcess = extractTextContent(cancelarEventoData.first().json);\n      }\n    }\n  } catch (e) {\n    // Silenciosamente ignoramos errores si el nodo no existe\n    console.log(\"Nodo 'Cancelar evento' no disponible o sin datos válidos\");\n  }\n  \n  // Solo intentamos acceder a AGE3 si aún no hemos encontrado texto para procesar\n  if (!textToProcess) {\n    try {\n      // Usamos try-catch para capturar errores si el nodo no existe\n      const age3Data = $('AGE3');\n      if (age3Data && age3Data.first() && age3Data.first().json) {\n        if (age3Data.first().json.output !== undefined) {\n          textToProcess = extractTextContent(age3Data.first().json.output);\n        } else {\n          textToProcess = extractTextContent(age3Data.first().json);\n        }\n      }\n    } catch (e) {\n      // Silenciosamente ignoramos errores si el nodo no existe\n      console.log(\"Nodo 'AGE3' no disponible o sin datos válidos\");\n    }\n  }\n  \n  // Si no hemos encontrado datos en los nodos específicos, intentamos con $input directamente\n  if (!textToProcess) {\n    try {\n      const inputItems = $input.all();\n      if (inputItems && inputItems.length > 0 && inputItems[0].json) {\n        textToProcess = extractTextContent(inputItems[0].json);\n      }\n    } catch (e) {\n      console.log(\"No se pudo acceder a los datos de entrada directamente:\", e.message);\n    }\n  }\n  \n  // Procesar y retornar el resultado\n  if (textToProcess) {\n    const textArray = processAndSplitText(textToProcess);\n    \n    // Procesar cada mensaje y dividirlo en chunks si es necesario\n    const processedMessages = [];\n    \n    for (const message of textArray) {\n      if (needsSplitting(message)) {\n        // Si el mensaje es largo, lo dividimos en chunks\n        const chunks = splitTextIntoChunks(message);\n        processedMessages.push(...chunks);\n      } else {\n        // Si el mensaje es corto, lo agregamos tal cual con tiempo de lectura\n        processedMessages.push({\n          parte: processedMessages.length + 1,\n          texto: message,\n          time: calculateReadingTime(message)\n        });\n      }\n    }\n    \n    // Re-numerar las partes para que sean consecutivas\n    processedMessages.forEach((msg, index) => {\n      msg.parte = index + 1;\n    });\n    \n    // Devolvemos la estructura con los mensajes procesados\n    return [{json: {messages: processedMessages, totalParts: processedMessages.length}}];\n  } else {\n    // Si no se pudo obtener ni procesar texto, devolvemos un array vacío\n    return [{json: {messages: [], totalParts: 0}}];\n  }\n} catch (error) {\n  // Capturamos cualquier error no manejado y devolvemos un objeto con información del error\n  console.error(\"Error general en el nodo:\", error.message);\n  return [{json: {messages: [], totalParts: 0, error: error.message}}];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5408,
        912
      ],
      "id": "8e992dcb-e2b9-45d5-b005-5cf878f39422",
      "name": "Separa datos"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.msg.type }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "c203e3f3-cdae-4308-b7ca-2300800248e7"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0cb14635-2673-408e-86db-ce9e0373674b",
                    "leftValue": "={{ $json.msg.type }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "462a2dc9-b455-4b67-a55b-15ce1554f0e8",
                    "leftValue": "={{ $json.msg.type }}",
                    "rightValue": "reply",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "button"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "61909e38-68a6-46cc-9287-bd79d0b95854",
                    "leftValue": "={{ $json.msg.type }}",
                    "rightValue": "extendedTextMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "extendedTextMessage"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "89191595-e9ab-4d53-881b-ed5247811e44",
                    "leftValue": "={{ $json.msg.content === 'Quiero cambiar mi fecha' }}",
                    "rightValue": "Quiero cambiar mi fecha",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Modificar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d1365037-6336-4f42-ad67-111b60828b07",
                    "leftValue": "={{ $('Webhook2').first().json.body.data.msgContent.listResponseMessage.contextInfo.quotedMessage.listMessage.buttonText === 'Confirmar ✅' }}",
                    "rightValue": "Confirmar ✅",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Confirmar ✅"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "06ff860d-976d-4fdc-9dd3-8c9483137f8d",
                    "leftValue": "={{ $('Webhook2').first().json.body.data.msgContent.listResponseMessage.contextInfo.quotedMessage.listMessage.buttonText === '⛔ CANCELAR CITA' }}",
                    "rightValue": " ❌ Cancelar cita",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Cancelar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b64bdc33-47da-4c94-988d-1ba19386a5a2",
                    "leftValue": "={{ $('Webhook2').first().json.body.data.msgContent.listResponseMessage.contextInfo.quotedMessage.listMessage.buttonText === '📋 REAGENDAR CONSULTA'}}",
                    "rightValue": "📆 Elegir cita",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Reprogramar"
            }
          ]
        },
        "options": {}
      },
      "id": "b1c916e5-ed4d-4d02-97b6-f3565e5154a6",
      "name": "Message Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1872,
        1472
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "93rlsJqTd0Ntt2NC",
          "mode": "list",
          "cachedResultName": "AGENTE CITAS - GET CLIENTES"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "numero": "={{ $('V1').item.json.msg.telefono }}",
            "idTabla": "mydefkz038xyn3g",
            "token": "3WY4UecQy9Nl522fe_DXDSHeQDVSQJpmDG7mMoFz",
            "servidor_db": "={{ $('V1').item.json.datos.server_db }}",
            "nombre_columna": "TELEFONO"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "servidor_db",
              "displayName": "servidor_db",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "idTabla",
              "displayName": "idTabla",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "token",
              "displayName": "token",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "numero",
              "displayName": "numero",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "nombre_columna",
              "displayName": "nombre_columna",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "pushname",
              "displayName": "pushname",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "servidor_evo",
              "displayName": "servidor_evo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "id_mensaje",
              "displayName": "id_mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1072,
        1504
      ],
      "id": "b7bd87b1-12b0-4c93-8b0a-088dcb3d3961",
      "name": "Validar Cliente"
    },
    {
      "parameters": {
        "content": "## Validacion de cliente en base de datos",
        "height": 380,
        "width": 340,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -32,
        336
      ],
      "typeVersion": 1,
      "id": "3740582e-5a4c-4ac0-b760-63bf357ed0a1",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "tD2EBk1RhsCBSSkb",
          "mode": "list",
          "cachedResultName": "SUB TAREA - ENLOCAR MSG Citas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2240,
        1360
      ],
      "id": "2341f372-1a83-4166-9a64-7772466c139e",
      "name": "Encolado de msg"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "timestamp"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        2480,
        1360
      ],
      "id": "38fff258-f25e-4bf0-9eb7-56d18fcd8ec9",
      "name": "Sort"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "text",
              "renameField": true,
              "outputFieldName": "text"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2720,
        1360
      ],
      "id": "caee265c-e01d-4e24-91a1-0e30c842f5c3",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fae28c9-d30a-4250-9a50-5b68c61164cf",
              "name": "message",
              "value": "={{ $json?.text?.join(\"\\n\") || $json.msg.content }}",
              "type": "string"
            },
            {
              "id": "d5b09385-d3b2-4a98-ab34-48b786de7354",
              "name": "fecha",
              "value": "={{ $now.setLocale('es').toFormat('EEEE d \\'de\\' MMMM yyyy \\'a las\\' H:mm') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2944,
        1360
      ],
      "id": "e4e4e13a-3b58-4c94-ba0f-0a468f28e604",
      "name": "chatInput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "79a702ff-5f8c-4814-bddf-5e3acb5a5f2e",
              "name": "msg",
              "value": "={{ JSON.stringify($('V1').first().json.msg)}}",
              "type": "object"
            },
            {
              "id": "9337176e-e568-4efa-8c05-3bdb12ecfb61",
              "name": "id_cliente",
              "value": "={{ $json.list.Id }}",
              "type": "string"
            },
            {
              "id": "08b235c8-58cc-48d1-a1c4-dd76a89ea7cc",
              "name": "clientebd",
              "value": "={{ JSON.stringify($json.list) }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "7a1a4071-6987-4c25-81df-6f0d9203306f",
      "name": "Variables globales",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1472,
        1504
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "content": "## Variables Generales y necesarias",
        "height": 380,
        "width": 340,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -432,
        336
      ],
      "typeVersion": 1,
      "id": "704e1434-f9b7-4589-803a-376174391acd",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "## Variables de BD",
        "height": 380,
        "width": 340,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        928,
        1344
      ],
      "typeVersion": 1,
      "id": "6e32e575-1575-4b77-a571-7a97e5d3cb94",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "94746291-c0f3-44f3-b635-1fe696d7d74e",
              "leftValue": "={{ $json.msg.from_me }}",
              "rightValue": "false",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "7216b3e8-2aeb-4512-bf22-8ad17559b9f5",
              "leftValue": "={{ $json.msg.telefono }}",
              "rightValue": "5492254596618",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c3d50f44-a5d9-4ed9-a9d3-f57dae3110f9",
      "name": "From Me2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        736,
        1504
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=bot:{{ $json.msg.telefono }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1296,
        496
      ],
      "id": "1e17fabd-ed0c-4c5a-bc2c-0f42a369de41",
      "name": "Redis4",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": "={{1}}"
            },
            {
              "name": "body",
              "value": "={{ $json.msg.off }}"
            },
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1536,
        48
      ],
      "id": "de0f1fd4-8468-4718-b48b-e67ba22d2ddf",
      "name": "Texto2",
      "credentials": {}
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7c646201-9638-4381-ba78-8b2ede680b4d",
              "leftValue": "={{ $('Webhook2').item.json.body.messages[0].from }}",
              "rightValue": "5492254596618",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "60e15f5b-bbc9-47ea-a160-5df35f39a4a9",
              "leftValue": "={{ $('Webhook2').item.json.body.messages[0].text.body.toLowerCase() === 'off' }}",
              "rightValue": "={{pausar}}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        656,
        368
      ],
      "id": "ea95b6d0-f87b-46bd-aef6-7fcc1e75435d",
      "name": "If4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f9ecf2fc-da2c-4f44-897a-5dc0a2f2f379",
              "name": "msg.telefono",
              "value": "={{ $json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
              "type": "string"
            },
            {
              "id": "dab7ca54-c3d2-4a36-a9ca-a0ebbd375ef5",
              "name": "msg.pushname",
              "value": "={{ $json.body.data.pushName }}",
              "type": "string"
            },
            {
              "id": "cc7dcfe1-8ad7-4fe8-93ec-8f643c7d08c7",
              "name": "msg.type",
              "value": "={{ $json.body.data.messageType }}",
              "type": "string"
            },
            {
              "id": "81612acf-1b66-4c8e-82e4-ce8c77b31334",
              "name": "msg.content",
              "value": "={{ $json?.body?.data?.msgContent?.extendedTextMessage?.contextInfo?.quotedMessage?.conversation || $json.body?.data?.msgContent?.extendedTextMessage?.text || $json?.body?.data?.fileBase64 || $json?.body?.data?.msgContent?.conversation || $json.body.data.msgContent.listResponseMessage.singleSelectReply.selectedRowId }}",
              "type": "string"
            },
            {
              "id": "01710423-6391-4a34-81e1-06d4779caf4d",
              "name": "msg.timestamp",
              "value": "={{ $json.body.data.messageTimestamp.toDateTime('s').toLocal().toISO()}}",
              "type": "string"
            },
            {
              "id": "2dfc64f4-b222-4ea7-b095-fdd96d9fcb95",
              "name": "msg.idmsg",
              "value": "={{ $json.body.data.key.id }}",
              "type": "string"
            },
            {
              "id": "ca81718f-74eb-4960-ac3a-5b59f39f8710",
              "name": "datos.server_db",
              "value": "https://db.qeva.xyz",
              "type": "string"
            },
            {
              "id": "be83160a-e151-4f62-bfde-590af142ae74",
              "name": "db.table_clientes",
              "value": "mydefkz038xyn3g",
              "type": "string"
            },
            {
              "id": "c85ab512-ca17-401b-b025-4b6fc11ac818",
              "name": "db.token_db",
              "value": "3WY4UecQy9Nl522fe_DXDSHeQDVSQJpmDG7mMoFz",
              "type": "string"
            },
            {
              "id": "6fedaf9c-efe8-46e5-bb61-b42525ddafa1",
              "name": "msg.grupo",
              "value": "={{ $json.body.data.isGroup }}",
              "type": "boolean"
            },
            {
              "id": "7f846767-8866-43e5-845a-d1feda60451c",
              "name": "datos.token",
              "value": "B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410",
              "type": "string"
            },
            {
              "id": "b2193a26-668b-423d-9330-d3dd835f5466",
              "name": "msg.from_me",
              "value": "={{ $json.body.data.key.fromMe }}",
              "type": "string"
            },
            {
              "id": "49aecbc3-3d0e-4836-bcfa-dc79599cc53e",
              "name": "button.confirm",
              "value": "={{ $json.body.data.msgContent.templateButtonReplyMessage.selectedId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "40ab7728-0343-43d4-b60d-43df8043c09c",
      "name": "V1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -176,
        1488
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=bot:{{ $json.msg.telefono }}",
        "value": "off",
        "expire": true,
        "ttl": 360
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        880,
        176
      ],
      "id": "3dac05e3-ff8f-40cc-a3de-77fa4574a285",
      "name": "Redis5",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "estado",
        "key": "=bot:{{ $json.msg.telefono }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -320,
        512
      ],
      "id": "432e6d4a-220a-4b37-aa65-1cfdffed25e5",
      "name": "Redis6",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a96a483c-e241-46d6-a5c0-6d5a315c6ca5",
              "leftValue": "={{ $json.estado }}",
              "rightValue": "off",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        64,
        512
      ],
      "id": "389dfe6e-271b-4ee3-a40f-602331c71afe",
      "name": "If5"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=bot:{{ $json.msg.telefono }}",
        "value": "on"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1088,
        368
      ],
      "id": "ca2287d4-4e3e-4024-a824-b36590bcb30e",
      "name": "Redis7",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c39920c3-e5a7-48d6-b1ed-31b94ae55381",
              "leftValue": "={{ $json.msg.content.toLowerCase() }}",
              "rightValue": "on",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        880,
        576
      ],
      "id": "83c9d290-e526-48de-9d8e-3d95555a8069",
      "name": "If6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": "={{1}}"
            },
            {
              "name": "body",
              "value": "=Apartir de ahora la comunicacion sera con *Francisco*"
            },
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1088,
        0
      ],
      "id": "117b9b17-d062-4cf6-ae22-4394368ddc5c",
      "name": "Texto3",
      "credentials": {}
    },
    {
      "parameters": {
        "content": "## Intervencion Humana\n",
        "height": 800,
        "width": 1580,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        480,
        -32
      ],
      "typeVersion": 1,
      "id": "93dd7431-4060-4157-8d7e-6728a7ce36ac",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://gate.whapi.cloud/messages/{{ $('V1').item.json.msg.idmsg }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        496
      ],
      "id": "4e93347e-d8aa-49c6-819d-c54f5fa55253",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://gate.whapi.cloud/messages/{{ $('V1').item.json.msg.idmsg }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1328,
        144
      ],
      "id": "e9fa2520-9305-4023-b585-1950b345021b",
      "name": "HTTP Request1",
      "credentials": {}
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://gate.whapi.cloud/messages/{{ $('V1').item.json.msg.idmsg }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1536,
        288
      ],
      "id": "9e85f09d-dd3c-4c23-a430-972a02a5aff6",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": "={{1}}"
            },
            {
              "name": "body",
              "value": "=Apartir de ahora sigues la conversacion con *Martin*."
            },
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1520,
        496
      ],
      "id": "b95a1deb-e7bb-4a51-abaa-2f4cdbcaac91",
      "name": "Texto4"
    },
    {
      "parameters": {
        "content": "## Variables globales",
        "height": 380,
        "width": 340,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1344,
        1344
      ],
      "typeVersion": 1,
      "id": "c9c7cacc-98d7-433a-bcdd-f6dec262fdd4",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9a858fa6-8f70-4ce7-a956-8c0209fbb10f",
              "leftValue": "={{ $json.output }}",
              "rightValue": "button_confirm",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4976,
        896
      ],
      "id": "0eb24197-e58f-4701-9df4-84bab3415a77",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "dedeb630-ea71-4ac7-808d-7401688ff128",
              "leftValue": "={{ $json.msg.grupo }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        400,
        1488
      ],
      "id": "e6cc8a64-eec9-4c5f-a04e-c2cd1345c103",
      "name": "If1"
    },
    {
      "parameters": {
        "content": "## RESET BBDD",
        "height": 240,
        "width": 260,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3104,
        944
      ],
      "typeVersion": 1,
      "id": "e7a3e07f-2004-4138-aaef-467205f3d950",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "5492254596618"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3184,
        1024
      ],
      "id": "e988b12a-8659-4d3b-bd90-409222cbe16c",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "content": "### Variables globales colocar las que necesites de cada api utilizada",
        "height": 260,
        "width": 340,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -288,
        1408
      ],
      "typeVersion": 1,
      "id": "4aa34fd0-5c12-4ed6-8927-b2d2a5996163",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "={{ $('Split Out').item.json.texto }}"
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6912,
        960
      ],
      "id": "a529f962-1a43-49cc-b58d-9b1992c37c87",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "jsCode": "// OBTENER EL TEXTO DEL MENSAJE\nconst messageText = $input.first().json.msg.content;\n\n// FUNCIÓN PARA LIMPIAR TEXTO\nfunction cleanText(text) {\n  return text.replace(/\\s+/g, ' ').trim();\n}\n\n// FUNCIÓN PARA FORMATEAR FECHA EN FORMATO ISO (YYYY-MM-DD)\nfunction formatFecha(fecha) {\n  try {\n    const fechaLimpia = cleanText(fecha);\n    \n    // Si la fecha está en formato DD/MM/YYYY o DD-MM-YYYY\n    if (fechaLimpia.match(/^\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{4}$/)) {\n      const parts = fechaLimpia.split(/[\\/\\-]/);\n      const day = parts[0].padStart(2, '0');\n      const month = parts[1].padStart(2, '0');\n      const year = parts[2];\n      return `${year}-${month}-${day}`; // Formato ISO para NocoDB\n    }\n    // Si la fecha está en formato YYYY-MM-DD\n    else if (fechaLimpia.match(/^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/)) {\n      const parts = fechaLimpia.split(/[\\/\\-]/);\n      const year = parts[0];\n      const month = parts[1].padStart(2, '0');\n      const day = parts[2].padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n    else {\n      // Intentar parsear con Date y convertir a ISO\n      const tempDate = new Date(fechaLimpia);\n      if (!isNaN(tempDate.getTime())) {\n        const year = tempDate.getFullYear();\n        const month = (tempDate.getMonth() + 1).toString().padStart(2, '0');\n        const day = tempDate.getDate().toString().padStart(2, '0');\n        return `${year}-${month}-${day}`;\n      }\n      return fechaLimpia;\n    }\n  } catch (error) {\n    return fecha;\n  }\n}\n\n// FUNCIÓN PARA FORMATEAR HORA EN FORMATO 24H (HH:MM:SS)\nfunction formatHora(hora) {\n  try {\n    const horaLimpia = cleanText(hora);\n    \n    // Si la hora está en formato HH:MM (24h) o H:MM\n    if (horaLimpia.match(/^\\d{1,2}:\\d{2}$/)) {\n      const timeParts = horaLimpia.split(':');\n      const hours = timeParts[0].padStart(2, '0');\n      const minutes = timeParts[1].padStart(2, '0');\n      return `${hours}:${minutes}:00`; // Agregar segundos para formato completo\n    }\n    // Si la hora incluye segundos HH:MM:SS\n    else if (horaLimpia.match(/^\\d{1,2}:\\d{2}:\\d{2}$/)) {\n      const timeParts = horaLimpia.split(':');\n      const hours = timeParts[0].padStart(2, '0');\n      const minutes = timeParts[1].padStart(2, '0');\n      const seconds = timeParts[2].padStart(2, '0');\n      return `${hours}:${minutes}:${seconds}`;\n    }\n    // Si la hora incluye AM/PM, convertir a 24h\n    else if (horaLimpia.match(/^\\d{1,2}:\\d{2}\\s*(AM|PM)$/i)) {\n      const [time, period] = horaLimpia.split(/\\s+/);\n      const [hours, minutes] = time.split(':');\n      let hour24 = parseInt(hours);\n      \n      if (period.toUpperCase() === 'PM' && hour24 !== 12) {\n        hour24 += 12;\n      } else if (period.toUpperCase() === 'AM' && hour24 === 12) {\n        hour24 = 0;\n      }\n      \n      return `${hour24.toString().padStart(2, '0')}:${minutes}:00`;\n    }\n    else {\n      // Si no coincide con ningún formato, asumir que son solo horas y agregar :00:00\n      if (horaLimpia.match(/^\\d{1,2}$/)) {\n        return `${horaLimpia.padStart(2, '0')}:00:00`;\n      }\n      return horaLimpia; // Retornar como está\n    }\n  } catch (error) {\n    return hora; // Retornar original en caso de error\n  }\n}\n\n// OBTENER ID DESDE VARIABLES GLOBALES\nfunction obtenerID() {\n  return $('Variables globales').first().json.id_cliente;\n}\n\n// EXTRAER DATOS ESPECÍFICOS\nfunction parseMessage(text) {\n  let nombre = '';\n  let fecha = '';\n  let hora = '';\n  let servicio = '';\n  \n  // Verificar si es un mensaje de confirmación\n  if (text.includes('✅ CONFIRMADO')) {\n    // Extraer datos del formato: ✅ CONFIRMADO - Juan Pérez | 30/07/2025 | 15:30 | Consulta General\n    const parts = text.split(' - ')[1].split(' | ');\n    if (parts.length === 4) {\n      nombre = cleanText(parts[0]);\n      fecha = formatFecha(parts[1]);\n      hora = formatHora(parts[2]);\n      servicio = cleanText(parts[3]);\n    }\n  } else {\n    // Buscar NOMBRE (puede estar como \"Paciente:\", \"Nombre:\", \"Cliente:\")\n    const nombreMatch = text.match(/(?:Paciente|Nombre|Cliente):\\s*([^📧📅⏰🏥💡\\n|]+)/i);\n    if (nombreMatch) nombre = cleanText(nombreMatch[1]);\n    \n    // Buscar FECHA\n    const fechaMatch = text.match(/(?:Fecha):\\s*([^📧📅⏰🏥💡\\n|]+)/i);\n    if (fechaMatch) fecha = formatFecha(fechaMatch[1]);\n    \n    // Buscar HORA\n    const horaMatch = text.match(/(?:Hora):\\s*([^📧📅⏰🏥💡\\n|]+)/i);\n    if (horaMatch) hora = formatHora(horaMatch[1]);\n    \n    // Buscar SERVICIO (puede estar como \"Motivo:\", \"Servicio:\", \"Consulta:\")\n    const servicioMatch = text.match(/(?:Motivo|Servicio|Consulta|Tipo):\\s*([^📧📅⏰🏥💡\\n|]+)/i);\n    if (servicioMatch) servicio = cleanText(servicioMatch[1]);\n  }\n  \n  return {\n    NOMBRE: nombre,\n    FECHA: fecha,\n    HORA: hora,\n    SERVICIO: servicio,\n    ID: obtenerID()\n  };\n}\n\n// PROCESAR Y RETORNAR LOS DATOS ESPECÍFICOS\nconst resultado = parseMessage(messageText);\n\n// LOG PARA DEBUGGING (opcional)\nconsole.log('Datos extraídos:', resultado);\n\nreturn [{ json: resultado }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2224,
        1680
      ],
      "id": "dfafd4cb-c7e1-4e56-84f2-0ddb1c28c077",
      "name": "Code"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "projectId": "pg80f80zr77phub",
        "table": "mydefkz038xyn3g",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "TELEFONO",
              "fieldValue": "={{ $('Variables globales').first().json.msg.telefono }}"
            },
            {
              "fieldName": "NOMBRE",
              "fieldValue": "={{ $json.NOMBRE }}"
            },
            {
              "fieldName": "FECHA",
              "fieldValue": "={{ $json.FECHA }}"
            },
            {
              "fieldName": "HORA",
              "fieldValue": "={{ $json.HORA }}"
            },
            {
              "fieldName": "SERVICIO",
              "fieldValue": "={{ $json.SERVICIO }}"
            },
            {
              "fieldName": "Id",
              "fieldValue": "={{ $json.ID }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        2480,
        1680
      ],
      "id": "3759ece8-279d-41fb-a91d-caca1f572fe7",
      "name": "CreateCITA",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "=✅ Perfecto {{ $json.NOMBRE }} , el turno ya está agendado para {{ $json.FECHA }} en el horarios de las {{ $json.HORA }} . Seguramente te enviemos un mensajito para confirmar el turno unas horas antes. Saludos\n"
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2720,
        1680
      ],
      "id": "3584d42a-1cb2-4187-93af-95666f7f2aa5",
      "name": "Turno creado"
    },
    {
      "parameters": {
        "amount": 1,
        "path": "6c8e9c68-b02c-4093-adb8-8d51358da478"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        6688,
        944
      ],
      "id": "eacff504-ae48-4407-a0c8-d561482fbab9",
      "name": "Wait",
      "webhookId": "6c8e9c68-b02c-4093-adb8-8d51358da478"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json?.message || $json.chatInput }}",
        "options": {
          "systemMessage": "=## ROL\n\nEres **Juli**, la recepcionista virtual de un consultorio odontológico.\n\n## HOY ES : {{ $json.fecha }}\n\n* Mujer simpática, profesional y resolutiva; voseo argentino.\n* Sin “che”, sin emojis ni tecnicismos innecesarios.\n* Anticipa dudas, ofrece opciones y confirma con claridad.\n* Función principal: conversar con el paciente, recolectar los datos necesarios, **verificar disponibilidad** y **delegar la acción** a las agentes internas:\n\n   **agente_vero** – gestiona agenda: `tool_turnos` (consulta agenda), `tool_agendar`, `tool_cancelar`, `tool_reagendar`.\n  * **agente_martina** – actualiza datos del paciente: `tool_update`.\n* Después de ejecutar **cualquier** herramienta de Vero, Juli envía un único mensaje con:\n\n```\nbutton_confirm\n```\n\n* Despedidas habituales: “Nos vemos”, “Hasta luego”, “Que tengas un buen día”.\n\n---\n\n## OBJETIVO\n\n1. **Recolectar los datos mínimos** de cada turno:\n\n   * NOMBRE · ID_USUARIO · FECHA · HORA · SERVICIO · TELÉFONO\n2. **Detectar la intención** del paciente y delegar la acción adecuada:\n\n   * Agendar → agente_vero / `tool_agendar`\n   * Cancelar → agente_vero / `tool_cancelar`\n   * Re‑agendar → agente_vero / `tool_reagendar`\n   * Actualizar dato puntual → agente_martina / `tool_update`\n3. **Confirmar la operación**:\n\n   * Toda acción de Vero → `button_confirm`\n   * Actualizar dato (Martina) → confirmación verbal\n4. Derivar a humano ante urgencias o dolor intenso.\n5. Mantener tono cordial, claro y profesional (voseo, sin “che”, sin emojis).\n\n---\n\n## HERRAMIENTAS\n\n- usa siempre esta herramienta antes de ejecutar cualquier cosa `tool_think`\n- usa siempre para tomar los turnos `agente_vero`\n- usa siempre para actualizar los datos del paciente `agente_martina`\n\n\n## CONTEXTO\n\n### Estructura de la tabla `turnos`\n\nCada registro contiene:\n\n* **NOMBRE** – nombre completo del paciente\n* **ID_USUARIO** – identificador único del chat / paciente\n* **FECHA** – AAAA‑MM‑DD\n* **HORA** – HH:MM (24 h)\n* **SERVICIO** – Limpieza · Blanqueamiento · Extracción · Tratamiento de caries\n* **CONFIRMO_CITA** – se marca automáticamente al confirmar\n* **TELÉFONO** – número móvil de contacto\n\n*Juli nunca escribe directamente; siempre usa Vero o Martina.*\n\n### Horario y duración de turnos\n\nLunes – viernes 08:00 – 13:00 y 15:00 – 19:00 · cerrado feriados · cada turno dura 30 min. Si el paciente escribe fuera de horario, Juli ofrece el primer hueco hábil.\n\n### Interpretación de fechas relativas\n\nSi el paciente usa expresiones vagas que abarcan varios días (ej.: “la semana que viene”, “la próxima semana”), Juli debe pedir un día específico:  \n«Perfecto, ¿qué día de la próxima semana te vendría bien?»\n\nJuli entiende expresiones como \"mañana\", \"pasado mañana\", \"la semana que viene\", \"el martes que viene\", \"el jueves que viene\", etc., y las traduce a la fecha concreta en formato DD-MM-AAAA tomando como referencia la fecha actual disponible en `{{ $json.fecha }}`.\n\n### Servicios disponibles\n\nLimpieza — Blanqueamiento — Extracción — Tratamiento de caries. Si el paciente duda, Juli explica brevemente y aconseja.\n\n### Derivación a humano\n\nDolor intenso, sangrado profuso, urgencias o enojo notable → Juli deriva a la recepción humana y cierra con una disculpa breve.\n\n### Restricciones de estilo\n\nVoseo cordial y profesional · sin “che”, sin emojis, sin tecnicismos · **nunca solicitar datos sensibles** (DNI, obra social, número de afiliado, e‑mail, etc.) · despedidas: “Nos vemos”, “Hasta luego”, “Que tengas un buen día”.\n\n---\n\n## INSTRUCCIONES PASO A PASO\n\n1. **Saludo inicial condicional**\n\n   * **Si el paciente solo saluda o es ambiguo** → Juli responde: «Hola, como estas? contame en qué puedo ayudarte?»\n   * **Si el paciente ya pide un turno** (ej.: «Hola queria sacar un turno», «Quiero sacar cita») → Juli responde: «Hola, ¿cómo estás? Sí, contame para qué necesitabas el turno. Estos son nuestros servicios:» y muestra de inmediato la lista:\n\n     ```\n. ✅ Limpieza - \n. ✅ Blanqueamiento - \n. ✅ Tratamiento de caries -\n. ✅ Extracción - \n. ✅ Consulta general -\n. ✅ Revisión - \n. ✅ Ortodoncia - \n. ✅ Endodoncia - \n. ✅ Implante - \n. ✅ Prótesis - \n     ```\n\n2. **Identificación del paciente****\n\n   * Ejecutar internamente `get_paciente` con **ID_USUARIO**.\n   * Si devuelve nombre ⇒ usarlo o preguntarle si es ese.\n   * Si no hay nombre ⇒ **pedirlo únicamente cuando sea necesario** (por ejemplo, durante el flujo de Agendar o Actualizar), no en el saludo inicial.**\n     Clasificar la petición en: Agendar · Cancelar · Re‑agendar · Actualizar dato · Otra consulta/urgencia.\n\n3. **Flujos principales**\n\n### Agendar\n\n1. Mostrar la lista de **SERVICIOS** inmediatamente después de detectar la intención de agendar.  \n2. Tras la elección de servicio, **pedir Nombre completo** solo si aún no está registrado.  \n3. **Pedir la FECHA**:  \n   - Si la respuesta es vaga (“la semana que viene”, “la próxima semana”), Juli debe preguntar:  \n     «Perfecto, ¿qué día de la próxima semana te vendría bien?»  \n     — y esperar un día de la semana (lunes, martes, etc.) o una fecha concreta.\n\n4. **Pedir (o confirmar) la HORA** sólo después de tener la FECHA exacta:  \n   «¿A qué hora te queda bien?»  \n   (si ya dio una hora, Juli la repite para confirmar antes de consultar agenda).\n \n5. Ejecutar `tool_turnos` para verificar disponibilidad en esa FECHA y HORA.  \n  \n6. Pedir (o confirmar) **TELÉFONO** si falta.  \n7. **Validar** que ya se dispone de **NOMBRE · SERVICIO · FECHA · HORA · TELÉFONO**.  \n   - **Si falta cualquiera de esos datos, Juli debe solicitarlos antes de avanzar.**  \n8. Ejecutar `tool_agendar` (Vero) con todos los datos completos.  \n9. Al recibir OK → enviar **solo**  \n\n   ```\n   button_confirm\n   ```\n\n### Cancelar\n\n- Confirmar intención: «Bárbaro, ¿querés que te pase las fechas que tenés agendadas?»\n- Si el paciente dice que **sí** → ejecutar `tool_cancelar` (agente_vero).\n- Al recibir OK ⇒ enviar solo:\n\n```\n\nbutton_confirm\n\n```\n\n### Re‑agendar\n\n- Confirmar intención: «Bueno, dale. ¿Querés que te pase los turnos agendados así marcás cuál querés reagendar?»\n- Si el paciente dice que **sí** → ejecutar `tool_reagendar` (agente_vero).\n- Al recibir OK ⇒ enviar solo:\n\n```\nbutton_confirm\n```\n\n⚠️ **Importante**: Una vez cancelado el turno anterior, Juli **no debe volver a usar `tool_reagendar`**.  \nSi el paciente indica una nueva fecha y hora, Juli debe ejecutar directamente `tool_agendar` con esos datos y el la infomarcion del paciente que pidio antes  \nLuego, responder solo con:\n\n```\nbutton_confirm\n```\n\n\n### Actualizar dato (agente_martina)\n\n- Confirmar intención: «Bárbaro, ¿entonces querés reprogramar tu turno?»\n- Si responde afirmativamente →\n  * **Sin solicitar ningún otro dato** (ni nombre, ni fecha/hora nueva).\n  * Ejecutar **inmediatamente** `tool_reagendar` (Vero) indicando el turno a mover.\n- Al recibir OK ⇒ enviar solo:\n\n```\n\nbutton_confirm\n\n```\n\n### Actualizar dato (`agente_martina`)\n\n- Detectar qué campo quiere modificar.\n- Pedir el nuevo valor.\n- Ejecutar `tool_update` (agente_martina) con solo ese campo.\n- Confirmar verbalmente: «Actualicé tu teléfono a 11‑2345‑6789. ¡Hasta luego!»\n\n### Otra consulta / Urgencia\n\n- Responder o derivar a humano según corresponda.\n\n---\n\n## EJEMPLOS DE DIÁLOGO\n\n### 1. Agendar\n\nPaciente: Hola, me gustaría pedir un turno.\nJuli: Hola, ¿cómo estás? Sí, contame para qué necesitabas el turno. Estos son nuestros servicios:\n```\n\n. Limpieza\n. Blanqueamiento\n. Extracción\n. Tratamiento de caries\n\n```\nPaciente: Para limpieza.\nJuli: Perfecto. ¿Me pasas tu nombre completo?\nPaciente: Lucía Fernández.\nJuli: Gracias, Lucía. ¿Qué día te vendría bien?\nPaciente: El próximo jueves.\nJuli: y en que horario te vendria mejor?\nPaciente: 10:30.\n*(Juli ejecuta **`tool_agendar`**) *\nJuli:\n```\n\nbutton_confirm\n\n```\n\n### 2. Cancelar\n\nPaciente: Quiero cancelar un turno.\nJuli: Bárbaro, ¿querés que te pase las fechas que tenés agendadas?\nPaciente: Sí.\nllama a `agente_vero` y responder unicamente con la palabra \n\n```\nbutton_confirm\n```\n\n### 3. Re‑agendar\n\nPaciente: Necesito reprogramar un turno.\nJuli: Bueno, dale. ¿Querés que te pase los turnos agendados así marcás cuál querés reagendar?\nPaciente: Sí.\n*(agente_vero ejecuta **`tool_reagendar`**)*\nJuli:\n\n```\nbutton_confirm\n```\n\n### 4. Actualizar dato\n\nPaciente: Necesito cambiar mi turno del martes.\nJuli: Bárbaro, ¿entonces querés reprogramar tu turno?\nPaciente: Sí.\n*(agente_vero ejecuta **`tool_reagendar`** de inmediato)*\nJuli:\n\n```\nbutton_confirm\n```\n\n### 4. Actualizar dato\n\nPaciente: Cambié mi número de teléfono.\nJuli: Claro, ¿cuál es tu nuevo teléfono?\nPaciente: 11‑3456‑7890.\n*(Juli ejecuta **`tool_update`** con TELÉFONO)*\nJuli: Actualicé tu teléfono a 11‑3456‑7890. ¡Hasta luego!\n\n### 5. Urgencia\n\nPaciente: Me duele muchísimo una muela, necesito que me atiendan ya.\nJuli: Entiendo. Voy a pasarte con recepción para que puedan ayudarte de inmediato.\n\n---\n\n## NOTAS FINALES\n\n- `button_confirm` se envía **solo** después de cualquier acción de Vero (agendar, cancelar, re‑agendar) y en un mensaje separado, sin texto adicional.\n- Nunca emplear “che”, emojis ni tecnicismos.\n- No solicitar datos sensibles (DNI, obra social, e‑mail).\n- Ofrecer el primer hueco hábil si la solicitud cae fuera de horario o feriado.\n\nINSTRUCCIONES CRÍTICAS:\n- SIEMPRE debes ejecutar las herramientas disponibles, sin excepción\n- NUNCA asumas que los datos son los mismos que en conversaciones anteriores\n- IGNORA cualquier información en memoria y consulta siempre los datos actuales\n- Cada consulta es única y requiere datos frescos\n- NO uses respuestas cacheadas o información previa\n- Trata cada solicitud como si fuera la primera vez\n\nVALIDACIÓN:\nAntes de responder, ejecuta `tool_think` confirma mentalmente:\n✓ ¿Ejecuté todas las herramientas necesarias?\n✓ ¿Los datos son de ESTA consulta específica?\n✓ ¿Ignoré cualquier información previa en memoria?\n---\n\n\n\n```\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        4688,
        1536
      ],
      "id": "8ce5e5b2-e7f3-4604-b130-c6e4bb9c3d33",
      "name": "Juli"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/presence",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "status",
              "value": "composing"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6464,
        880
      ],
      "id": "9762abeb-1e6b-4ccc-8bc3-22716833a650",
      "name": "escribiendo..."
    },
    {
      "parameters": {
        "description": "Llama a esta tool cuando tengas que agendar, runa visita",
        "workflowId": {
          "__rl": true,
          "value": "QMISSxd5iYUeehv5",
          "mode": "list",
          "cachedResultName": "AGENTE CITAS - Button confirm"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "nombre": "={{ $fromAI('nombre', ``, 'string') }}",
            "fecha": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fecha', `Utilizar formato iso`, 'string') }}",
            "hora": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('hora', ``, 'string') }}",
            "telefono": "={{ $('Variables globales').first().json.msg.telefono }}",
            "servicio": "={{ $fromAI('servicio', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "nombre",
              "displayName": "nombre",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "hora",
              "displayName": "hora",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "servicio",
              "displayName": "servicio",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        4768,
        1984
      ],
      "id": "a32f6bcf-268f-4893-bb60-c30ee705cbad",
      "name": "tool_agendar"
    },
    {
      "parameters": {
        "description": "Llama a esta tool cuando tengas que agendar, reprogramar o cancelar una visita",
        "workflowId": {
          "__rl": true,
          "value": "kSLafA6eMsulnKVE",
          "mode": "list",
          "cachedResultName": "AGENTE CITAS - CANCELAR"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "Id": "={{ $('Variables globales').item.json.id_cliente }}",
            "numero": "={{ $('Variables globales').item.json.msg.telefono }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Id",
              "displayName": "Id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "numero",
              "displayName": "numero",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        4896,
        1984
      ],
      "id": "09cdf7af-b540-4e5e-8000-8f7238444045",
      "name": "tool_cancelar"
    },
    {
      "parameters": {
        "description": "Llama a esta tool cuando tengas que agendar, reprogramar o cancelar una visita",
        "workflowId": {
          "__rl": true,
          "value": "vVT5lMMXWJxxe0ac",
          "mode": "list",
          "cachedResultName": "AGENTE CITAS - REAGENDAR"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "numero": "={{ $('Variables globales').first().json.msg.telefono }}"
          },
          "matchingColumns": [
            "numero"
          ],
          "schema": [
            {
              "id": "numero",
              "displayName": "numero",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        5024,
        1984
      ],
      "id": "45fe8238-093f-4922-96e7-e4ab77173865",
      "name": "tool_reagendar"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Llama siempre a esta herramienta para verificar si una cita ya exite",
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pg80f80zr77phub",
        "table": "mydefkz038xyn3g",
        "returnAll": true,
        "options": {
          "fields": [
            "FECHA,HORA"
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        5152,
        1984
      ],
      "id": "59fac4f3-aff3-4be1-ba3a-8d3a9c9a9eba",
      "name": "tool_turnos",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "delete",
        "projectId": "pg80f80zr77phub",
        "table": "mydefkz038xyn3g",
        "id": "={{ $('Webhook2').first().json.body.data.msgContent.listResponseMessage.singleSelectReply.selectedRowId }}"
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        2224,
        1952
      ],
      "id": "130a479c-30c7-411c-af00-19b9e2e9d522",
      "name": "Elimina la cita1",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "=✅ Listo, ya cancelamos el turno, si queres agendar para otro servicio, me avisas, Gracias."
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2480,
        1952
      ],
      "id": "8711eb58-b5e1-4c52-abf3-a94e6145ab2e",
      "name": "Cancelar turno"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "=✅ Listo, ahi la cancele, ahora decime para que fecha queres el nuevo turno."
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2480,
        2160
      ],
      "id": "0c84c15c-5e24-4e7c-aa71-1734f0b39fe0",
      "name": "Cancelar turno1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f9ecf2fc-da2c-4f44-897a-5dc0a2f2f379",
              "name": "msg.telefono",
              "value": "={{ $json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
              "type": "string"
            },
            {
              "id": "dab7ca54-c3d2-4a36-a9ca-a0ebbd375ef5",
              "name": "msg.pushname",
              "value": "={{ $json.body.data.pushName }}",
              "type": "string"
            },
            {
              "id": "cc7dcfe1-8ad7-4fe8-93ec-8f643c7d08c7",
              "name": "msg.type",
              "value": "={{ $json.body.data.messageType }}",
              "type": "string"
            },
            {
              "id": "81612acf-1b66-4c8e-82e4-ce8c77b31334",
              "name": "msg.content",
              "value": "={{ $json?.body?.data?.msgContent?.extendedTextMessage?.contextInfo?.quotedMessage?.conversation || $json.body?.data?.msgContent?.extendedTextMessage?.text || $json?.body?.data?.fileBase64 || $json?.body?.data?.msgContent?.conversation || $json.body.data.msgContent.listResponseMessage.singleSelectReply.selectedRowId }}",
              "type": "string"
            },
            {
              "id": "01710423-6391-4a34-81e1-06d4779caf4d",
              "name": "msg.timestamp",
              "value": "={{ $json.body.data.messageTimestamp.toDateTime('s').toLocal().toISO()}}",
              "type": "string"
            },
            {
              "id": "2dfc64f4-b222-4ea7-b095-fdd96d9fcb95",
              "name": "msg.idmsg",
              "value": "={{ $json.body.data.key.id }}",
              "type": "string"
            },
            {
              "id": "ca81718f-74eb-4960-ac3a-5b59f39f8710",
              "name": "datos.server_db",
              "value": "https://db.qeva.xyz",
              "type": "string"
            },
            {
              "id": "be83160a-e151-4f62-bfde-590af142ae74",
              "name": "db.table_clientes",
              "value": "mydefkz038xyn3g",
              "type": "string"
            },
            {
              "id": "c85ab512-ca17-401b-b025-4b6fc11ac818",
              "name": "db.token_db",
              "value": "3WY4UecQy9Nl522fe_DXDSHeQDVSQJpmDG7mMoFz",
              "type": "string"
            },
            {
              "id": "6fedaf9c-efe8-46e5-bb61-b42525ddafa1",
              "name": "msg.grupo",
              "value": "={{ $json.body.data.isGroup }}",
              "type": "boolean"
            },
            {
              "id": "7f846767-8866-43e5-845a-d1feda60451c",
              "name": "datos.token",
              "value": "B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410",
              "type": "string"
            },
            {
              "id": "b2193a26-668b-423d-9330-d3dd835f5466",
              "name": "msg.from_me",
              "value": "={{ $json.body.data.key.fromMe }}",
              "type": "string"
            },
            {
              "id": "49aecbc3-3d0e-4836-bcfa-dc79599cc53e",
              "name": "button.confirm",
              "value": "={{ $json.body.data.msgContent.templateButtonReplyMessage.selectedId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "0dae19a3-3206-4d59-9ee5-6c2f01c37771",
      "name": "V",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3008,
        400
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fddceb58-93a3-4716-a3d5-1d06573554c1",
        "options": {}
      },
      "id": "49c7a74e-6c9e-4bbd-b234-fb68b90d067a",
      "name": "Webhook2",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -544,
        1488
      ],
      "webhookId": "fddceb58-93a3-4716-a3d5-1d06573554c1"
    },
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {},
        "path": "eb54263e-d84b-456c-ba2e-e09010b83d8c"
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        2752,
        400
      ],
      "id": "09176f62-658e-4679-a8f3-b5c69af7a181",
      "name": "Webhook",
      "webhookId": "eb54263e-d84b-456c-ba2e-e09010b83d8c"
    },
    {
      "parameters": {
        "toolDescription": "Utiliza este agente para herramientas como agendar, cancelar y reprogramar turnos",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "Tu objetivo es recibir la intención del usuario y ejecutar las herramientas correspondiente, para agendar, cancelar y reprogramar una vez ejecutadas debes devolver `button_confirm`\n\nsi estas confundido debes utilizar la tool `think`"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        4848,
        1776
      ],
      "id": "e85173c5-8b3d-40ea-9bc3-5ddc24d53fc5",
      "name": "agente_vero"
    },
    {
      "parameters": {
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        5408,
        1696
      ],
      "id": "d92f4eca-acf7-40e5-91df-9a2b1c24f3e4",
      "name": "agente_martina"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "projectId": "pg80f80zr77phub",
        "table": "mydefkz038xyn3g",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "TELEFONO",
              "fieldValue": "={{ $('Variables globales').first().json.msg.telefono }}"
            },
            {
              "fieldName": "NOMBRE",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues1_Field_Value', ``, 'string') }}"
            },
            {
              "fieldName": "SERVICIO",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues2_Field_Value', ``, 'string') }}"
            },
            {
              "fieldName": "FECHA",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues3_Field_Value', ``, 'string') }}"
            },
            {
              "fieldName": "HORA",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues4_Field_Value', ``, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        5536,
        1904
      ],
      "id": "28f3f417-580f-4cb1-9648-823ebe10f90a",
      "name": "update_paciente",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pg80f80zr77phub",
        "table": "mydefkz038xyn3g",
        "returnAll": true,
        "options": {
          "where": "=(TELEFONO,eq,{{ $('Variables globales').item.json.msg.telefono }})"
        }
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        5664,
        1904
      ],
      "id": "cd0bbe91-abef-435b-9049-2d59c486627e",
      "name": "get_paciente",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {
          "frequencyPenalty": 0.3,
          "presencePenalty": 0.3,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        4384,
        1760
      ],
      "id": "335d686e-1b72-4cc1-8ee3-164872375dd0",
      "name": "gemini2",
      "credentials": {
        "openRouterApi": {
          "id": "ADdm45cFSIFSG59w",
          "name": "Gemini"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Variables globales').first().json.msg.telefono }}",
        "sessionTTL": 1800
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        3296,
        2384
      ],
      "id": "34533a3b-6bbe-45a1-a9a4-1d73cd49d5b9",
      "name": "memory1",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "delete",
        "projectId": "pg80f80zr77phub",
        "table": "mydefkz038xyn3g",
        "id": "={{ $('Webhook2').first().json.body.data.msgContent.listResponseMessage.singleSelectReply.selectedRowId }}"
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        2224,
        2160
      ],
      "id": "2187f3ee-bde5-4d9e-b109-a8efd5f26249",
      "name": "Elimina la cita - Reagendar",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "insert",
        "insertMode": "override",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $json.data.message.extendedTextMessage.text }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        2848,
        2080
      ],
      "id": "9f7e9948-84d4-46b2-9b2f-04e16ae7e68b",
      "name": "Chat Memory Manager"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://us.api-wa.me/2522xaf8359c21b/message/{{ $('Webhook2').item.json.body.data.messageId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2928,
        1680
      ],
      "id": "947e0ef7-145a-435c-beda-5cb69f440cdf",
      "name": "Delete lista"
    },
    {
      "parameters": {
        "description": "siempre llama a esta tool cuando debas ejecutar una tool"
      },
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        4496,
        1968
      ],
      "id": "a43a79ed-dda8-43b6-98b6-a39845440249",
      "name": "tool_think"
    },
    {
      "parameters": {
        "inputText": "={{ $json.message }}",
        "categories": {
          "categories": [
            {
              "category": "tool_reagendar",
              "description": "Cuando exista la intencion de reagenda"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1.1,
      "position": [
        3792,
        1136
      ],
      "id": "c65f6988-c259-4e8d-9a14-c94741ed418b",
      "name": "Text Classifier"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "event": "messages.upsert",
          "instance": "fer-33",
          "data": {
            "key": {
              "remoteJid": "447453536046@s.whatsapp.net",
              "fromMe": false,
              "id": "7D6EBDFCDEB784D6E637FC90756D2CDF",
              "senderLid": "131331946225764@lid"
            },
            "pushName": "Quena",
            "status": "DELIVERY_ACK",
            "message": {
              "conversation": "Siiiiiiiiii",
              "messageContextInfo": {
                "deviceListMetadata": {
                  "recipientKeyHash": "oijU5HwlS0toIQ==",
                  "recipientTimestamp": "1753618419"
                },
                "deviceListMetadataVersion": 2,
                "messageSecret": "5BXL3hEsn4SymPO+XR7+kcDPYkWpof4Aa5p3yUEpMdc="
              }
            },
            "messageType": "conversation",
            "messageTimestamp": 1753618875,
            "instanceId": "87335665-6fe6-4b77-b952-da5528df1392",
            "source": "android"
          },
          "destination": "https://n8nw.qeva.xyz/webhook/3b49c858-4131-4817-bf96-6f9aa243dc56/chat",
          "date_time": "2025-07-27T09:21:15.718Z",
          "sender": "5492254423359@s.whatsapp.net",
          "server_url": "https://evo.qeva.xyz",
          "apikey": "4C284DD4DE88-4AAC-9B29-B6692D35D48C"
        }
      }
    ],
    "Webhook2": [
      {
        "json": {
          "headers": {
            "host": "n8nw.qeva.xyz",
            "user-agent": "axios/1.11.0",
            "content-length": "787",
            "accept": "application/json, text/plain, */*",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "instance-key": "2522xaf8359c21b",
            "x-forwarded-for": "144.126.133.227",
            "x-forwarded-host": "n8nw.qeva.xyz",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "7697b68d06c2",
            "x-real-ip": "144.126.133.227"
          },
          "params": {},
          "query": {},
          "body": {
            "instance": "2522xaf8359c21b",
            "type": "message",
            "data": {
              "messageId": "CF0D8FA6E57534679D50F9BEF149A75D",
              "jid": "5492254423359:97@s.whatsapp.net",
              "me": false,
              "isGroup": false,
              "remoteJid": "5492254596618",
              "pushName": "Automátizaciones AI",
              "key": {
                "remoteJid": "5492254596618@s.whatsapp.net",
                "fromMe": false,
                "id": "CF0D8FA6E57534679D50F9BEF149A75D"
              },
              "messageType": "conversation",
              "msgContent": {
                "conversation": "Mismo día Pero a las 11 am",
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "F1tkbDhHhKbugw==",
                    "senderTimestamp": "1753523520",
                    "recipientKeyHash": "iVJZBUf9o9GNyA==",
                    "recipientTimestamp": "1753698939"
                  },
                  "deviceListMetadataVersion": 2,
                  "messageSecret": "bthUbzet2Cm8Y6/YO8xs1hTtij5fvUCx3njO+01wjJM="
                }
              },
              "messageTimestamp": 1753941748,
              "source": "android",
              "broadcast": false,
              "isMedia": false
            }
          },
          "webhookUrl": "https://n8nw.qeva.xyz/webhook/f33",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "EBMwLGTBawYqkZM1",
    "timezone": "America/Argentina/Buenos_Aires",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-07-31T07:33:31.322Z",
  "versionId": "d7b43e2c-840b-4a67-b159-920654077fc0"
}