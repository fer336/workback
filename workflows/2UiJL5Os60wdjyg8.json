{
  "active": false,
  "connections": {
    "Switch1": {
      "main": [
        [
          {
            "node": "contador1",
            "type": "main",
            "index": 0
          }
        ],
        [],
        []
      ]
    },
    "vars": {
      "main": [
        [
          {
            "node": "If11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return Redis": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSG": {
      "main": [
        [
          {
            "node": "Return Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "contador": {
      "main": [
        [
          {
            "node": "MSG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis4": {
      "main": [
        [
          {
            "node": "Escribiendo...4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Transcribir",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Obtiene el estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [],
        [
          {
            "node": "NocoDB1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "contador2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "obtener cliente",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "FERNANDO",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "FERNANDO1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Calendar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Obtiene consulta de bot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribir": {
      "main": [
        [
          {
            "node": "MESSAGE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "MESSAGE2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escribiendo...4": {
      "main": [
        [
          {
            "node": "FERNANDO3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FERNANDO3": {
      "main": [
        [
          {
            "node": "MESSAGE3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escribiendo...5": {
      "main": [
        [
          {
            "node": "Agendamos?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lista1": {
      "main": [
        [
          {
            "node": "Agendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agendar": {
      "main": [
        [
          {
            "node": "Redis6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MESSAGE3": {
      "main": [
        [
          {
            "node": "MESSAGE4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agendamos?": {
      "main": [
        []
      ]
    },
    "MESSAGE4": {
      "main": [
        [
          {
            "node": "Lista1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "contador1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "MESSAGE1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        []
      ]
    },
    "getForCode1": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "getForCode1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Success2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Lista2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lista2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener cliente": {
      "main": [
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "If9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB": {
      "main": [
        [
          {
            "node": "FERNANDO5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis5": {
      "main": [
        [
          {
            "node": "Redis8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis8": {
      "main": [
        [
          {
            "node": "Redis9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Redis5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "NocoDB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MESSAGE1": {
      "main": [
        [
          {
            "node": "Redis3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escribiendo...6": {
      "main": [
        [
          {
            "node": "Redis10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compara Get Memory1": {
      "main": [
        [
          {
            "node": "Compara igualdad de memorias",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compara igualdad de memorias": {
      "main": [
        [
          {
            "node": "Escribiendo...6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "redis1": {
      "main": [
        [
          {
            "node": "Compara Get Memory1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis10": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get redis": {
      "main": [
        [
          {
            "node": "redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "contador2": {
      "main": [
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "MESSAGE5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MESSAGE5": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FERNANDO5": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MESSAGE": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB1": {
      "main": [
        [
          {
            "node": "contador",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crypto": {
      "main": [
        [
          {
            "node": "InsertarCliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InsertarCliente": {
      "main": [
        [
          {
            "node": "vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getClientes": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "vars",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Crypto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB2": {
      "main": [
        [
          {
            "node": "MESSAGE7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MESSAGE7": {
      "main": [
        [
          {
            "node": "Redis2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis3": {
      "main": [
        [
          {
            "node": "NocoDB3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtiene el estado": {
      "main": [
        [
          {
            "node": "Redis13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "msg": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [],
        []
      ]
    },
    "If8": {
      "main": [
        [],
        [
          {
            "node": "getClientes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis9": {
      "main": [
        [
          {
            "node": "Redis7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [],
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convertir la fecha": {
      "main": [
        [
          {
            "node": "NocoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If9": {
      "main": [
        [
          {
            "node": "Convertir la fecha",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis11": {
      "main": [
        [
          {
            "node": "FERNANDO2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ya solicito?": {
      "main": [
        [],
        [
          {
            "node": "Redis11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtiene consulta de bot": {
      "main": [
        [
          {
            "node": "Ya solicito?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis7": {
      "main": [
        [
          {
            "node": "Redis12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis13": {
      "main": [
        [
          {
            "node": "If10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If10": {
      "main": [
        [
          {
            "node": "Agentes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agentes": {
      "main": [
        []
      ]
    },
    "If11": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-12-24T17:03:06.444Z",
  "id": "2UiJL5Os60wdjyg8",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "AGENTE QEVA",
  "nodes": [
    {
      "parameters": {
        "content": "## Convierte el mensaje de voz a texto",
        "height": 340.7809833809103,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1860,
        380
      ],
      "typeVersion": 1,
      "id": "c665ff2c-ee6e-4758-a539-00c04322d481",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0cb14635-2673-408e-86db-ce9e0373674b",
                    "leftValue": "={{ $('Webhook').first().json.body.data.messageType }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "60065893-74f7-4b64-bc1a-d891202efa78",
                    "leftValue": "={{ $('Webhook').first().json.body.data.messageType }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Imagem"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').first().json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "5037a8d1-9744-4ec5-8065-ee85bf6aa0b0"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Áudio"
            }
          ]
        },
        "options": {}
      },
      "id": "0079489a-0d75-424e-866c-d3389dbec400",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1820,
        2785
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9d2e510b-11ce-4c6b-ab0b-8ad4d2baa523",
              "name": "server_url",
              "value": "={{ $('Webhook').item.json.body.server_url }}",
              "type": "string"
            },
            {
              "id": "04b113c5-f9c4-41d6-aceb-e982fb8183c5",
              "name": "apikey",
              "value": "={{ $('Webhook').item.json.body.apikey }}",
              "type": "string"
            },
            {
              "id": "c0bb2f4b-8c12-46fd-a27c-edd73f79bf96",
              "name": "instance",
              "value": "={{ $('Webhook').item.json.body.instance }}",
              "type": "string"
            },
            {
              "id": "06b8f4ae-6dbe-42ac-a8dc-30bdb385f680",
              "name": "remoteJid",
              "value": "={{ $('getClientes').item.json.Telefono }}",
              "type": "string"
            },
            {
              "id": "09e165cd-9899-42a4-869c-d075090c31eb",
              "name": "msg",
              "value": "={{ $('Webhook').first()?.json?.body?.data?.message?.conversation || $('Webhook').item.json.body.data.message.listResponseMessage.title }}",
              "type": "string"
            },
            {
              "id": "eeabeb89-2983-405e-accd-48153b99d5c5",
              "name": "idmsg",
              "value": "={{ $('Webhook').first().json.body.data.key.id }}",
              "type": "string"
            },
            {
              "id": "16327967-c890-40a3-8adb-cf2ad08d49f3",
              "name": "Id",
              "value": "={{ $('getClientes').first().json.Id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1480,
        3310
      ],
      "id": "e2cac8b4-6329-4c91-b59d-2740a6749371",
      "name": "vars"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        60,
        2885
      ],
      "id": "cb1bb325-4e20-42ab-b4d3-d50be58b7e9f",
      "name": "Wait",
      "webhookId": "3014d4e8-c867-4029-ac75-1c2a42043a3b"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "obtieneMSG",
        "key": "=usuario:{{ $('vars').first().json.remoteJid.replace(/\\D/g, '') }}",
        "options": {}
      },
      "id": "1454dc09-c118-4ece-be6c-8900b8ab6433",
      "name": "Return Redis",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -160,
        2885
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=usuario:5492254423359"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3020,
        4670
      ],
      "id": "991a03f9-eae2-46e9-b57c-8e03951c0f44",
      "name": "Redis7",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "=usuario:{{ $('vars').first().json.remoteJid.replace(/\\D/g, '') }}",
        "messageData": "={{ $('vars').first().json.msg || \"\" }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -380,
        2885
      ],
      "id": "ecdc7908-83ba-4858-9a6e-b90ae500f68f",
      "name": "MSG",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "=contador:{{ $('vars').item.json.remoteJid }}",
        "expire": true,
        "ttl": 3600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -600,
        2885
      ],
      "id": "3f7d7ea2-696c-4be7-ba89-cb76ebe1d8ec",
      "name": "contador",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=usuario1:{{ $('vars').first().json.remoteJid.replace(/\\D/g, '') }}",
        "value": "={{ $('Return Redis').item.json.obtieneMSG[0] }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1820,
        2985
      ],
      "id": "7ce7a7ed-624f-40a7-9e77-65fd7f6d9a00",
      "name": "Redis4",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b7d210f0-6a18-456d-9e89-aa28f548b2a0",
              "name": "body.data.message.base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "53113a19-ba3f-4375-a874-df3532afde2b",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1040,
        2685
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "body.data.message.base64",
        "options": {
          "mimeType": "audio/mp3"
        }
      },
      "id": "809bb6f2-6d09-4bc0-8aed-9281cfe3550b",
      "name": "Convert to File1",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -820,
        2685
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "qeva",
        "options": {}
      },
      "id": "1b983077-f5df-44d4-988c-09e6b085219e",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3900,
        3210
      ],
      "webhookId": "3cdd40ed-a48c-411c-96d6-3679c5894079"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "60065893-74f7-4b64-bc1a-d891202efa78",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Imagem"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0cb14635-2673-408e-86db-ce9e0373674b",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "330b2797-cf11-4463-b0bf-cec1fbd6e59b",
                    "leftValue": "={{ $('Webhook').item.json.body.data.message.listResponseMessage.singleSelectReply.selectedRowId }}",
                    "rightValue": "agendar-no",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Agendar no"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a0393799-5a16-47e6-9de6-b3289bf71d1f",
                    "leftValue": "={{ /^🕒 \\d{1,2} de (?:Enero|Febrero|Marzo|Abril|Mayo|Junio|Julio|Agosto|Septiembre|Octubre|Noviembre|Diciembre) : \\d{2}:\\d{2} a \\d{2}:\\d{2}$/.test($('Webhook').item.json.body.data.message.listResponseMessage.title) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Fecha agendar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "df273024-2b91-4683-b414-e4b620a0ca4a",
                    "leftValue": "={{ $json.msg }}",
                    "rightValue": "⚠️ Problemas técnicos",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "⚠️ Problemas técnicos"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bab325e2-5425-4a2a-a8af-f7459ccd7656",
                    "leftValue": "={{ $json.msg }}",
                    "rightValue": "💵 Informar pagos",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "💵 Informar pagos"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3ccd26c0-7589-4df8-a1f0-40eaadf5faed",
                    "leftValue": "={{ $('Webhook').item.json.body.data.message.listResponseMessage.singleSelectReply.selectedRowId }}",
                    "rightValue": "cita-solicitar",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "🗓️ Solicitar una reunión"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "22c71e9f-178b-4c8c-8439-b87baf4ae4a5",
                    "leftValue": "={{ $('Webhook').item.json.body.data.message.listResponseMessage.singleSelectReply.selectedRowId }}",
                    "rightValue": "bot_inmobiliario",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "🏡 Bot Inmobiliario"
            }
          ]
        },
        "options": {}
      },
      "id": "46d900f8-f1b1-4e7c-8460-daf5a46749ea",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1040,
        3705
      ]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -600,
        2685
      ],
      "id": "e1d8a406-81ce-48b8-96c1-f5d8677376a0",
      "name": "Transcribir",
      "credentials": {
        "openAiApi": {
          "id": "UfA35dBDzEebw8zR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/message/sendReaction/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={   \n    \"key\": {\n        \"remoteJid\": \"{{ $json.key.remoteJid }}\",\n        \"fromMe\":{{ $json.key.fromMe }} ,\n        \"id\": \"{{ $json.key.id }}\"\n    },\n    \"reaction\": \"🔥\"\n} ",
        "options": {}
      },
      "id": "215f2bc2-82eb-4f9c-925b-00a5f37bedf5",
      "name": "MESSAGE2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        60,
        2685
      ]
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -160,
        2685
      ],
      "id": "a8389e9e-7913-4082-8b59-13c2c235921a",
      "name": "Wait2",
      "webhookId": "4912af54-17ab-4b5f-b27c-70fcbca49f65"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/chat/sendPresence/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"number\": \"{{ $node['Webhook'].json.body.data.key.remoteJid }}\",\n    \"delay\": 3000,\n    \"presence\": \"composing\"\n}",
        "options": {}
      },
      "id": "d5a56987-f5a2-4624-aaf2-ef632ac03b13",
      "name": "Escribiendo...4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2040,
        2985
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('vars').item.json.server_url }}/message/sendText/{{ $('vars').item.json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $('vars').item.json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('vars').item.json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "=👋 Bienvenido a *Qeva Solutions*\n\nEspecialistas en:\n• 💬 Atención al cliente en WhatsApp\n• 🛍️ Agentes de ventas inteligentes\n• 📊 Monitoreo con dashboard propio\n• 🔧 Soluciones de automatización a medida\n\nEstamos para ayudarte. 🚀\n"
            }
          ]
        },
        "options": {}
      },
      "name": "FERNANDO3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2260,
        2985
      ],
      "id": "70b6784f-4517-4e72-ad6a-72293ad9eb28",
      "credentials": {
        "httpBasicAuth": {
          "id": "OpgdvMlLy6Zxc6ii",
          "name": "NOCODB"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/chat/sendPresence/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"number\": \"{{ $node['Webhook'].json.body.data.key.remoteJid }}\",\n    \"delay\": 3000,\n    \"presence\": \"composing\"\n}",
        "options": {}
      },
      "id": "dc32ad5a-5e81-437c-b20f-80acb6295a0e",
      "name": "Escribiendo...5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3900,
        2165
      ]
    },
    {
      "parameters": {
        "jsCode": "function generarListaAgentes(remoteJid) {\n  const sections = [\n    {\n      title: \"🚨 Urgencias\",\n      rows: [\n        {\n          title: \"⚠️ Problemas técnicos\",\n          description: \"Comunícate con un agente técnico por problemas con tu software\",\n          rowId: \"urgencia-tecnica\"\n        },\n        {\n          title: \"💵 Informar pagos\",\n          description: \"Notificar pagos realizados o consultas urgentes de facturación\",\n          rowId: \"urgencia-pagos\"\n        }\n      ]\n    },    \n    {\n      title: \"👩‍💻 Soporte Técnico\",\n      rows: [\n         {\n          title: \"🔌 Integraciones\",\n          description: \"Ayuda con reconexion de Whatsapp \",\n          rowId: \"agente-integraciones\"\n        }\n      ]\n    },\n{\n  \"title\": \"📅 Agendar una cita\",\n  \"rows\": [\n    {\n      \"title\": \"🗓️ Solicitar una reunión\",\n      \"description\": \"Coordiná una cita con nuestro equipo\",\n      \"rowId\": \"cita-solicitar\"\n    },\n    \n  ]\n},\n    {\n      title: \"Nuestros agentes, ¡solicitá tu demo! 🚀\",\n      rows: [\n        {\n          title: \"🏡 Bot Inmobiliario\",\n          description: \"Gestioná alquileres, ventas y consultas\",\n          rowId: \"bot_inmobiliario\"\n        },\n        {\n          title: \"🛒 Bot para Despensas\",\n          description: \"Automatizá pedidos y atención de tu tienda\",\n          rowId: \"bot_despensa\"\n        },\n        {\n          title: \"🛵 Bot de Delivery\",\n          description: \"Tomá pedidos y gestioná envíos en WhatsApp\",\n          rowId: \"bot_delivery\"\n        },\n        {\n          title: \"📅 Agendador de Citas\",\n          description: \"Organizá turnos con recordatorios automáticos\",\n          rowId: \"bot_agendador\"\n        }\n      ]\n    }\n  ];\n\n  const requestBody = {\n    number: remoteJid,\n    title: \"🔹 AUTOMATIZACIONES 🔹\",\n    description: \"Seleccione un área para atención inmediata:\",\n    buttonText: \"Ver áreas 📋\",\n    footerText: \"💼 Expertos en automatización WhatsApp\",\n    sections\n  };\n\n  return [{ \n    json: requestBody \n  }];\n}\n\n// Código principal\nconst remoteJid = $input.first().json.remoteJid;\n// Generar lista de agentes\nconst menuResponse = generarListaAgentes(remoteJid);\n// Devolver el resultado como un array\nreturn menuResponse;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2920,
        2985
      ],
      "id": "ca3643a7-5e95-47e4-aad2-6cd8336a0e41",
      "name": "Lista1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('vars').item.json.server_url }}/message/sendList/{{ $('vars').item.json.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Webhook').item.json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('vars').item.json.remoteJid }}"
            },
            {
              "name": "title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "description",
              "value": "={{ $json.description }}"
            },
            {
              "name": "buttonText",
              "value": "={{ $json.buttonText }}"
            },
            {
              "name": "footerText",
              "value": "={{ $json.footerText }}"
            },
            {
              "name": "sections",
              "value": "={{ $json.sections }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3140,
        2985
      ],
      "id": "b00319f7-ba41-4efe-b2e9-c923ca80202b",
      "name": "Agendar",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/message/sendReaction/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={   \n    \"key\": {\n        \"remoteJid\": \"{{ $json.key.remoteJid }}\",\n        \"fromMe\":{{ $json.key.fromMe }} ,\n        \"composing\":3000,\n        \"id\": \"{{ $json.key.id }}\"\n    },\n    \"reaction\": \"🔥\"\n} ",
        "options": {}
      },
      "id": "4137fe8d-ba1c-42db-83e2-3a8baeb1dd0a",
      "name": "MESSAGE3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2480,
        2985
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('vars').item.json.server_url }}/message/sendText/{{ $('vars').item.json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $('vars').item.json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('vars').first().json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "=📅 ```Agendamos una reunión?```\n\n_Te ayudamos con una asesoría personalizada para tu comercio._\n"
            },
            {
              "name": "delay",
              "value": "={{1200}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Agendamos?",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -3680,
        2165
      ],
      "id": "3ab05b7f-1602-4ca0-a1d0-471609497030",
      "credentials": {
        "httpBasicAuth": {
          "id": "OpgdvMlLy6Zxc6ii",
          "name": "NOCODB"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/message/sendReaction/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={   \n    \"key\": {\n        \"remoteJid\": \"{{ $json.key.remoteJid }}\",\n        \"fromMe\":{{ $json.key.fromMe }} ,\n        \"id\": \"{{ $json.key.id }}\"\n    },\n    \"reaction\": \"🚀\"\n} ",
        "options": {}
      },
      "id": "dadf728b-4be8-4760-b57c-c435531c01e2",
      "name": "MESSAGE4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2700,
        2985
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=usuario:5492267416252"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3680,
        4670
      ],
      "id": "12e01d4f-33c4-4933-acce-eef5a7730884",
      "name": "Redis5",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "af7b33c3-4bf4-4b03-84cf-c910b0fc6c4b",
              "leftValue": "={{ $('contador').first().json['contador:' + $('vars').first().json.remoteJid] > 1 }}",
              "rightValue": 1,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1600,
        2885
      ],
      "id": "1b3415b7-b71b-41a4-8e7d-b6572aebf0bd",
      "name": "If"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/message/sendText/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"delay\": 1600,\n  \"number\": \"{{ $('vars').first().json.remoteJid }}\",\n  \"text\": \"*En breve lo atendera un agente Humano* 👨🏼‍💼\",\n  \"quoted\": {\n    \"key\": {\n      \"id\": \"{{ $('vars').first().json.apikey }}\",\n      \"remoteJid\": \"{{ $('vars').first()\n.json.remoteJid }}\",\n      \"fromMe\": false\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "687774f1-05b5-4eac-9785-526de87191d7",
      "name": "MESSAGE1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2480,
        2785
      ]
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "=primermsg:{{ $('vars').first().json.remoteJid }}",
        "expire": true,
        "ttl": 3600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2040,
        2785
      ],
      "id": "0ed3615d-e689-4daf-8f4d-0570d9aef54d",
      "name": "contador1",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5635d538-5603-4987-90e1-21d689baff79",
              "leftValue": "={{ $('contador').first().json['contador:' + $('vars').first().json.remoteJid] > 1 }}",
              "rightValue": 1,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2260,
        2785
      ],
      "id": "d02be655-4e13-4617-ae18-d25472e69830",
      "name": "If3"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "7945ebf6c7d23dc703489bb4cd4179232c74b1bc605ba4c3b96d3ce73b036a69@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Reuniones"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -820,
        3185
      ],
      "id": "eff27d1b-ba78-40a7-a788-3a6314366e15",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "248CSUaxOr8MEWUN",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "=No hay evento cargados para esta propiedad",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "a273c98e-1da3-4b73-be76-f4992c341e54",
      "name": "Success2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        3085
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Webhook').first().json.body.server_url }}/message/sendList/{{ $('Webhook').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Webhook').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Webhook').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "description",
              "value": "={{ $json.description }}"
            },
            {
              "name": "buttonText",
              "value": "={{ $json.buttonText }}"
            },
            {
              "name": "footerText",
              "value": "="
            },
            {
              "name": "sections",
              "value": "={{ $json.sections }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        280,
        3285
      ],
      "id": "5aa9b2a5-4d04-437a-9b8a-6a1d96e76d3f",
      "name": "HTTP Request",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// 🚀 Leer todos los eventos\nconst eventos = $input.all();\n\n// 🚀 Funciones auxiliares para manejar tiempo\nconst extraerMinutos = (isoString) => {\n  if (!isoString) return null;\n  const hora = isoString.substring(11,16).split(':');\n  return parseInt(hora[0]) * 60 + parseInt(hora[1]);\n};\n\nconst minutosAHora = (totalMinutos) => {\n  const horas = Math.floor(totalMinutos / 60);\n  const minutos = totalMinutos % 60;\n  return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`;\n};\n\nconst crearFechaISO = (fechaBase, horaStr) => {\n  return fechaBase.substring(0, 11) + horaStr + fechaBase.substring(16);\n};\n\n// 🚀 Clasificar eventos\nconst eventosVerdes = [];\nconst eventosRojos = [];\n\nfor (const item of eventos) {\n  const ev = item.json;\n  const start = ev.start?.dateTime || ev.start?.date || ev.start;\n  const end = ev.end?.dateTime || ev.end?.date || ev.end;\n  if (!start || !end) continue;\n  \n  const summary = ev.summary?.toLowerCase() || \"\";\n  const location = ev.location?.toLowerCase() || \"\";\n  const description = ev.description?.toLowerCase() || \"\";\n  const colorId = ev.colorId?.toString();\n  \n  if (colorId === \"2\") {\n    eventosVerdes.push({ start, end, summary, location });\n  } else if (colorId === \"11\") {\n    eventosRojos.push({ start, end });\n  }\n}\n\n// 🚀 Procesar horarios disponibles (intervalos de 30 minutos que no se solapan con rojos)\nconst resultados = eventosVerdes.map(evento => {\n  const inicioVerdeMin = extraerMinutos(evento.start);\n  const finVerdeMin = extraerMinutos(evento.end);\n  const bloques = [];\n  \n  // Crear bloques de 30 minutos dentro del evento verde\n  for (let m = inicioVerdeMin; m + 30 <= finVerdeMin; m += 30) {\n    let bloqueDisponible = true;\n    \n    // Verificar si este bloque se solapa con algún evento rojo\n    for (const rojo of eventosRojos) {\n      const inicioRojoMin = extraerMinutos(rojo.start);\n      const finRojoMin = extraerMinutos(rojo.end);\n      \n      if (inicioRojoMin === null || finRojoMin === null) continue;\n      \n      // Verificar solapamiento - un bloque está solapado si:\n      // NO es que (el bloque termina antes de que empiece el rojo O el bloque empieza después de que termine el rojo)\n      if (!(m + 30 <= inicioRojoMin || m >= finRojoMin)) {\n        bloqueDisponible = false;\n        break;\n      }\n    }\n    \n    // Si el bloque no se solapa con ningún evento rojo, añadirlo a los disponibles\n    if (bloqueDisponible) {\n      const horaInicio = minutosAHora(m);\n      const horaFin = minutosAHora(m + 30);\n      bloques.push({\n        horaInicio: horaInicio,\n        horaFin: horaFin,\n        inicio: crearFechaISO(evento.start, horaInicio),\n        fin: crearFechaISO(evento.start, horaFin)\n      });\n    }\n  }\n  \n  return {\n    eventoPrincipal: {\n      resumen: evento.summary,\n      location: evento.location,\n      inicio: evento.start,\n      fin: evento.end,\n      horaInicio: minutosAHora(inicioVerdeMin),\n      horaFin: minutosAHora(finVerdeMin)\n    },\n    horariosDisponibles: bloques\n  };\n});\n\n// 🚀 Devolver la respuesta\nreturn [{\n  json: {\n    resultados: resultados\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -380,
        3185
      ],
      "id": "b87b9a4b-e38d-4b61-82ff-67f493527b09",
      "name": "getForCode1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "summary, start, end, location, colorId, description, id",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -600,
        3185
      ],
      "id": "7ad642ac-cec1-4f5a-8225-8d9cb423edfb",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b272870f-2db7-43e9-b82f-131ed3160b38",
              "leftValue": "={{ $json.message }}",
              "rightValue": "=No se encontraron eventos disponibles para la propiedad.",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -160,
        3185
      ],
      "id": "b4a7ae6b-d52d-463e-ba16-b844d67f4a46",
      "name": "If5"
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del nodo anterior\nconst datos = $input.first()?.json?.resultados || [];\nconsole.log(\"DEBUG - Datos recibidos:\", JSON.stringify(datos).substring(0, 200) + \"...\");\n\n// Verificar si tenemos datos\nif (!datos || !datos.length) {\n  console.log(\"DEBUG - No hay datos disponibles\");\n  return [{\n    json: {\n      error: \"No se encontraron eventos\",\n      message: \"El nodo anterior no devolvió ningún horario disponible\"\n    },\n    pairedItem: 0\n  }];\n}\n\n// Función para obtener el emoji estacional según el mes (hemisferio sur)\nfunction getEmojiEstacional(mes) {\n  if (mes >= 3 && mes <= 5) return \"🍂\"; // Otoño\n  if (mes >= 6 && mes <= 8) return \"❄️\"; // Invierno\n  if (mes >= 9 && mes <= 11) return \"🌸\"; // Primavera\n  return \"☀️\"; // Verano\n}\n\n// Nombres de los meses\nconst nombresMeses = {\n  1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril',\n  5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto',\n  9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'\n};\n\n// Nombres de los días de la semana\nconst nombresDias = {\n  0: 'Domingo',\n  1: 'Lunes',\n  2: 'Martes',\n  3: 'Miércoles',\n  4: 'Jueves',\n  5: 'Viernes',\n  6: 'Sábado'\n};\n\n// Extraer fecha de una cadena ISO\nfunction extraerFechaYHora(isoString) {\n  if (!isoString) return null;\n  \n  const match = isoString.match(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2})/);\n  if (match) {\n    const fechaCompleta = new Date(`${match[1]}-${match[2]}-${match[3]}T${match[4]}:${match[5]}:00`);\n    const diaSemana = nombresDias[fechaCompleta.getDay()];\n    \n    return {\n      anio: parseInt(match[1], 10),\n      mes: parseInt(match[2], 10),\n      dia: parseInt(match[3], 10),\n      hora: `${match[4]}:${match[5]}`,\n      fechaCompleta: fechaCompleta,\n      diaSemana: diaSemana\n    };\n  }\n  return null;\n}\n\n// Función para formatear el rango de hora correctamente (12:00 a 12:30)\nfunction formatearRangoHora(horaInicio, horaFin) {\n  // Extraer horas y minutos de ambos horarios\n  const inicioMatch = horaInicio.match(/^(\\d+):(\\d+)/);\n  const finMatch = horaFin.match(/^(\\d+):(\\d+)/);\n  \n  // Formatear correctamente con horas y minutos\n  const horaInicioFormateada = inicioMatch ? `${inicioMatch[1]}:${inicioMatch[2]}` : horaInicio;\n  const horaFinFormateada = finMatch ? `${finMatch[1]}:${finMatch[2]}` : horaFin;\n  \n  return `${horaInicioFormateada} a ${horaFinFormateada}`;\n}\n\n// Obtener la fecha y hora actual\nconst ahora = new Date();\nconsole.log(`DEBUG - Fecha actual: ${ahora.toISOString()}`);\nconsole.log(`DEBUG - Fecha local: ${ahora.toString()}`);\n\n// Agrupar horarios por mes y día\nconst mesesAgrupados = {};\n\n// Procesar los horarios disponibles de todos los eventos\ndatos.forEach(evento => {\n  if (!evento.horariosDisponibles || !evento.horariosDisponibles.length) return;\n  \n  evento.horariosDisponibles.forEach(horario => {\n    try {\n      // Obtener la fecha de inicio del horario\n      const fechaHorario = new Date(horario.inicio);\n      \n      // Para debug\n      console.log(`DEBUG - Evaluando horario: ${horario.inicio}`);\n      \n      // COMPARACIÓN SIMPLE: Verificar si la fecha ya pasó\n      if (fechaHorario <= ahora) {\n        console.log(`DEBUG - FILTRADA: Fecha ya pasó`);\n        return; // Saltar este horario porque ya pasó\n      }\n      \n      // Extraer componentes de la fecha para agrupar\n      const fechaInicio = extraerFechaYHora(horario.inicio);\n      if (!fechaInicio) {\n        console.log(`DEBUG - Error al extraer fecha y hora de: ${horario.inicio}`);\n        return;\n      }\n      \n      const mes = fechaInicio.mes;\n      const dia = fechaInicio.dia;\n      const nombreMes = nombresMeses[mes];\n      const diaSemana = fechaInicio.diaSemana;\n      \n      // Inicializar el grupo del mes si no existe\n      if (!mesesAgrupados[nombreMes]) {\n        mesesAgrupados[nombreMes] = {\n          mes: mes,\n          fechas: []\n        };\n      }\n      \n      // Evitar duplicados\n      const yaExiste = mesesAgrupados[nombreMes].fechas.some(\n        e => e.dia === dia && e.horaInicio === horario.horaInicio\n      );\n      \n      if (!yaExiste) {\n        mesesAgrupados[nombreMes].fechas.push({\n          dia,\n          horaInicio: horario.horaInicio,\n          horaFin: horario.horaFin,\n          mes,\n          diaSemana,\n          resumen: evento.eventoPrincipal.resumen,\n          rowId: `${mes}-${dia}-${horario.horaInicio.replace(\":\", \"\")}`\n        });\n      }\n    } catch (error) {\n      console.log(`ERROR procesando horario: ${error.message}`);\n    }\n  });\n});\n\n// Armar la estructura para WhatsApp SendList\nconst sections = [];\n\n// Crear una sección para cada mes\nfor (const [nombreMes, datosMes] of Object.entries(mesesAgrupados)) {\n  const filas = datosMes.fechas;\n  if (filas.length === 0) continue;\n  \n  // Obtener el emoji estacional para este mes\n  const emoji = getEmojiEstacional(datosMes.mes);\n  \n  // Ordenar filas por día y hora\n  filas.sort((a, b) => {\n    if (a.dia !== b.dia) return a.dia - b.dia;\n    return a.horaInicio.localeCompare(b.horaInicio);\n  });\n  \n  const rowsDelMes = [];\n  filas.forEach(f => {\n    const horaFormateada = formatearRangoHora(f.horaInicio, f.horaFin);\n    rowsDelMes.push({\n      title: `🕒 ${f.dia} de ${nombreMes} : ${horaFormateada}`,\n      description: `${f.diaSemana}`,\n      rowId: f.rowId\n    });\n  });\n  \n  // Agregar la sección del mes con el emoji estacional\n  if (rowsDelMes.length > 0) {\n    sections.push({\n      title: `${emoji} ${nombreMes}`,\n      rows: rowsDelMes\n    });\n  }\n}\n\n// Sección por defecto si no hay nada\nif (sections.length === 0) {\n  sections.push({\n    title: \"⚠️ Sin horarios disponibles\",\n    rows: [{\n      title: \"No hay horarios disponibles\",\n      description: \"Intenta más tarde\",\n      rowId: \"no-disponible\"\n    }]\n  });\n}\n\n// Obtener número de cliente desde otro nodo o poner uno por defecto\nconst remoteJid =$('Webhook').first().json.body.data.key.remoteJid ;\n\n// JSON final para enviar por WhatsApp\nconst requestBody = {\n  number: remoteJid,\n  title: \"📅 Fechas Disponibles\",\n  description: \"Seleccioná una fecha y hora para agendar tu visita\\n🕒 Cada visita tiene una duración de 30 minutos aprox.\",\n  buttonText: \"Seleccioná 👆\",\n  footerText: \"\", // Ya incluimos la información de duración en la descripción\n  sections\n};\n\n// Retornar el mensaje final en el formato que espera n8n\nreturn [{\n  json: requestBody,\n  pairedItem: 0 // Agregamos pairedItem para mantener el enlace con el elemento de entrada\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        60,
        3285
      ],
      "id": "c24ea093-af2c-4b59-a07a-8d0229136c4f",
      "name": "Lista2"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "pgzahexmtqessds",
        "table": "mf6beq5bszvx882",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Nombre",
              "fieldValue": "={{ $('Webhook').first().json.body.data.pushName }}"
            },
            {
              "fieldName": "Telefono",
              "fieldValue": "={{ $('vars').first().json.remoteJid }}"
            },
            {
              "fieldName": "Fecha",
              "fieldValue": "={{ $('Webhook').first().json.body.data.message.listResponseMessage.title }}"
            },
            {
              "fieldName": "fecha_cita",
              "fieldValue": "={{ $json.fecha_cita }}"
            },
            {
              "fieldName": "recordatorio_1h",
              "fieldValue": "={{ $json.recordatorio_1h }}"
            },
            {
              "fieldName": "estado",
              "fieldValue": "no enviado"
            },
            {
              "fieldName": "estado_cita",
              "fieldValue": "Activa"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        60,
        3810
      ],
      "id": "4f32c2b9-0a29-4386-84eb-7406298f0bf1",
      "name": "NocoDB",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pgzahexmtqessds",
        "table": "mf6beq5bszvx882",
        "returnAll": true,
        "options": {
          "where": "=(Telefono,eq,{{ $('vars').item.json.remoteJid }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -820,
        3610
      ],
      "id": "ae34cb4a-c4cd-4796-886a-0bdc73fd625a",
      "name": "obtener cliente",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7f20c936-8e6d-44d7-aabb-e304d7426030",
              "leftValue": "={{ $('Switch').item.json.remoteJid }}",
              "rightValue": "Finalizada",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -600,
        3610
      ],
      "id": "0522f6a9-755b-48ea-b16d-2399de605054",
      "name": "If6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('vars').first().json.server_url }}/message/sendText/{{ $('vars').first().json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $('vars').first().json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('vars').first().json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "=🤖 ¡Reunión agendada correctamente!\n\n⏰ Vas a recibir un mensaje 1 hora antes del evento con el enlace de Google Meet para la videollamada.\n\n🙌 Gracias por contactarnos Te esperamos en la reunión."
            }
          ]
        },
        "options": {}
      },
      "name": "FERNANDO5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        280,
        3810
      ],
      "id": "ca1417bb-dcfd-4f83-b533-6946fc533685",
      "credentials": {
        "httpBasicAuth": {
          "id": "OpgdvMlLy6Zxc6ii",
          "name": "NOCODB"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=contador:5492254423359"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3460,
        4670
      ],
      "id": "95622cac-68a0-44e7-b5ba-15553e761993",
      "name": "Redis8",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=primermsg:5492254423359"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3240,
        4670
      ],
      "id": "25feed1f-4aab-4afe-9f2e-2709a163a563",
      "name": "Redis9",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -3900,
        4670
      ],
      "id": "586698e9-c760-43ca-91b6-d380ddc5a210",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -160,
        3510
      ],
      "id": "369e757c-7fb9-4a99-8e93-b957d647e203",
      "name": "Limit"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/chat/sendPresence/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"number\": \"{{ $node['Webhook'].json.body.data.key.remoteJid }}\",\n    \"delay\": 3000,\n    \"presence\": \"composing\"\n}",
        "options": {}
      },
      "id": "2195aa45-5522-4ac7-a8a0-b00381973072",
      "name": "Escribiendo...6",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1160,
        2885
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "d5a342e9-585b-42ea-be44-644adae10199",
              "leftValue": "={{ $json.msg_whatsapp }}",
              "rightValue": "={{ $json.Redis1 }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "b447f677-77df-4845-8065-b41aa405da4f",
      "name": "Compara Get Memory1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        720,
        2885
      ]
    },
    {
      "parameters": {
        "jsCode": "const data =$input.first().json.Redis1 ;\n\n// Verifica si data es un array directamente\nlet array;\n\nif (Array.isArray(data)) {\n    array = data;\n} else {\n    try {\n        // Intenta parsear si es una cadena JSON válida\n        array = JSON.parse(data);\n    } catch (error) {\n        // Si no es JSON, considera que es un texto plano\n        array = [data];\n    }\n}\n\n// Une los elementos del array en un string\nconst message_completo = array.join(\", \");\n\nreturn [{ json: { message_completo } }];\n"
      },
      "id": "1adac85e-8308-4da5-b22f-46aa857a5fba",
      "name": "Compara igualdad de memorias",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        2885
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=usuario:{{ $('vars').first().json.remoteJid.replace(/\\D/g, '') }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1380,
        2885
      ],
      "id": "52a840d8-c0d5-4185-99bc-007d4caa50da",
      "name": "Redis10",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "255cac8e-6b72-4bbf-a4b4-a005540c821f",
              "name": "msg_whatsapp",
              "value": "={{ $('Return Redis').item.json.obtieneMSG }}",
              "type": "string"
            },
            {
              "id": "e65cd104-a301-462e-9c36-9bdd3769472e",
              "name": "Redis1",
              "value": "={{ $json.Messages }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        500,
        2885
      ],
      "id": "84cb0666-b0ca-45b2-9fdb-d17029c8179b",
      "name": "redis1"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Messages",
        "key": "=usuario:{{ $('vars').item.json.remoteJid }}",
        "options": {}
      },
      "id": "40bd2edd-fc32-4078-b666-6f8ac0d1376d",
      "name": "Get redis",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        280,
        2885
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/message/sendText/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"delay\": 1600,\n  \"number\": \"{{ $('vars').item.json.remoteJid }}\",\n  \"text\": \"```En breve lo atendera un agente Humano```...\",\n  \"quoted\": {\n    \"key\": {\n      \"id\": \"{{ $('vars').item.json.apikey }}\",\n      \"remoteJid\": \"{{ $('vars').item.json.remoteJid }}\",\n      \"fromMe\": false\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "9c1bb8dc-2cd2-424c-89f2-24d489819e70",
      "name": "MESSAGE5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -380,
        4410
      ]
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "=primermsg:{{ $('vars').item.json.remoteJid }}",
        "expire": true,
        "ttl": 1800
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -820,
        4410
      ],
      "id": "c7b56bd4-0c9c-4255-85b1-8c3143a34b7e",
      "name": "contador2",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5635d538-5603-4987-90e1-21d689baff79",
              "leftValue": "={{ $json['primermsg:5492254423359'] }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -600,
        4410
      ],
      "id": "ab2ca81f-d6ca-4327-8a96-9cc40d5c6295",
      "name": "If7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/message/sendText/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"delay\": 1600,\n  \"number\": \"{{ $('Edit Fields1').item.json.remoteJid }}\",\n  \"text\": \"🤖💬 *Transcripcion:* ```{{ $json.text }}```\",\n  \"quoted\": {\n    \"key\": {\n      \"id\": \"{{ $('Edit Fields1').item.json.idmsg }}\",\n      \"remoteJid\": \"{{ $('Edit Fields1').item.json.remoteJid }}\",\n      \"fromMe\": false\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "34be1ac6-f806-4594-a0e1-181e75f8e238",
      "name": "MESSAGE",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -380,
        2685
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=usuario:{{ $('vars').first().json.remoteJid.replace(/\\D/g, '') }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -160,
        4410
      ],
      "id": "a90063d5-2a98-4d85-a383-f149bf3b499d",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=usuario:{{ $('vars').first().json.remoteJid.replace(/\\D/g, '') }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        500,
        3810
      ],
      "id": "eb1b74d3-a86f-4e25-84fe-bafb7ef50835",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=usuario:{{ $('vars').first().json.remoteJid.replace(/\\D/g, '') }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        500,
        3510
      ],
      "id": "9b028ad2-e26a-4229-ad22-f231a912604b",
      "name": "Redis2",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=usuario:{{ $('vars').first().json.remoteJid.replace(/\\D/g, '') }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2700,
        2785
      ],
      "id": "8af906b7-8d1e-4537-bbf2-e783adb7f637",
      "name": "Redis3",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=usuario1:{{ $('vars').first().json.remoteJid.replace(/\\D/g, '') }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3360,
        2985
      ],
      "id": "03a91228-0910-472e-ae30-488e0ded0645",
      "name": "Redis6",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('vars').item.json.server_url }}/message/sendText/{{ $('vars').item.json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $('vars').item.json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('vars').item.json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "=👉🔗 _Gracias por su confirmación 10 min antes le enviaremos el link de la llamada_"
            }
          ]
        },
        "options": {}
      },
      "name": "FERNANDO6",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -3900,
        5450
      ],
      "id": "2593f426-c70c-4228-9632-85ea809f5453",
      "credentials": {
        "httpBasicAuth": {
          "id": "OpgdvMlLy6Zxc6ii",
          "name": "NOCODB"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('vars').item.json.server_url }}/message/sendText/{{ $('vars').item.json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $('vars').item.json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('vars').item.json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "=_Lamento que no pueda asistir, lo volveremos a llamar en otro momento_ 👋🏻🤖"
            }
          ]
        },
        "options": {}
      },
      "name": "FERNANDO7",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -3900,
        4930
      ],
      "id": "9e4150cf-8c8b-42be-bb20-c2eb96cb6fbd",
      "credentials": {
        "httpBasicAuth": {
          "id": "OpgdvMlLy6Zxc6ii",
          "name": "NOCODB"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pgzahexmtqessds",
        "table": "mpg9mfycr0pp0x5",
        "returnAll": true,
        "options": {
          "where": "=(Telefono,eq,{{ $json.remoteJid }})~and(estado,eq,on)"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -820,
        2885
      ],
      "id": "340c5c09-31b4-424c-821c-7857ac0e8fc8",
      "name": "NocoDB1",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "action": "generate"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -1920,
        3385
      ],
      "id": "c9ed2993-589a-4635-98b9-cf68d3e104da",
      "name": "Crypto"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "pgzahexmtqessds",
        "table": "mpg9mfycr0pp0x5",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "pushname",
              "fieldValue": "={{ $('Webhook').item.json.body.data.pushName }}"
            },
            {
              "fieldName": "Telefono",
              "fieldValue": "={{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '') }}"
            },
            {
              "fieldName": "key",
              "fieldValue": "={{ $json.data }}"
            },
            {
              "fieldName": "estado",
              "fieldValue": "on"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -1700,
        3385
      ],
      "id": "97205392-979b-4235-860a-ad967866efa5",
      "name": "InsertarCliente",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pgzahexmtqessds",
        "table": "mpg9mfycr0pp0x5",
        "returnAll": true,
        "options": {
          "where": "=(Telefono,eq,{{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '')  }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -2580,
        3340
      ],
      "id": "c497a62f-c72f-4174-acfd-1ed3349187d8",
      "name": "getClientes",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e02fa309-efdc-4424-a35e-232970a746cf",
              "leftValue": "={{ $json.Telefono }}",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2140,
        3310
      ],
      "id": "609da1ad-da53-412d-a62a-7d65b42fab1c",
      "name": "If1"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pgzahexmtqessds",
        "table": "mf6beq5bszvx882",
        "returnAll": true,
        "options": {
          "where": "=(Telefono,eq,{{ $json.Telefono }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        60,
        3510
      ],
      "id": "e2e16d68-5426-44a4-ade7-b48b3fff3ae2",
      "name": "NocoDB2",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/message/sendText/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"delay\": 1600,\n  \"number\": \"{{ $('vars').first().json.remoteJid }}\",\n  \"text\": \"{{ $json.Nombre }} ya tenes una cita agendada\\n \\n{{ $json.Fecha }}\",\n  \"quoted\": {\n    \"key\": {\n      \"id\": \"{{ $('vars').first().json.apikey }}\",\n      \"remoteJid\": \"{{ $('vars').first()\n.json.remoteJid }}\",\n      \"fromMe\": false\n    }\n  }\n}\n",
        "options": {}
      },
      "id": "8f5a2664-8db8-400b-ae1b-24539779d893",
      "name": "MESSAGE7",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        280,
        3510
      ]
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "projectId": "pgzahexmtqessds",
        "table": "mpg9mfycr0pp0x5",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Id",
              "fieldValue": "={{ $('vars').item.json.Id }}"
            },
            {
              "fieldName": "estado",
              "fieldValue": "off"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        2920,
        2785
      ],
      "id": "f935853c-38ed-41aa-87f2-c108c8afa7fa",
      "name": "NocoDB3",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "bot",
        "key": "=status:{{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3680,
        3210
      ],
      "id": "4be38706-5dfc-44ce-a3ed-75cad2cd4783",
      "name": "Obtiene el estado",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0b4f0505-ffd5-4d85-a00c-82dedd175510",
              "name": "humano",
              "value": "=🙋🏻‍♂️",
              "type": "string"
            },
            {
              "id": "7aebe232-8418-4c8f-a2a4-23cddd0243eb",
              "name": "sender",
              "value": "={{ $('Webhook').item.json.body.sender.replace(/\\D/g, '') }}",
              "type": "string"
            },
            {
              "id": "2542304d-c7ee-4814-aa6e-b9591916a458",
              "name": "robot",
              "value": "🤖",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3900,
        5710
      ],
      "id": "bdaafbe5-d340-41c7-92b3-2f0c9f7b66d7",
      "name": "msg"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.humano }}",
                    "rightValue": "🙋🏻‍♂️",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "0d1b8d7e-17ff-4865-8af9-970b22ca3a21"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Humano"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "67267789-27a2-4927-a2f0-46757e29cfc0",
                    "leftValue": "={{ $json.robot }}",
                    "rightValue": "🤖",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3680,
        5710
      ],
      "id": "e4a06e33-baa4-4c65-ae87-3cc679944dd0",
      "name": "Switch2"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=status:{{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
        "value": "@bot_on",
        "expire": true,
        "ttl": 3600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3900,
        5190
      ],
      "id": "31b635d9-394c-4046-930c-47291c71e110",
      "name": "Activa robot",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Función para detectar intención de ver los bots disponibles\nfunction detectarSolicitudBots(mensaje) {\n  if (!mensaje) return false;\n  \n  const mensajeLC = mensaje.toLowerCase().trim();\n  \n  // Patrones para detectar solicitud de ver bots\n  const patronesBots = [\n    'ver tus bots', 'mostrar bots', 'bots disponibles', 'que bots tienes',\n    'ver agentes', 'mostrar agentes', 'agentes disponibles', 'quiero ver tus bots',\n    'lista de bots', 'cuales son tus bots'\n  ];\n  \n  for (const patron of patronesBots) {\n    if (mensajeLC.includes(patron)) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n// Función para obtener bots disponibles\nfunction obtenerBotsDisponibles() {\n  // Lista predefinida de bots \n  const botsPredefinidos = [\n    {\n      id: \"ventas\",\n      nombre: \"Asistente de Ventas\",\n      descripcion: \"Te ayuda con precios y productos\",\n      imagen: \"🛒\"\n    },\n    {\n      id: \"soporte\",\n      nombre: \"Soporte Técnico\",\n      descripcion: \"Resuelve problemas técnicos\",\n      imagen: \"🔧\"\n    },\n    {\n      id: \"agenda\",\n      nombre: \"Asistente de Citas\",\n      descripcion: \"Agenda reuniones y demos\",\n      imagen: \"📅\"\n    }\n  ];\n  \n  // Generar mensaje formateado\n  let mensaje = \"🤖 *BOTS DISPONIBLES* 🤖\\n\\n\";\n  \n  botsPredefinidos.forEach(bot => {\n    mensaje += `${bot.imagen || '🤖'} *${bot.nombre}*\\n`;\n    mensaje += `${bot.descripcion || 'Sin descripción'}\\n`;\n    mensaje += `Para activar: @${bot.id}\\n\\n`;\n  });\n  \n  mensaje += \"Para activar un bot, escribe su comando correspondiente.\";\n  \n  return {\n    bots: botsPredefinidos,\n    formatoMensaje: mensaje\n  };\n}\n\n// Función para procesar comandos\nfunction procesarComando(mensaje) {\n  if (!mensaje) return { esComando: false };\n  \n  const mensajeLC = mensaje.toLowerCase().trim();\n  \n  // Comandos de activación/desactivación\n  if (mensajeLC === '@on') {\n    return {\n      esComando: true,\n      tipoComando: 'activacion',\n      nuevoEstado: 'activo',\n      mensajeRespuesta: \"🤖 *Asistente IA activado* - Ahora responderé a los mensajes automáticamente.\"\n    };\n  }\n  \n  if (mensajeLC === '@off') {\n    return {\n      esComando: true,\n      tipoComando: 'desactivacion',\n      nuevoEstado: 'inactivo',\n      mensajeRespuesta: \"🔕 *Asistente IA desactivado* - Un agente humano atenderá la conversación.\"\n    };\n  }\n  \n  // Verificar si es un comando de activación de bot específico\n  if (mensajeLC.startsWith('@') && mensajeLC.length > 1) {\n    const botId = mensajeLC.substring(1); // Quita el @ del inicio\n    \n    return {\n      esComando: true,\n      tipoComando: 'bot_especifico',\n      botId: botId,\n      mensajeRespuesta: `🤖 *Bot ${botId} activado* - Ahora te atenderé con este asistente especializado.`\n    };\n  }\n  \n  // No es un comando\n  return {\n    esComando: false\n  };\n}\n\n// Función para verificar estado del asistente\nasync function verificarEstadoAsistente(remoteJid) {\n  try {\n    if (!remoteJid) {\n      console.log(\"RemoteJid no proporcionado para verificar estado\");\n      return {\n        activo: true,\n        razon: \"RemoteJid no disponible, asumiendo activo por defecto\"\n      };\n    }\n    \n    const remoteJidClean = remoteJid.replace(/\\D/g, '');\n    console.log(`Verificando estado para: ${remoteJidClean}`);\n    \n    // Intentar obtener estado actual desde Redis\n    let estadoActual;\n    try {\n      // Usar get para obtener el estado\n      estadoActual = await $node['Obtiene el estado'].json.bot;\n      console.log(`Estado obtenido del nodo Redis: ${estadoActual}`);\n    } catch (redisError) {\n      console.error(`Error al leer estado: ${redisError?.message || 'Error desconocido'}`);\n      return {\n        activo: true,\n        razon: `Error al leer estado: ${redisError?.message || 'Error desconocido'}. Asumiendo activo.`\n      };\n    }\n    \n    // Si no hay estado o es null/undefined, asumimos activo\n    if (estadoActual === null || estadoActual === undefined) {\n      return {\n        activo: true,\n        razon: \"No hay configuración previa, activo por defecto\"\n      };\n    }\n    \n    // Si el estado es '@bot_off', está inactivo\n    const estaActivo = estadoActual !== '@bot_off';\n    return {\n      activo: estaActivo,\n      razon: estaActivo ? \"Bot activo\" : \"Bot desactivado\"\n    };\n    \n  } catch (error) {\n    console.error(`Error al verificar estado: ${error?.message || 'Error desconocido'}`);\n    return {\n      activo: true,\n      error: true,\n      razon: `Error global: ${error?.message || 'Error desconocido'}. Asumiendo activo.`\n    };\n  }\n}\n\n// --- CÓDIGO PRINCIPAL ---\n\n// Obtener los datos de entrada con validación\nlet webhook;\ntry {\n  webhook = $('Webhook').first()?.json;\n  console.log(\"Datos de Webhook: \" + (webhook ? \"disponibles\" : \"no disponibles\"));\n} catch (error) {\n  console.error(\"Error al acceder a Webhook:\", error?.message);\n  webhook = null;\n}\n\n// Si no hay datos de Webhook, usar un valor por defecto\nif (!webhook || !webhook.body || !webhook.body.data) {\n  console.log(\"Estructura de webhook incompleta o no disponible\");\n  \n  // Tratar de obtener el estado del bot directamente\n  let estadoBot;\n  try {\n    estadoBot = $('Obtiene el estado').first()?.json?.bot;\n    console.log(`Estado del bot obtenido: ${estadoBot}`);\n  } catch (error) {\n    console.error(\"Error al obtener estado del bot:\", error?.message);\n    estadoBot = '@bot_off'; // Por defecto desactivado si hay error\n  }\n  \n  return {\n    json: {\n      error: \"Estructura de datos incompleta\",\n      asistenteActivo: estadoBot !== '@bot_off',\n      razonEstado: \"Determinado por parámetro directo\",\n      shouldReply: estadoBot !== '@bot_off',\n      mensaje: \"N/A\"\n    }\n  };\n}\n\n// Si llegamos aquí, tenemos datos de webhook válidos\nconst datos = webhook;\nconst mensaje = datos.body.data.message?.conversation || \"\";\nconst remoteJid = datos.body.data.key?.remoteJid || \"\";\nconst remoteJidClean = remoteJid.replace(/\\D/g, '');\n\nconsole.log(`Mensaje recibido: \"${mensaje}\"`);\nconsole.log(`RemoteJid: ${remoteJid}`);\n\n// 1. Verificar si es un comando (@on/@off/@botID)\nconst resultadoComando = procesarComando(mensaje);\nconsole.log(`¿Es un comando? ${resultadoComando.esComando}`);\n\n// 2. Verificar si es una solicitud para ver bots\nconst esSolicitudBots = detectarSolicitudBots(mensaje);\nconsole.log(`¿Es solicitud de bots? ${esSolicitudBots}`);\n\n// 3. Si es un comando de control, guardar en Redis\nif (resultadoComando.esComando && \n    (resultadoComando.tipoComando === 'activacion' || resultadoComando.tipoComando === 'desactivacion')) {\n  try {\n    // Aquí podríamos guardar en Redis, pero en esta implementación inicial\n    // lo haremos en el siguiente nodo para mantener el código más simple\n    console.log(`Comando detectado: ${resultadoComando.tipoComando}`);\n  } catch (error) {\n    console.error(`Error al procesar comando: ${error?.message}`);\n  }\n}\n\n// 4. Verificar estado actual del asistente\nlet estadoAsistente;\ntry {\n  estadoAsistente = await verificarEstadoAsistente(remoteJid);\n} catch (error) {\n  console.error(`Error al verificar estado: ${error?.message}`);\n  estadoAsistente = {\n    activo: true,\n    razon: `Error en verificación: ${error?.message}. Asumiendo activo.`\n  };\n}\n\nconsole.log(`Estado asistente: ${JSON.stringify(estadoAsistente)}`);\n\n// 5. Si es una solicitud de ver bots, obtener información\nlet infoBots = {};\nif (esSolicitudBots) {\n  infoBots = obtenerBotsDisponibles();\n  console.log(`Información de bots obtenida: ${infoBots.bots.length} bots disponibles`);\n}\n\n// 6. Determinar si debe responder\nconst shouldReply = estadoAsistente.activo && !resultadoComando.esComando && !esSolicitudBots;\n\n// Devolver resultado\nreturn {\n  json: {\n    remoteJid: remoteJid,\n    remoteJidClean: remoteJidClean,\n    mensaje: mensaje,\n    esComando: resultadoComando.esComando,\n    tipoComando: resultadoComando.tipoComando || 'ninguno',\n    mensajeComando: resultadoComando.mensajeRespuesta,\n    esSolicitudBots: esSolicitudBots,\n    mensajeBots: esSolicitudBots ? infoBots.formatoMensaje : '',\n    asistenteActivo: estadoAsistente.activo,\n    razonEstado: estadoAsistente.razon,\n    shouldReply: shouldReply,\n    senderInfo: {\n      jid: datos.body.sender,\n      isInstance: datos.body.sender !== datos.body.data.key.remoteJid\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3020,
        3310
      ],
      "id": "43a97a86-e68a-4501-bb10-c67aae8267a8",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "eb8838ec-b7a3-4e56-87c4-3cebab2cc77b",
              "leftValue": "={{ $json.shouldReply }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3900,
        2425
      ],
      "id": "6291bb87-8305-4d6a-87ad-1a081b6672f4",
      "name": "If4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bfd8e386-bd62-4c4d-8cb4-9211f7091965",
              "leftValue": "={{ $('Webhook').item.json.body.data.key.fromMe }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2800,
        3310
      ],
      "id": "1a17ec7b-cf81-43e5-963f-82ed1da4e930",
      "name": "If8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('vars').item.json.server_url }}/message/sendText/{{ $('vars').item.json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $('vars').item.json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('vars').item.json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "=⚠️ _Su consulta fue tomada, ya lo atenderemos_ ⚠️ "
            }
          ]
        },
        "options": {}
      },
      "name": "FERNANDO",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -820,
        4010
      ],
      "id": "da2bc0c9-d0d9-40e4-8984-99a2fe0b9de1",
      "credentials": {
        "httpBasicAuth": {
          "id": "OpgdvMlLy6Zxc6ii",
          "name": "NOCODB"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('vars').item.json.server_url }}/message/sendText/{{ $('vars').item.json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $('vars').item.json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('vars').item.json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "=👨‍💼 _Excelente, ya nos ponemos en contacto_ ✅ "
            }
          ]
        },
        "options": {}
      },
      "name": "FERNANDO1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -820,
        3810
      ],
      "id": "189652a6-0c28-4e7d-9a91-214964b4de96",
      "credentials": {
        "httpBasicAuth": {
          "id": "OpgdvMlLy6Zxc6ii",
          "name": "NOCODB"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "820f3911-7481-46dd-bfab-00b72f2e8a60",
              "leftValue": "={{ $json.estado }}",
              "rightValue": "off",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2360,
        3340
      ],
      "id": "eeee1b6c-33ba-4dc3-bd61-6ba597e7cf21",
      "name": "If2",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Lee el texto “🕒 12 de Mayo : 09:00 a 09:30” desde vars\nconst texto = $('vars').first().json.msg || '';\n\n// ───────── Parseo rápido ─────────\nconst rgx = /(\\d+)\\s+de\\s+(\\w+)\\s*:\\s*(\\d{1,2}):(\\d{2})\\s*a\\s*(\\d{1,2}):(\\d{2})/i;\nconst mt  = texto.match(rgx);\nif (!mt) throw new Error('Formato de fecha/hora no reconocido');\n\nconst [ , dia, mesTxt, hI, mI, hF, mF ] = mt.map(v => isNaN(v) ? v : Number(v));\n\nconst mapMes = {\n  'enero':0,'febrero':1,'marzo':2,'abril':3,'mayo':4,'junio':5,\n  'julio':6,'agosto':7,'septiembre':8,'octubre':9,'noviembre':10,'diciembre':11\n};\nconst mesNum = mapMes[mesTxt.toLowerCase()];\nif (mesNum === undefined) throw new Error('Mes no reconocido');\n\nconst año = new Date().getFullYear();\nconst desde = new Date(año, mesNum, dia, hI, mI);\nconst hasta = new Date(año, mesNum, dia, hF, mF);\n\n// Recordatorio 1 h antes\nconst rec1h = new Date(desde.getTime() - 60 * 60 * 1000);\n\n// Formateo YYYY‑MM‑DDTHH:MM\nconst fmt = d => d.toISOString().slice(0,16);\n\nreturn [{\n  json: {\n    fecha_cita     : fmt(desde),\n    fecha_desde    : fmt(desde),\n    fecha_hasta    : fmt(hasta),\n    recordatorio_1h: fmt(rec1h),\n    texto_original : 'Cita generada automáticamente'\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        3810
      ],
      "id": "61ddc2f3-b982-40d1-a5eb-8af13f2d0809",
      "name": "Convertir la fecha"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ad8ea2ff-c4bb-4477-b38d-b9d17a44897d",
              "leftValue": "={{ $json.fecha_cita }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -380,
        3760
      ],
      "id": "fceab68d-ffb4-48cb-a064-5e63ebe2da59",
      "name": "If9"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=cliente:{{ $('vars').item.json.remoteJid }}",
        "value": "@bot_inmobiliario",
        "expire": true,
        "ttl": 3600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -380,
        4210
      ],
      "id": "7fb3cc2c-792e-4254-b929-8c7eb84a9074",
      "name": "Redis11",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('vars').item.json.server_url }}/message/sendText/{{ $('vars').item.json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $('vars').item.json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('vars').item.json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "=🏡 Acaba de solicitar el demo inmobiliario 🏡\n\nPreparando el agente ...\n\nAguarde unos minutos ...\n\n"
            }
          ]
        },
        "options": {}
      },
      "name": "FERNANDO2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -160,
        4210
      ],
      "id": "51fd8d9c-38ba-405a-be65-d32cb7539863",
      "credentials": {
        "httpBasicAuth": {
          "id": "OpgdvMlLy6Zxc6ii",
          "name": "NOCODB"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7a144109-0d59-46fc-9c7e-36b4615b3567",
              "leftValue": "={{ $json.bot_inmobiliario }}",
              "rightValue": "@bot_inmobiliario",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -600,
        4210
      ],
      "id": "6f58b7dd-4235-46bb-a32b-ed880f2d8555",
      "name": "Ya solicito?"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "bot_inmobiliario",
        "key": "=cliente:{{ $('vars').item.json.remoteJid }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -820,
        4210
      ],
      "id": "48616d17-13af-4d11-bea1-8202bb5cb75e",
      "name": "Obtiene consulta de bot",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=cliente:5492254423359"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2800,
        4670
      ],
      "id": "c263e92d-eb13-47b4-bc5b-47c1bea61c55",
      "name": "Redis12",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "bot_on",
        "key": "=cliente:{{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '')}}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3460,
        3210
      ],
      "id": "610e4d79-f745-4440-abca-8c12fa0cd67b",
      "name": "Redis13",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "74dc65ff-5023-4340-a0b6-ec0f504ce6a6",
              "leftValue": "={{ $json.bot_on }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3240,
        3210
      ],
      "id": "f7262cb7-681d-449f-9855-2ee0da69cd2e",
      "name": "If10"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.bot_on }}",
                    "rightValue": "@bot_inmobiliario",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "fe69761d-d1f8-46bd-923e-d33321fe6c2a"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "@bot_inmobiliario"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3020,
        3110
      ],
      "id": "59cfa51d-4093-4453-afd4-f7b9a91a1795",
      "name": "Agentes"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d8dba297-994e-46c2-876e-275d13484e04",
              "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
              "rightValue": "audioMessage",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1260,
        3310
      ],
      "id": "323f1da1-3706-4889-ac57-012be3bdc687",
      "name": "If11"
    }
  ],
  "pinData": {
    "msg": [
      {
        "json": {
          "conversation": "🙋🏻‍♂️",
          "sender": "5492254596618"
        }
      }
    ],
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.innovasoftpro.dev",
            "user-agent": "axios/1.7.9",
            "content-length": "4196",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n.innovasoftpro.dev",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "575dad520f0e",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "qeva",
            "data": {
              "key": {
                "remoteJid": "5492254423359@s.whatsapp.net",
                "fromMe": false,
                "id": "916CD22BD0491C014C7044449F250B10"
              },
              "pushName": "Fer { }",
              "status": "DELIVERY_ACK",
              "message": {
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "a0ebFmt5jO2yzg==",
                    "senderTimestamp": "1746748763",
                    "recipientKeyHash": "jfpbSca0rEEO1A==",
                    "recipientTimestamp": "1747789270"
                  },
                  "deviceListMetadataVersion": 2,
                  "messageSecret": "X3XZN+LMiupojUossUab8Tetsz3o9sPUyVzNZSNtWv0="
                },
                "listResponseMessage": {
                  "title": "🛒 Bot para Despensas",
                  "listType": "SINGLE_SELECT",
                  "singleSelectReply": {
                    "selectedRowId": "bot_despensa"
                  },
                  "contextInfo": {
                    "stanzaId": "3EB0C25219FE1DA70FDEFF55A89F9AA0C26F4B5C",
                    "participant": "5492254596618@s.whatsapp.net",
                    "quotedMessage": {
                      "listMessage": {
                        "title": "🔹 AUTOMATIZACIONES 🔹",
                        "description": "Seleccione un área para atención inmediata:",
                        "buttonText": "Ver áreas 📋",
                        "listType": "SINGLE_SELECT",
                        "sections": [
                          {
                            "title": "🚨 Urgencias",
                            "rows": [
                              {
                                "title": "⚠️ Problemas técnicos",
                                "description": "Comunícate con un agente técnico por problemas con tu software",
                                "rowId": "urgencia-tecnica"
                              },
                              {
                                "title": "💵 Informar pagos",
                                "description": "Notificar pagos realizados o consultas urgentes de facturación",
                                "rowId": "urgencia-pagos"
                              }
                            ]
                          },
                          {
                            "title": "👩‍💻 Soporte Técnico",
                            "rows": [
                              {
                                "title": "🔌 Integraciones",
                                "description": "Ayuda con reconexion de Whatsapp ",
                                "rowId": "agente-integraciones"
                              }
                            ]
                          },
                          {
                            "title": "📅 Agendar una cita",
                            "rows": [
                              {
                                "title": "🗓️ Solicitar una reunión",
                                "description": "Coordiná una cita con nuestro equipo",
                                "rowId": "cita-solicitar"
                              }
                            ]
                          },
                          {
                            "title": "Nuestros agentes, ¡solicitá tu demo! 🚀",
                            "rows": [
                              {
                                "title": "🏡 Bot Inmobiliario",
                                "description": "Gestioná alquileres, ventas y consultas",
                                "rowId": "bot_inmobiliario"
                              },
                              {
                                "title": "🛒 Bot para Despensas",
                                "description": "Automatizá pedidos y atención de tu tienda",
                                "rowId": "bot_despensa"
                              },
                              {
                                "title": "🛵 Bot de Delivery",
                                "description": "Tomá pedidos y gestioná envíos en WhatsApp",
                                "rowId": "bot_delivery"
                              },
                              {
                                "title": "📅 Agendador de Citas",
                                "description": "Organizá turnos con recordatorios automáticos",
                                "rowId": "bot_agendador"
                              }
                            ]
                          }
                        ],
                        "footerText": "💼 Expertos en automatización WhatsApp"
                      }
                    }
                  },
                  "description": "Automatizá pedidos y atención de tu tienda"
                }
              },
              "contextInfo": {
                "stanzaId": "3EB0C25219FE1DA70FDEFF55A89F9AA0C26F4B5C",
                "participant": "5492254596618@s.whatsapp.net",
                "quotedMessage": {
                  "listMessage": {
                    "title": "🔹 AUTOMATIZACIONES 🔹",
                    "description": "Seleccione un área para atención inmediata:",
                    "buttonText": "Ver áreas 📋",
                    "listType": "SINGLE_SELECT",
                    "sections": [
                      {
                        "title": "🚨 Urgencias",
                        "rows": [
                          {
                            "title": "⚠️ Problemas técnicos",
                            "description": "Comunícate con un agente técnico por problemas con tu software",
                            "rowId": "urgencia-tecnica"
                          },
                          {
                            "title": "💵 Informar pagos",
                            "description": "Notificar pagos realizados o consultas urgentes de facturación",
                            "rowId": "urgencia-pagos"
                          }
                        ]
                      },
                      {
                        "title": "👩‍💻 Soporte Técnico",
                        "rows": [
                          {
                            "title": "🔌 Integraciones",
                            "description": "Ayuda con reconexion de Whatsapp ",
                            "rowId": "agente-integraciones"
                          }
                        ]
                      },
                      {
                        "title": "📅 Agendar una cita",
                        "rows": [
                          {
                            "title": "🗓️ Solicitar una reunión",
                            "description": "Coordiná una cita con nuestro equipo",
                            "rowId": "cita-solicitar"
                          }
                        ]
                      },
                      {
                        "title": "Nuestros agentes, ¡solicitá tu demo! 🚀",
                        "rows": [
                          {
                            "title": "🏡 Bot Inmobiliario",
                            "description": "Gestioná alquileres, ventas y consultas",
                            "rowId": "bot_inmobiliario"
                          },
                          {
                            "title": "🛒 Bot para Despensas",
                            "description": "Automatizá pedidos y atención de tu tienda",
                            "rowId": "bot_despensa"
                          },
                          {
                            "title": "🛵 Bot de Delivery",
                            "description": "Tomá pedidos y gestioná envíos en WhatsApp",
                            "rowId": "bot_delivery"
                          },
                          {
                            "title": "📅 Agendador de Citas",
                            "description": "Organizá turnos con recordatorios automáticos",
                            "rowId": "bot_agendador"
                          }
                        ]
                      }
                    ],
                    "footerText": "💼 Expertos en automatización WhatsApp"
                  }
                }
              },
              "messageType": "listResponseMessage",
              "messageTimestamp": 1747789831,
              "instanceId": "588f50d5-9323-4ec2-a701-6019611508c0",
              "source": "android"
            },
            "destination": "https://n8n.innovasoftpro.dev/webhook/qeva",
            "date_time": "2025-05-20T22:10:31.851Z",
            "sender": "5492254596618@s.whatsapp.net",
            "server_url": "https://evo.innovasoftpro.dev",
            "apikey": "3463F236FF41-417E-8F0A-7F1D0F575FF9"
          },
          "webhookUrl": "https://n8n.innovasoftpro.dev/webhook/qeva",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "2kOn0Oz7c2uvczPK",
    "timezone": "America/Argentina/Buenos_Aires",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-05-22T20:52:51.824Z",
  "versionId": "66e96bfc-706c-4a0d-b27b-cf83fe155be1"
}