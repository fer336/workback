{
  "active": false,
  "connections": {
    "Workflow Input Trigger": {
      "main": [
        [
          {
            "node": "vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NocoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Promociones": {
      "main": [
        []
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "vars": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "Productos5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Productos5": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Promociones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-16T13:18:27.817Z",
  "id": "95iu7FwWHLs11Vkc",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "DESPENSA - Comidas",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "descripcion"
            },
            {
              "name": "Telefono"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -3980,
        1260
      ],
      "id": "cd606992-d34f-4299-bf73-ba69864f9fc1",
      "name": "Workflow Input Trigger"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pc1g3m0ih934pz9",
        "table": "mmc2qmh5d09oy85",
        "returnAll": true,
        "options": {
          "fields": []
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -2920,
        1380
      ],
      "id": "09c03fdd-4d0c-4258-9f9a-095956f09428",
      "name": "NocoDB",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "272539cb-ae4d-4110-8940-8d85d6088487",
              "name": "response",
              "value": "LISTA_ENVIADA",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -660,
        860
      ],
      "id": "e5ace295-b469-4971-b296-30a76ab8d976",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fd06524c-64b9-494c-b07c-866a083aed27",
              "leftValue": "={{ $json.productos }}",
              "rightValue": "null",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3120,
        1260
      ],
      "id": "ceb87ec7-d539-43f9-8ee2-f405ebeebdd1",
      "name": "If2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -2460,
        1260
      ],
      "id": "da07bcf7-a3de-4f1a-bc45-115d123c018e",
      "name": "Merge1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/interactive",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "header",
              "value": "={{ $json.header }}"
            },
            {
              "name": "body",
              "value": "={{ $json.body }}"
            },
            {
              "name": "footer",
              "value": "={{ $json.footer }}"
            },
            {
              "name": "action",
              "value": "={{ $json.action }}"
            },
            {
              "name": "type",
              "value": "={{ $json.type }}"
            },
            {
              "name": "to",
              "value": "={{ $json.to }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1800,
        1040
      ],
      "id": "6b081d85-0b2e-46a3-8113-a2dfdec6d575",
      "name": "Promociones"
    },
    {
      "parameters": {
        "fieldToSplitOut": "Producto, Descripcion, Precio",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2700,
        1380
      ],
      "id": "3692ddbe-056a-43dd-8905-d5eab3348b0a",
      "name": "Split Out"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6e46f8fb-879f-4d37-b5f9-cfdf1177e673",
              "name": "descripcion",
              "value": "={{ $json.descripcion }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3780,
        1260
      ],
      "id": "03e94fe2-63e8-48b3-80a4-decf65d95c04",
      "name": "vars"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "=Promociones",
        "key": "=promo",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3560,
        1260
      ],
      "id": "aa6b60e6-fe0d-4b7f-b47a-775510540ce1",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a36ae4f2-54a0-4d2d-b58e-1a8c013faf22",
              "name": "productos",
              "value": "={{ $json.Promociones }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3340,
        1260
      ],
      "id": "809975b1-37a1-4ca1-bf78-2bd7ed726684",
      "name": "Productos5",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Teléfono dinámico del cliente\nconst remoteJid = $('Workflow Input Trigger').first().json.Telefono || \"\";\n\n// Función para asignar emojis basados en el tipo de comida\nfunction asignarEmojiComida(nombre) {\n  const nombreLower = nombre.toLowerCase();\n  \n  // Empanadas y tartas\n  if (nombreLower.includes('empanada')) return '🥟';\n  if (nombreLower.includes('tarta')) return '🥧';\n  \n  // Carnes\n  if (nombreLower.includes('asado') || nombreLower.includes('parrilla')) return '🥩';\n  if (nombreLower.includes('milanesa')) return '🍖';\n  if (nombreLower.includes('bife') || nombreLower.includes('carne')) return '🥩';\n  if (nombreLower.includes('pollo')) return '🍗';\n  if (nombreLower.includes('chorizo') || nombreLower.includes('morcilla')) return '🌭';\n  \n  // Pastas\n  if (nombreLower.includes('pasta') || nombreLower.includes('fideos') || nombreLower.includes('ñoquis') || nombreLower.includes('ravioles')) return '🍝';\n  if (nombreLower.includes('lasagna') || nombreLower.includes('lasaña')) return '🍝';\n  \n  // Pizza y similares\n  if (nombreLower.includes('pizza')) return '🍕';\n  if (nombreLower.includes('focaccia')) return '🍞';\n  \n  // Pescados y mariscos\n  if (nombreLower.includes('pescado') || nombreLower.includes('merluza') || nombreLower.includes('salmón')) return '🐟';\n  if (nombreLower.includes('camarón') || nombreLower.includes('langostino')) return '🦐';\n  \n  // Verduras y ensaladas\n  if (nombreLower.includes('ensalada')) return '🥗';\n  if (nombreLower.includes('verdura')) return '🥬';\n  \n  // Sopas\n  if (nombreLower.includes('sopa') || nombreLower.includes('caldo')) return '🍲';\n  \n  // Postres\n  if (nombreLower.includes('flan') || nombreLower.includes('postre')) return '🍮';\n  if (nombreLower.includes('helado')) return '🍨';\n  if (nombreLower.includes('torta')) return '🎂';\n  \n  // Bebidas\n  if (nombreLower.includes('jugo') || nombreLower.includes('agua')) return '🥤';\n  if (nombreLower.includes('café')) return '☕';\n  if (nombreLower.includes('gaseosa') || nombreLower.includes('coca')) return '🥤';\n  if (nombreLower.includes('vino')) return '🍷';\n  if (nombreLower.includes('cerveza')) return '🍺';\n  \n  // Sandwich y hamburguesas\n  if (nombreLower.includes('sandwich') || nombreLower.includes('sándwich')) return '🥪';\n  if (nombreLower.includes('hamburguesa')) return '🍔';\n  \n  // Arroz y guisos\n  if (nombreLower.includes('arroz')) return '🍚';\n  if (nombreLower.includes('guiso') || nombreLower.includes('estofado')) return '🍲';\n  \n  // Default para comida general\n  return '🍽️';\n}\n\n// Función para limpiar precio y formatear con separador de miles\nfunction formatearPrecio(precio) {\n  // Convertir a string y limpiar\n  let precioLimpio = precio.toString().replace(/[^\\d]/g, '');\n  \n  // Si es solo número, formatear con separador de miles\n  if (precioLimpio && !isNaN(precioLimpio)) {\n    const num = parseInt(precioLimpio);\n    return `$${num.toLocaleString('es-AR')}`;\n  }\n  \n  // Si ya tiene formato, devolverlo\n  return precio.toString();\n}\n\n// Función para categorizar productos por tipo\nfunction categorizarProducto(nombre) {\n  const nombreLower = nombre.toLowerCase();\n  \n  if (nombreLower.includes('sopa') || nombreLower.includes('caldo') || nombreLower.includes('guiso')) {\n    return 'sopas';\n  }\n  if (nombreLower.includes('pasta') || nombreLower.includes('fideos') || nombreLower.includes('ñoquis') || nombreLower.includes('ravioles')) {\n    return 'pastas';\n  }\n  if (nombreLower.includes('carne') || nombreLower.includes('pollo') || nombreLower.includes('milanesa') || nombreLower.includes('asado')) {\n    return 'carnes';\n  }\n  if (nombreLower.includes('tarta') || nombreLower.includes('empanada')) {\n    return 'tartas';\n  }\n  if (nombreLower.includes('postre') || nombreLower.includes('flan') || nombreLower.includes('torta')) {\n    return 'postres';\n  }\n  \n  return 'otros';\n}\n\n// Obtener datos de todos los elementos del nodo Limit1\nconst limitData = $input.all();\n\n// Crear objetos para almacenar productos por categoría\nconst productosPorCategoria = {\n  sopas: [],\n  pastas: [],\n  carnes: [],\n  tartas: [],\n  postres: [],\n  otros: []\n};\n\n// Procesar cada item del limit\nlimitData.forEach((item, index) => {\n  if (item.json && item.json.Producto) {\n    const nombre = item.json.Producto;\n    const descripcion = item.json.Descripcion || \"\";\n    const precio = item.json.Precio || \"0\";\n    const categoria = categorizarProducto(nombre);\n    \n    productosPorCategoria[categoria].push({\n      id: `menu_${index + 1}`,\n      nombre,\n      descripcion,\n      precio\n    });\n  }\n});\n\n// Crear secciones organizadas por categoría\nconst sections = [];\n\n// Sopas y caldos\nif (productosPorCategoria.sopas.length > 0) {\n  sections.push({\n    title: \"🍲 SOPAS Y CALDOS\",\n    rows: productosPorCategoria.sopas.map(prod => ({\n      id: prod.id,\n      title: `${asignarEmojiComida(prod.nombre)} ${prod.nombre}`,\n      description: `${prod.descripcion}${prod.descripcion ? ' • ' : ''}💰 ${formatearPrecio(prod.precio)}`\n    }))\n  });\n}\n\n// Pastas caseras\nif (productosPorCategoria.pastas.length > 0) {\n  sections.push({\n    title: \"🍝 PASTAS CASERAS\",\n    rows: productosPorCategoria.pastas.map(prod => ({\n      id: prod.id,\n      title: `${asignarEmojiComida(prod.nombre)} ${prod.nombre}`,\n      description: `${prod.descripcion}${prod.descripcion ? ' • ' : ''}💰 ${formatearPrecio(prod.precio)}`\n    }))\n  });\n}\n\n// Carnes\nif (productosPorCategoria.carnes.length > 0) {\n  sections.push({\n    title: \"🥩 CARNES\",\n    rows: productosPorCategoria.carnes.map(prod => ({\n      id: prod.id,\n      title: `${asignarEmojiComida(prod.nombre)} ${prod.nombre}`,\n      description: `${prod.descripcion}${prod.descripcion ? ' • ' : ''}💰 ${formatearPrecio(prod.precio)}`\n    }))\n  });\n}\n\n// Tartas y empanadas\nif (productosPorCategoria.tartas.length > 0) {\n  sections.push({\n    title: \"🥧 TARTAS Y EMPANADAS\",\n    rows: productosPorCategoria.tartas.map(prod => ({\n      id: prod.id,\n      title: `${asignarEmojiComida(prod.nombre)} ${prod.nombre}`,\n      description: `${prod.descripcion}${prod.descripcion ? ' • ' : ''}💰 ${formatearPrecio(prod.precio)}`\n    }))\n  });\n}\n\n// Postres\nif (productosPorCategoria.postres.length > 0) {\n  sections.push({\n    title: \"🍮 POSTRES\",\n    rows: productosPorCategoria.postres.map(prod => ({\n      id: prod.id,\n      title: `${asignarEmojiComida(prod.nombre)} ${prod.nombre}`,\n      description: `${prod.descripcion}${prod.descripcion ? ' • ' : ''}💰 ${formatearPrecio(prod.precio)}`\n    }))\n  });\n}\n\n// Otros platos\nif (productosPorCategoria.otros.length > 0) {\n  sections.push({\n    title: \"🍽️ OTROS PLATOS\",\n    rows: productosPorCategoria.otros.map(prod => ({\n      id: prod.id,\n      title: `${asignarEmojiComida(prod.nombre)} ${prod.nombre}`,\n      description: `${prod.descripcion}${prod.descripcion ? ' • ' : ''}💰 ${formatearPrecio(prod.precio)}`\n    }))\n  });\n}\n\n// Si no hay categorías con productos, crear una sección general\nif (sections.length === 0) {\n  const rows = [];\n  limitData.forEach((item, index) => {\n    if (item.json && item.json.Producto) {\n      const nombre = item.json.Producto;\n      const descripcion = item.json.Descripcion || \"\";\n      const precio = item.json.Precio || \"0\";\n      const emojiComida = asignarEmojiComida(nombre);\n      \n      rows.push({\n        id: `menu_${index + 1}`,\n        title: `${emojiComida} ${nombre}`,\n        description: `${descripcion}${descripcion ? ' • ' : ''}💰 ${formatearPrecio(precio)}`\n      });\n    }\n  });\n  \n  sections.push({\n    title: \"🥶 MENÚ ANTIFRÍO ESPECIAL 🥶\",\n    rows: rows\n  });\n}\n\nconst telefonoContacto = \"2235246842\";\nconst direccion = \"Bolívar y Neuquén\";\n\n// Obtener hora actual para personalizar el saludo\nconst hora = new Date().getHours();\nlet saludo = \"¡Buen día! ☀️\";\nif (hora >= 12 && hora < 20) saludo = \"¡Buenas tardes! 🌤️\";\nif (hora >= 20 || hora < 6) saludo = \"¡Buenas noches! 🌙\";\n\nconst requestBody = {\n  header: { \n    text: \"🔥 MENÚ ANTIFRÍO • MENOS DE $5000 🔥\" \n  },\n  body: { \n    text: `${saludo}\n\n🔥 *¡Menú especial para estos días fríos!*\n🍽️ Comida casera y reconfortante\n✨ Seleccioná tu plato favorito y escribí la cantidad` \n  },\n  footer: { \n    text: `📱 ${telefonoContacto} • 📍 ${direccion}\n🚚 Delivery disponible • 🏪 Retiro sin cargo` \n  },\n  action: {\n    list: {\n      sections,\n      label: \"🍽️ VER MENÚ COMPLETO\"\n    }\n  },\n  type: \"list\",\n  to: remoteJid\n};\n\nreturn [{ json: requestBody }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2020,
        1040
      ],
      "id": "4067b2c2-28fd-45e1-8a13-b9f13942f330",
      "name": "Code2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "272539cb-ae4d-4110-8940-8d85d6088487",
              "name": "response",
              "value": "={{ JSON.stringify($json) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1400,
        1260
      ],
      "id": "51dc3ea4-795b-4e56-b260-48651fe544ff",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f1dd1614-8244-4f9e-8ceb-b8b4470c5868",
              "name": "msg",
              "value": "={{ JSON.stringify($json.productos) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1960,
        1260
      ],
      "id": "7f1417c0-f942-4f9f-9e44-7df9e23f2297",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "jsCode": "const productos = items.map(i => i.json);\n\nreturn [\n  {\n    json: {\n      productos\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2200,
        1260
      ],
      "id": "235bb346-c3fb-4f5d-8fc8-d9caa78a8a44",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2140,
        1460
      ],
      "id": "fa5ee685-51a1-4fe2-b275-2a8b18f540a4",
      "name": "Convert to File"
    }
  ],
  "pinData": {
    "Workflow Input Trigger": [
      {
        "json": {
          "descripcion": "pastel de papa o guiso de lentejas",
          "Telefono": "5492254423359"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-19T21:20:51.336Z",
      "updatedAt": "2025-01-19T21:20:51.336Z",
      "id": "dgrS6et84MZNe4W0",
      "name": "POCHO"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-06-13T01:23:17.169Z",
  "versionId": "15666b5d-c90f-4f79-8a69-1a0b45f84502"
}