{
  "active": true,
  "connections": {
    "Segmentos": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1,2s": {
      "main": [
        [
          {
            "node": "Texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "1,2s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "replace": {
      "main": [
        []
      ]
    },
    "QR": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Crypto": {
      "main": [
        [
          {
            "node": "InsertarCliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format JSON": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "If123",
            "type": "main",
            "index": 0
          },
          {
            "node": "vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "camposiniciales",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Crypto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "From Me2": {
      "main": [
        [
          {
            "node": "From Me3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "From Me3": {
      "main": [
        [],
        [
          {
            "node": "getClientes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Audio Memory": {
      "main": [
        [
          {
            "node": "Return Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Memory 2": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 10s": {
      "main": [
        [
          {
            "node": "Get Memory 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI2": {
      "main": [
        [
          {
            "node": "Audio Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tiempo1": {
      "main": [
        [
          {
            "node": "Escribiendo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return Redis1": {
      "main": [
        [
          {
            "node": "Tiempo1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InsertCliente": {
      "main": [
        []
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Compara Get Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compara igualdad de memorias": {
      "main": [
        [
          {
            "node": "Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compara Get Memory": {
      "main": [
        [
          {
            "node": "Compara igualdad de memorias",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Delete": {
      "main": [
        [
          {
            "node": "msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "OpenAI2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        []
      ]
    },
    "ubicacion": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Respuesta a ChatWoot2": {
      "main": [
        []
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "From Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "camposiniciales": {
      "main": [
        [
          {
            "node": "Message Type1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis3": {
      "main": [
        []
      ]
    },
    "Chatwoot msg": {
      "main": [
        []
      ]
    },
    "InsertarCliente": {
      "main": [
        [
          {
            "node": "camposiniciales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getClientes": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calcular_total": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Escribiendo": {
      "main": [
        [
          {
            "node": "Wait 10s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buscar promocion": {
      "ai_tool": [
        []
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Pocho",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Pocho": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "apilaTexto": {
      "main": [
        [
          {
            "node": "Return Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [],
        []
      ]
    },
    "Texto": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "promociones": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "apilaTexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete1": {
      "main": [
        [
          {
            "node": "msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [],
        [],
        [
          {
            "node": "Separa datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nombre1": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Delete1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Pocho",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "insertar_pedido": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "promociones1": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "buscar_productos": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "buscar_comida": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "nombre": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Separa datos": {
      "main": [
        [
          {
            "node": "Segmentos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "msg": {
      "main": [
        [
          {
            "node": "Pocho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-01-21T21:23:44.880Z",
  "id": "F1n2h96SynW3aHim",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "DESPENSA - MASTER",
  "nodes": [
    {
      "parameters": {
        "fieldToSplitOut": "text",
        "options": {
          "destinationFieldName": "msg"
        }
      },
      "id": "4b57d0e1-d761-413d-b6eb-b74fd6adfce4",
      "name": "Segmentos",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        6540,
        340
      ]
    },
    {
      "parameters": {
        "amount": "=1"
      },
      "id": "4f3df646-1ec7-4ab6-8d6f-3e950f9e1769",
      "name": "1,2s",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        6980,
        265
      ],
      "webhookId": "8a810ad6-4ecf-4781-aed8-7f2b295770dc"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "1b7ca230-f1a6-42ae-9856-2a35b85136e7",
      "name": "Loop Over Items1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        6760,
        340
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d04d69d-cb9c-41be-a44a-95fac3c059f3",
              "name": "text",
              "value": "={{ ($json.output[0]?.text || $json.output?.text || '').replace(/\\*\\*(.*?)\\*\\*/g, '*$1*').replace(/###\\s+/g, '').replace(/:/g, '') }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "0f259155-9566-43d3-bded-1b5fa69c8f30",
      "name": "replace",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6240,
        620
      ]
    },
    {
      "parameters": {
        "name": "qr_pagos",
        "description": "Llamaras a esta herramienta cuando el usuario qiuera pagar por QR",
        "workflowId": {
          "__rl": true,
          "value": "tdm8dLqaR7idL6Hm",
          "mode": "list",
          "cachedResultName": "DESPENSA - QR"
        },
        "fields": {
          "values": [
            {
              "name": "telefono",
              "stringValue": "={{ $('camposiniciales').first().json.telefonoCliente }}"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"banco\":\"Modo\"\n}"
      },
      "id": "f291dc28-d8f2-42c4-8993-2b26135c114e",
      "name": "QR",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        5300,
        560
      ]
    },
    {
      "parameters": {
        "action": "generate"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        640,
        490
      ],
      "id": "2278b5e6-b903-4a81-8123-1d6bf9ba002f",
      "name": "Crypto"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e02fa309-efdc-4424-a35e-232970a746cf",
              "leftValue": "={{ $json.Telefono }}",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        420,
        340
      ],
      "id": "25072683-00b4-4e9c-bc4c-30fdee5999a4",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "94746291-c0f3-44f3-b635-1fe696d7d74e",
              "leftValue": "={{ $('Webhook').item.json.body.messages[0].from_me }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3d486f6e-0858-42ac-9723-148f75b57c7e",
      "name": "From Me2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -680,
        340
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5af9eed6-93bd-4b03-879e-4b4404da1737",
              "leftValue": "={{ $json.ETIQUETA }}",
              "rightValue": "bot_off",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "8ef2017a-ed74-46cd-88b5-e73a563604b7",
      "name": "From Me3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -20,
        340
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0cb14635-2673-408e-86db-ce9e0373674b",
                    "leftValue": "={{ $json.tipoMensaje }}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.tipoMensaje }}",
                    "rightValue": "voice",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9d6039bf-d7d0-489c-8f18-691901f06a47"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "60065893-74f7-4b64-bc1a-d891202efa78",
                    "leftValue": "={{ $json.tipoMensaje }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3f726e15-8674-47a2-a924-8a181db57e0a",
                    "leftValue": "={{ $json.tipoMensaje }}",
                    "rightValue": "action",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "reaccion"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "69ad25f9-c335-489b-9301-b3f4075020d8",
                    "leftValue": "={{ $json.tipoMensaje }}",
                    "rightValue": "location",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "locaciton"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dda5054b-9566-4520-90df-d0bbe8c20460",
                    "leftValue": "={{ $('Webhook').item.json.body.messages[0].reply.type }}",
                    "rightValue": "=list_reply",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "70263635-2977-4d7b-ad37-f39182a4d96b",
      "name": "Message Type1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1300,
        300
      ]
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('camposiniciales').item.json.telefonoCliente }}",
        "messageData": "={{ $json.text }}",
        "tail": true
      },
      "id": "8466c656-0b5e-4299-af85-8e9b88eb4996",
      "name": "Audio Memory",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2460,
        360
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Messages",
        "key": "={{ $('camposiniciales').first().json.telefonoCliente }}",
        "options": {}
      },
      "id": "e940a660-fbc8-4312-a111-37880b7dc9f5",
      "name": "Get Memory 2",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3500,
        340
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "amount": "={{ $('Tiempo1').item.json.responseDelay /1000 }}"
      },
      "id": "58545546-131a-453e-ac98-ca4140fc0b4d",
      "name": "Wait 10s",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3280,
        340
      ],
      "webhookId": "241554e1-7fe9-4c6d-9c49-69ec498c8481"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.7,
      "position": [
        2180,
        440
      ],
      "id": "6c280d4c-edb9-42a1-af37-5fab90f8bc89",
      "name": "OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "UfA35dBDzEebw8zR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d2fb2361-9a41-4099-8f53-cfb8be77d95a",
              "name": "content",
              "value": "={{ $('camposiniciales').item.json.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "573aa795-1a68-4b65-b968-3bde0ec81f65",
      "name": "Edit Fields4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1740,
        420
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtener historial de mensajes desde Redis\nconst redisMessages = $input.first().json.Redis1 || [];\n// Extraer el último mensaje recibido, asegurando que sea un string válido\nconst userMessage = Array.isArray(redisMessages) && redisMessages.length > 0\n  ? String(redisMessages[redisMessages.length - 1]).trim().toLowerCase()\n  : \"\";\n// Obtener la cantidad de mensajes en cola desde Redis en los últimos 6 segundos\nconst queueLength = parseInt($json.queueLength || \"0\", 10);\n\n// Lista específica de palabras que tendrán un delay de 1 segundo\nconst fastResponseWords = [\"hola\", \"ok\", \"dale\", \"sí\", \"no\", \"confirmo\", \"modificar\", \"cancelar\"];\n\n// 🚀 **Lógica del delay**\nlet responseDelay = 5000; // ⏳ Por defecto, 9 segundos\n\n// Verificar si el mensaje completo es exactamente una de las palabras especificadas\nif (fastResponseWords.includes(userMessage)) {\n  responseDelay = 1000; // 1 segundo para las palabras específicas\n}\n\nreturn { json: { responseDelay } };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2840,
        340
      ],
      "id": "ff83a77e-d861-4568-9c5a-afc928feab9e",
      "name": "Tiempo1"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Redis1",
        "key": "={{ $('camposiniciales').item.json.telefonoCliente }}",
        "options": {}
      },
      "id": "fc6daaf9-df5c-4480-b466-434405b1c20c",
      "name": "Return Redis1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2680,
        360
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1WxPxhtY9u7M7aRDM9QOsADIrEKXFgpYNboGXHLv_W2E",
          "mode": "list",
          "cachedResultName": "Clientes",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1WxPxhtY9u7M7aRDM9QOsADIrEKXFgpYNboGXHLv_W2E/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1552665435,
          "mode": "list",
          "cachedResultName": "Clientes",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1WxPxhtY9u7M7aRDM9QOsADIrEKXFgpYNboGXHLv_W2E/edit#gid=1552665435"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Nombre": "={{ $('camposiniciales').item.json.meta.nombreCliente }}",
            "Telefono": "={{ $('camposiniciales').item.json.meta.telefonoCliente }}",
            "idMensaje": "={{ $json.data }}",
            "TimeStamp": "={{ $('Unificados').item.json.meta.tiempo }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Nombre",
              "displayName": "Nombre",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefono",
              "displayName": "Telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "idMensaje",
              "displayName": "idMensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "nombre_real",
              "displayName": "nombre_real",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Correo",
              "displayName": "Correo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "TimeStamp",
              "displayName": "TimeStamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -900,
        1680
      ],
      "id": "61be8f50-d310-4673-b68e-5467ef07f6dd",
      "name": "InsertCliente",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "yxBoR5sUs8UyR9Sc",
          "name": "Despensa"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "86ff282a-3ede-4417-98c1-0d10858bc5dc",
              "name": "Redis1",
              "value": "={{ $('Return Redis1').first().json.Redis1 }}",
              "type": "string"
            },
            {
              "id": "3cd6e8a1-98ef-4abb-9490-fb7946365cfb",
              "name": "Redis2",
              "value": "={{ $json.Messages }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "fe0ea543-e3eb-4bc1-82c3-f6bd3fc8c680",
      "name": "Redis",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3720,
        340
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const data = $item(0).$node[\"Compara Get Memory\"].json[\"Redis2\"];\n\n// Verifica si data es un array directamente\nlet array;\n\nif (Array.isArray(data)) {\n    array = data;\n} else {\n    try {\n        // Intenta parsear si es una cadena JSON válida\n        array = JSON.parse(data);\n    } catch (error) {\n        // Si no es JSON, considera que es un texto plano\n        array = [data];\n    }\n}\n\n// Une los elementos del array en un string\nconst message_completo = array.join(\" , \");\n\nreturn [{ json: { message_completo } }];\n"
      },
      "id": "3bea3d5f-2ca6-4bbe-84f1-6650b8aef212",
      "name": "Compara igualdad de memorias",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4080,
        260
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d5a342e9-585b-42ea-be44-644adae10199",
              "leftValue": "={{ $json.Redis1 }}",
              "rightValue": "={{ $json.Redis2 }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "cd5e6704-3386-4c3f-ba26-040965ebbd56",
      "name": "Compara Get Memory",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3940,
        340
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('camposiniciales').first().json.telefonoCliente }}"
      },
      "id": "e5fd32ef-52be-4556-8174-d6b34b62d58f",
      "name": "Delete",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4420,
        140
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.content }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1960,
        440
      ],
      "id": "4aa68eaa-0e83-4210-b702-0ff970201375",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": 0
            },
            {
              "name": "body",
              "value": "={{ $('Loop Over Items1').item.json.msg }}"
            },
            {
              "name": "to",
              "value": "={{ $('camposiniciales').item.json.meta.telefonoCliente }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -900,
        2440
      ],
      "id": "2c9c27de-7b86-4e3d-a2cd-4695c9b2896e",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "name": "ubicacion",
        "description": "llamaras a esta herramienta cuando el usuario quiera saber la ubicacion ",
        "workflowId": {
          "__rl": true,
          "value": "XoB1Q17cG94Zf3s0",
          "mode": "list",
          "cachedResultName": "DESPENSA - Ubicacion"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "Telefono": "={{ $('camposiniciales').first().json.telefonoCliente }}"
          },
          "matchingColumns": [
            "Telefono"
          ],
          "schema": [
            {
              "id": "Telefono",
              "displayName": "Telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        5540,
        560
      ],
      "id": "1d933774-cc4e-47c9-9bca-8a6ff86e7b9b",
      "name": "ubicacion"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://chat.rshtech.com.py/api/v1/accounts/3/conversations/{{ $('camposiniciales').first().json.conversation_id }}/messages",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $('Loop Over Items1').item.json.msg }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Api-Access-Token",
              "value": "PWT8Rjk9ZGEqVzGoWYmaofFj"
            }
          ]
        },
        "options": {}
      },
      "id": "0a196576-e9e5-437e-b98e-5b82e2bb3170",
      "name": "Respuesta a ChatWoot2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7200,
        340
      ],
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "lodepocho",
        "options": {}
      },
      "id": "3116d3c7-3cc7-44e0-ad17-888667eac5a0",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -900,
        340
      ],
      "webhookId": "3ba6ce2e-1b02-4b06-8edd-9c60afb2db89"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f9ecf2fc-da2c-4f44-897a-5dc0a2f2f379",
              "name": "telefonoCliente",
              "value": "={{ $('Webhook').item.json.body.messages[0].from }}",
              "type": "string"
            },
            {
              "id": "a019046c-3b5a-4fd0-a497-de55cb2178ea",
              "name": "telefonoChat",
              "value": "={{ $('Webhook').item.json.body.messages[0].chat_id }}",
              "type": "string"
            },
            {
              "id": "dab7ca54-c3d2-4a36-a9ca-a0ebbd375ef5",
              "name": "nombreCliente",
              "value": "={{ $('Webhook').item.json.body.messages[0].from_name }}",
              "type": "string"
            },
            {
              "id": "cc7dcfe1-8ad7-4fe8-93ec-8f643c7d08c7",
              "name": "tipoMensaje",
              "value": "={{ $('Webhook').item.json.body.messages[0].type }}",
              "type": "string"
            },
            {
              "id": "2dfc64f4-b222-4ea7-b095-fdd96d9fcb95",
              "name": "idMensaje",
              "value": "={{ $('Webhook').item?.json?.body?.messages[0]?.device_id || $('Webhook').item.json.body.messages[0].id }}",
              "type": "string"
            },
            {
              "id": "07c65c0d-9662-41b0-b872-056a5d643f8c",
              "name": "content.label",
              "value": "={{ $('Webhook').item?.json?.body?.labels || [''] }}",
              "type": "string"
            },
            {
              "id": "80c6b537-8c37-4a54-b928-913c4bc0e13f",
              "name": "accountId",
              "value": "={{ $json?.body?.conversation?.messages[0]?.account_id || null }}",
              "type": "string"
            },
            {
              "id": "30069704-a1aa-4539-afcd-67eb7c405869",
              "name": "inboxId",
              "value": "={{ $('Webhook').item?.json?.body?.inbox?.id || null  }}",
              "type": "string"
            },
            {
              "id": "a2148d2c-c4ac-4826-be6f-fa686b90fae4",
              "name": "inboxIdentifier",
              "value": "SUqwz3QWbq6UgbEF7zhifEv5",
              "type": "string"
            },
            {
              "id": "7d850d26-967b-4ba4-aaa2-3f3625032984",
              "name": "chatwootUrl",
              "value": "https://chat.rshtech.com.py",
              "type": "string"
            },
            {
              "id": "e0f88461-1bd8-4fd9-a76d-4b431e08dae1",
              "name": "chatwootToken",
              "value": "PWT8Rjk9ZGEqVzGoWYmaofFj",
              "type": "string"
            },
            {
              "id": "ecb06d4f-a572-4944-b855-85950e49b995",
              "name": "source_id",
              "value": "={{ $('Webhook').item?.json?.body?.conversation?.messages[0]?.conversation?.contact_inbox?.source_id || null  }}",
              "type": "string"
            },
            {
              "id": "2c5e299b-1d0f-4407-9e38-30dfa8e1a22a",
              "name": "phone_number",
              "value": "={{ $('Webhook').item?.json?.body?.conversation?.meta?.sender?.phone_number || null  }}",
              "type": "string"
            },
            {
              "id": "ffd7c75f-4166-41b3-baf9-2e05533e2646",
              "name": "content",
              "value": "={{ $('Webhook').item?.json?.body?.conversation?.messages[0]?.content || $('Webhook').item?.json?.body?.messages[0]?.text?.body || $('Webhook').item?.json?.body?.messages[0]?.action?.emoji || $('Webhook').item.json.body.messages[0].voice.link }}",
              "type": "string"
            },
            {
              "id": "b7613885-c5d8-4b6a-81ec-8de7e6740faf",
              "name": "location",
              "value": "={\n  \"location\": {\n    \"latitud\":{{ $('From Me2').item.json.body.messages[0].location.latitude }},\n    \"longitud\":{{ $('From Me2').item.json.body.messages[0].location.longitude }}\n  }\n}",
              "type": "object"
            },
            {
              "id": "55b12a0f-3689-4f1b-9fdd-a817e5878938",
              "name": "body.messages[0].reply.list_reply.id",
              "value": "={{ $('From Me2').item.json.body.messages[0].reply.list_reply.id }}",
              "type": "array"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "id": "11ebac25-3982-452b-a4e2-ec8dd616d6cf",
      "name": "camposiniciales",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1080,
        340
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "ETIQUETA",
        "key": "=+{{ $('Webhook').item.json.body.messages[0].from }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -220,
        100
      ],
      "id": "a3410502-8bbf-4378-97d7-f0bd08d8d154",
      "name": "Redis3",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "BHLBMgDUtwxVaS39",
          "mode": "list",
          "cachedResultName": "DESPENSA Chatwoot msg"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "content": "={{ $json?.body?.messages[0]?.text?.body || $('Webhook').item?.json?.body?.messages[0]?.voice?.link || $json.body.messages[0].location }}",
            "nombreCliente": "={{ $json?.body?.messages[0]?.from_name || $json?.body?.messages[0]?.chat_name || null }}",
            "telefonoCliente": "={{ $('Webhook').item.json.body.messages[0].from }}",
            "inboxIdentifier": "=SUqwz3QWbq6UgbEF7zhifEv5",
            "chatwootToken": "=PWT8Rjk9ZGEqVzGoWYmaofFj",
            "chatwootUrl": "=https://chat.rshtech.com.py",
            "typeFile": "={{ $json.body.messages[0].type }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "nombreCliente",
              "displayName": "nombreCliente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "telefonoCliente",
              "displayName": "telefonoCliente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "inboxIdentifier",
              "displayName": "inboxIdentifier",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "chatwootUrl",
              "displayName": "chatwootUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "chatwootToken",
              "displayName": "chatwootToken",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "typeFile",
              "displayName": "typeFile",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": true,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -440,
        200
      ],
      "id": "c79e973c-a7a4-4883-b339-50bcc4aa441b",
      "name": "Chatwoot msg",
      "disabled": true
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "pc1g3m0ih934pz9",
        "table": "mtxmanzpy3a6oz8",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Nombre",
              "fieldValue": "={{ $('Webhook').item.json.body.messages[0].from_name }}"
            },
            {
              "fieldName": "Telefono",
              "fieldValue": "={{ $('Webhook').item.json.body.messages[0].chat_id.replace(/\\D/g, '') }}"
            },
            {
              "fieldName": "IdMensaje",
              "fieldValue": "={{ $json.data }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        860,
        490
      ],
      "id": "8f41355b-128e-48f9-b3e7-de0fb5117336",
      "name": "InsertarCliente",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pc1g3m0ih934pz9",
        "table": "mtxmanzpy3a6oz8",
        "returnAll": true,
        "options": {
          "where": "=(Telefono,eq,{{ $('Webhook').item.json.body.messages[0].chat_id.replace(/\\D/g, '') }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        200,
        340
      ],
      "id": "a2f8516c-9fa2-4ca8-b89c-17c8b91d1fec",
      "name": "getClientes",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "lo_de_pocho",
          "mode": "list",
          "cachedResultName": "lo_de_pocho"
        },
        "deleteCommand": "delete",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -900,
        900
      ],
      "id": "1c16f80d-a6c7-4d74-a995-1ee8f1955371",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "E1mi81N6Tmr5cHS5",
          "name": "GENERICO"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": 3
            },
            {
              "name": "to",
              "value": "5492234245220"
            },
            {
              "name": "body",
              "value": "={{ $json.msg }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -900,
        1160
      ],
      "id": "c084c414-b4ab-434d-b95c-f053dd500001",
      "name": "HTTP Request1"
    },
    {
      "parameters": {},
      "id": "68c4924d-8864-4951-9737-e7478fc50f8e",
      "name": "calcular_total",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        5660,
        560
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://gate.whapi.cloud/presences/{{ $('camposiniciales').first().json.Telefono }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "=Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "presence",
              "value": "typing"
            },
            {
              "name": "delay",
              "value": "={{1200}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3060,
        340
      ],
      "id": "949cbf10-b430-4c20-a3ef-0fb306a491ed",
      "name": "Escribiendo",
      "disabled": true
    },
    {
      "parameters": {
        "name": "buscar_promo"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        -900,
        1940
      ],
      "id": "d96b0227-3f64-4fb2-8f53-17b70b1fbc33",
      "name": "Buscar promocion",
      "disabled": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        4740,
        560
      ],
      "id": "7a2f3ab1-2fe2-4e2b-826e-18e1f279f7f2",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "9O8uUWkp7h4KwsVD",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"How does AI work?\"\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -900,
        1420
      ],
      "id": "31bb78ef-ea30-4859-93ed-6ce4236a8775",
      "name": "HTTP Request5"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message_completo }}",
        "options": {
          "systemMessage": "=# Pocho – Asistente Virtual (Optimizado para Gemini 2.5 Flash en n8n)\n\nHOY ES: {{ $now.format('yyyy-MM-dd') }}\n\n## Identidad\n- Nombre: **Pocho**, asistente de Lo de Pocho (Neuquén 2098, Mar del Plata)\n- Estilo: Respuestas cortas, argentinas, prácticas\n- Mínimo para delivery: $30.000\n- Objetivo: Ayudar a completar pedidos y generar ventas\n\n## REGLAS CRÍTICAS\n1. SIEMPRE usar herramientas para cada acción\n2. SIEMPRE usar `buscar_productos` para TODA consulta de productos\n3. NUNCA responder de memoria sobre productos, precios o stock\n4. NUNCA asumir que usuario quiere comprar solo porque pregunta - debe seleccionar específicamente\n5. SIEMPRE tratar al cliente por su nombre real: `{{ $('getClientes').item.json.nombre_real }}`\n6. NUNCA pedir datos ya almacenados en la base de datos\n7. OBLIGATORIO usar `insert_name_mail` para actualizar datos del cliente\n8. NUNCA mencionar códigos técnicos (promo_XXXX o cod_XXXX) - solo nombres y precios\n9. NUNCA procesar comprobantes - dirigir a Anto (+5492234245220)\n10. Cuando se ejecute `promo_productos` o `buscar_productos` → \"LISTA_ENVIADA\"\n11. SIEMPRE pedir confirmación antes de mostrar promociones durante la conversación\n12. **NUEVA REGLA CRÍTICA**: Si cliente pide productos sin seleccionar del menú, SIEMPRE explicar proceso correcto\n\n## Herramientas\n- `buscar_productos`: Para toda consulta de productos → \"LISTA_ENVIADA\"\n- `calcular_total`: Para sumar carrito\n- `verificar_elegibilidad_envio`: Confirma si pedido supera $30.000\n- `buscar_comida`: Para milanesas, sandwiches, buñuelos, tartas\n- `qr_pagos`: Genera QR según billetera → \"qr_enviado\"\n- `insertar_pedido`: Guarda pedido y genera código\n- `promo_productos`: Muestra promociones → \"LISTA_ENVIADA\"\n- `verificar_pedido_existente`: Verifica pedidos activos\n- `getClientes`: Obtiene datos del cliente\n- `insert_name_mail`: Actualiza datos del cliente\n\n## Bienvenida MEJORADA\n```\n¡Hola {{ $('getClientes').item.json.nombre_real }}! Bienvenido a lo de Pocho 👋\n\n📍 Estamos en Bolívar y Neuquén\n⏰ Abiertos hoy de 7am a 21.30hs\n\n🛒 **¿CÓMO FUNCIONA?**\n1️⃣ Te envío un menú con productos\n2️⃣ Vos SELECCIONÁS desde ese menú (tocando el producto)\n3️⃣ Me decís la cantidad\n4️⃣ Repetimos para cada producto que quieras\n\n¿Querés ver nuestras comidas del día? (Sí/No)\n```\n\nSi responde \"Sí\" → [EJECUTAR herramienta buscar_comida] → \"LISTA_ENVIADA\"\n\n## MANEJO DE PEDIDOS SIN SELECCIÓN (NUEVO)\n\n### Cuando cliente pide sin seleccionar del menú:\nSi el cliente escribe pidiendo productos sin haber seleccionado del menú enviado, responder SIEMPRE:\n\n```\n⚠️ {{ $('getClientes').item.json.nombre_real }}, para poder anotarte el pedido necesito que:\n\n1️⃣ SELECCIONES cada artículo desde el menú que te pasé\n2️⃣ Me digas la cantidad cuando te pregunte\n\nSin eso no puedo armar tu pedido. \n\n¿Volvemos a empezar? Te busco lo que necesitás:\n¿Qué producto querés ver primero?\n```\n\n### Si cliente insiste o envía lista completa sin seleccionar:\n```\n{{ $('getClientes').item.json.nombre_real }}, entiendo que querés pedir varias cosas, pero el sistema funciona así:\n\n📱 Tenés que TOCAR/SELECCIONAR cada producto del menú que te envío\n❌ No puedo anotar pedidos escritos a mano\n\nEmpecemos de a uno. ¿Qué producto te busco primero?\n```\n\n## Flujo de Selección y Pedido (REFORZADO)\n\n1. **Mostrar productos**:\n   - Ejecutar `buscar_productos` o `buscar_comida` → \"LISTA_ENVIADA\"\n   - Agregar SIEMPRE después: \n   ```\n   👆 Tocá/Seleccioná el producto que querés del menú que te envié\n   ```\n\n2. **Identificación de selección**:\n   - Si recibe mensaje con: \"Código: promo_XXXX\" → Ha elegido promoción\n   - Si recibe código \"cod_XXXX\" → Ha elegido producto regular\n   - Si NO recibe código → Aplicar MANEJO DE PEDIDOS SIN SELECCIÓN\n\n3. **Verificar pedido existente**:\n   - Ejecutar `verificar_pedido_existente`\n   - Si tiene pedido activo:\n     ```\n     Veo que ya tenés un pedido en curso. ¿Querés armar un pedido nuevo?\n     \n     Para cancelar el anterior, enviá mensaje a Anto al +5492234245220.\n     ```\n   - Si responde \"sí\" → continuar; si \"no\" → finalizar\n\n4. **OBLIGATORIO: Preguntar cantidad para CADA producto seleccionado**:\n   - \"¿Dale, cuántas necesitás?\"\n   - \"¿Cuántos te anoto?\"\n   - \"¿Qué cantidad querés llevar?\"\n   - ESPERAR respuesta con cantidad\n   - NUNCA asumir cantidad = 1\n\n5. **Añadir al carrito**:\n   - Confirmar: \"Perfecto, agregué [cantidad] [producto] a tu pedido\"\n   - Ejecutar herramienta para calcular subtotal si es necesario\n\n6. **SOLO DESPUÉS ofrecer más productos**:\n   - \"¿Querés algo más o preferís que pasemos a confirmar?\"\n   - Si dice \"sí\" → \"¿Qué producto te gustaría ver?\" \n     - Si menciona producto específico → `buscar_productos` → \"LISTA_ENVIADA\"\n     - Recordar: \"👆 Tocá/Seleccioná el producto que querés\"\n   - Si dice \"no\" → pasar a confirmación del pedido completo\n\n## REGLAS ADICIONALES PARA EVITAR CONFUSIÓN:\n- NUNCA enviar mensaje sobre \"más productos\" inmediatamente después de \"LISTA_ENVIADA\"\n- SIEMPRE esperar que usuario seleccione Y defina cantidad antes de ofrecer más\n- Completar TODO el proceso de UN producto antes de continuar\n- Si cliente menciona múltiples productos a la vez, responder:\n  ```\n  Veo que querés varias cosas. Vamos de a una así no nos confundimos.\n  ¿Cuál te busco primero?\n  ```\n\n## Tono y estilo\n- Amigable, educado y cordial\n- Claro y directo sobre el proceso\n- Sin \"che\", \"viste\", etc.\n- Frases como:\n  • \"Recordá seleccionar desde el menú\"\n  • \"Tocá el producto que querés\"\n  • \"Sin seleccionar no puedo anotarte nada\"\n- Emojis con moderación\n\n## Confirmación y cierre (sin cambios)\n[Mantener el resto del flujo igual desde el punto 5 del flujo original hasta el final]\n\n## Consultas de productos\nConsulta → `buscar_productos` → \"LISTA_ENVIADA\" → \"👆 Tocá/Seleccioná el producto que querés\"\n\n## Respuestas a otros temas\n- Temas no relacionados:\n  > \"Disculpame 🙏, solo puedo ayudarte con productos, precios, envíos y pagos. ¿Te doy una mano con la despensa? 🛒\"\n\n## FRASES CLAVE PARA REFORZAR EL PROCESO:\n- \"Necesito que selecciones desde el menú\"\n- \"Sin tocar el producto no puedo anotarte nada\"\n- \"El sistema funciona seleccionando del menú\"\n- \"Vamos de a un producto por vez\"\n- \"Primero seleccioná, después me decís cantidad\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        5280,
        280
      ],
      "id": "dbf21b06-d762-412b-b6ad-7d9966bcd5d7",
      "name": "Pocho"
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('camposiniciales').item.json.telefonoCliente }}",
        "messageData": "={{ $json?.content || $json.response }}",
        "tail": true
      },
      "id": "6073ceaa-ea69-4aa7-bf3d-1049aa7de22b",
      "name": "apilaTexto",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2360,
        -100
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "f06e3084-8cb9-4f87-ad09-c55455696615",
              "leftValue": "={{ $json?.output ||  JSON.stringify($json.output[0].text)   }}",
              "rightValue": "qr_enviado",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        5200,
        120
      ],
      "id": "fb8a394b-f78b-44c1-95ef-f00b33a200c6",
      "name": "If1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": "={{1}}"
            },
            {
              "name": "body",
              "value": "={{ $json.msg.replace(/\\n/g,'\\n').replace(/\\\"/g,'\\'') }}"
            },
            {
              "name": "to",
              "value": "={{ $('camposiniciales').first().json.telefonoCliente }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7200,
        260
      ],
      "id": "1347c2b6-663a-45d7-b21b-eff486ff5c50",
      "name": "Texto"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=follow_up:{{ $('camposiniciales').item.json.telefonoCliente }}",
        "value": "={{$now}}",
        "expire": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -900,
        2180
      ],
      "id": "403cc44f-9fbd-4f4d-9b8c-519a3473e6c1",
      "name": "Follow",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "fPuzUHak5Qv9RB8I",
          "mode": "list",
          "cachedResultName": "DESPENSA - verificar_elegibilidad_envio"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "location": "={{ $json.location.location }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "direccion",
              "displayName": "direccion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1760,
        760
      ],
      "id": "a3af08d7-a703-40a2-80a0-388a8aea6771",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "name": "promo_productos",
        "description": "Llama a esta herramienta siempre que un usuario quiera ver las promociones de productos",
        "workflowId": {
          "__rl": true,
          "value": "HAtUjKa7vn5tm7K1",
          "mode": "list",
          "cachedResultName": "DESPENSA - Promociones_productos"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "Telefono": "={{ $('camposiniciales').first().json.telefonoCliente }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "descripcion",
              "displayName": "descripcion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "Telefono",
              "displayName": "Telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "server",
              "displayName": "server",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "apikey",
              "displayName": "apikey",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "instance",
              "displayName": "instance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        6040,
        560
      ],
      "id": "989a1c4e-d65c-42fc-8b44-b04358238590",
      "name": "promociones"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        2060,
        -100
      ],
      "id": "fef8c5df-7343-44e1-895e-5bc34aaa0beb",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('camposiniciales').first().json.telefonoCliente }}"
      },
      "id": "e093715d-b824-419c-80ac-e471d4fcbf76",
      "name": "Delete1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4300,
        520
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.trim().includes(\"qr_enviado\") }}",
                    "rightValue": "qr_enviado",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "159113e0-5106-46b9-a8b6-470e8b1b6c01"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Qr enviado"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "21f1d592-4504-443b-b25d-661708cd86bc",
                    "leftValue": "={{ $json.output.trim().includes(\"LISTA_ENVIADA\") }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Lista enviada"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        5860,
        300
      ],
      "id": "8d9d6f6e-98ec-4e87-98b0-f297fc101e72",
      "name": "Switch"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pc1g3m0ih934pz9",
        "table": "mtxmanzpy3a6oz8",
        "returnAll": true,
        "options": {
          "where": "=(Telefono,eq,{{ $('camposiniciales').item.json.Telefono }})"
        }
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        6220,
        560
      ],
      "id": "0ab3ccfa-accd-4f42-84cc-81fafe9896e6",
      "name": "Nombre1",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Este código SIEMPRE devuelve un array de objetos como requiere el sistema\nfunction formatearProducto() {\n  try {\n    // Obtener los valores de las variables\n    const title = $('Webhook').first().json.body.messages[0].reply.list_reply.title;\n    const description = $('Webhook').first().json.body.messages[0].reply.list_reply.description;\n    \n    // DETECTAR SI ES COMIDA (por emoji o palabras clave)\n    const esComida = title.includes('🥟') || title.includes('🍖') || title.includes('🥬') || \n                     title.includes('🍝') || title.includes('🍕') || title.includes('🍗') || \n                     title.includes('🥩') || title.includes('🥧') || title.includes('🍲') ||\n                     title.includes('🥪') || title.includes('🍔') || title.includes('🥤') ||\n                     title.includes('☕') || title.includes('🍮') || title.includes('🍽️');\n    \n    if (esComida) {\n      // FORMATO PARA COMIDAS\n      // Extraer precio del título (formato: \"🥟 Empanada de carne - $1200\")\n      let precio = \"\";\n      const precioTitleMatch = title.match(/\\$\\s*([\\d,\\.]+)/);\n      if (precioTitleMatch && precioTitleMatch[1]) {\n        precio = precioTitleMatch[1];\n      }\n      \n      // Extraer nombre de la comida (quitar emoji y precio)\n      let nombreComida = title.replace(/[\\u{1F300}-\\u{1F9FF}]/gu, '').replace(/\\s*-\\s*\\$[\\d,\\.]+.*/, '').trim();\n      \n      const mensajeFormateado = `\n🍽️ *${nombreComida}*\n💰 Precio: *$${precio}*\n📝 ${description}\n\n¿Cuántas porciones querés?`;\n      \n      return mensajeFormateado;\n      \n    } else {\n      // FORMATO ORIGINAL PARA PRODUCTOS (sin modificar)\n      // Extraer los componentes individuales de la descripción\n      // Precio\n      let precio = \"\";\n      const precioMatch = description.match(/Precio:\\s*\\*\\$?([\\d,\\.]+)/);\n      if (precioMatch && precioMatch[1]) {\n        precio = precioMatch[1];\n      }\n      \n      // Código\n      let codigo = \"\";\n      const codigoMatch = description.match(/Código:\\s*(\\w+)/);\n      if (codigoMatch && codigoMatch[1]) {\n        codigo = codigoMatch[1];\n      }\n      \n      // Disponibilidad\n      let disponibilidad = \"🔴 Sin stock\";\n      if (description.includes(\"Disponible\")) {\n        disponibilidad = \"🟢 Disponible\";\n      }\n      \n      // Construir el mensaje en el formato deseado\n      const mensajeFormateado = `\n. ${title}\n.🔥 Precio: *$${precio}*\n.🆔 Código: ${codigo}\n.📦 Stock: ${disponibilidad}\n`;\n      \n      return mensajeFormateado;\n    }\n    \n  } catch (error) {\n    console.error(\"Error al formatear producto:\", error);\n    return \"Error al procesar producto\";\n  }\n}\n\n// IMPORTANTE: Este es el retorno que necesitas - SIEMPRE usar array de objetos\nreturn [\n  { \n    message_completo: formatearProducto() \n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        640
      ],
      "id": "9a71c6fd-e777-4577-8c6d-09bfa70ec4d1",
      "name": "Code"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=agente_pocho:{{ $('camposiniciales').first().json.Telefono }}",
        "sessionTTL": 12000,
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        4900,
        560
      ],
      "id": "7601de59-539e-4da3-b470-5ce32e32fdbd",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "agente_pocho:5492235979689"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        5360,
        900
      ],
      "id": "efc3a947-907f-45f9-b283-3d214310c169",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "model": "anthropic/claude-3.7-sonnet",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        4780,
        780
      ],
      "id": "8b7c8cdd-c0a6-4a87-a463-7fb698350d49",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "uv1CbV6m8qPeMdpW",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": "={{1}}"
            },
            {
              "name": "body",
              "value": "Tenes que elegir unicamente de cada menu que te comparto, no puepasar asi el medido."
            },
            {
              "name": "to",
              "value": "={{ $('camposiniciales').first().json.telefonoCliente }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6940,
        760
      ],
      "id": "e4805b1f-f5b7-4d06-8b68-77c6e04010b5",
      "name": "Texto1"
    },
    {
      "parameters": {
        "name": "insertar_pedido",
        "description": "llamaras a esta herramienta cuando el pedido este confirmado",
        "workflowId": {
          "__rl": true,
          "value": "MA1amyL5ScIQzNJb",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "push_name",
              "stringValue": "={{ $('camposiniciales').first().json.telefonoCliente }}"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "\n  {\n    \"Nombre\": \"Juan Pérez\",\n    \"Productos\": [\n      {\n            \"Detalle\": \"Productos: Coca cola pack\",\n       \"Cantidad\": \"2\" ,\n      \"precio\": \"$300\"       \n    }],   \n    \"Total\":\"$1700\",\n    \"Telefono\": \"555-1234\",\n    \"Direccion\": \"Av. Principal #123 \",\n    \"Metodo de pago\": \"QR, TRANSCFERENCIA, OTRO\",\n    \"Retiro\": \"Local o domicilio\",\n    \"correo\":\"fercassera@gmail.com\",\n    \"Estado\": \"Pagado \",\n    \"Codigo pedido\":\"codigo generado\"\n  }\n"
      },
      "id": "8a3dcd21-ab81-4498-926c-3c282e9ef281",
      "name": "insertar_pedido",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        5060,
        560
      ]
    },
    {
      "parameters": {
        "name": "promo_bancaria",
        "description": "Llama a esta herramienta siempre que el usuario quiera saber las promociones bancarias",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "yOh5hvWd7551O1Ez",
          "cachedResultName": "DESPENSA - Promociones"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        5180,
        560
      ],
      "id": "4f436f46-1af4-4e06-b71a-3955fb6afda7",
      "name": "promociones1"
    },
    {
      "parameters": {
        "name": "buscar_productos",
        "description": "Llama a esta herramienta para saber sobre un producto o comidas",
        "workflowId": {
          "__rl": true,
          "value": "4bACFIaEnJooL6W4",
          "mode": "list",
          "cachedResultName": "DESPENSA - Buscar productos"
        },
        "fields": {
          "values": [
            {
              "name": "Telefono",
              "stringValue": "={{ $('camposiniciales').first().json.telefonoCliente }}"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n\t\"Descripcion\": \"azucar\"\n}"
      },
      "id": "21f36ca6-3f09-435c-9589-ecac91b8bf97",
      "name": "buscar_productos",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        5420,
        560
      ]
    },
    {
      "parameters": {
        "name": "buscar_comida",
        "description": "Utilizaras esta herramienta siempre que un usuario quiera sobre las comidas que vendemos, empandas, sandwiches, tartas, ensaldas etc si son productos de despensa no ingresar",
        "workflowId": {
          "__rl": true,
          "value": "95iu7FwWHLs11Vkc",
          "mode": "list",
          "cachedResultName": "DESPENSA - Comidas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "Telefono": "={{ $('camposiniciales').first().json.telefonoCliente }}",
            "descripcion": "={{ $('Delete').item.json.message_completo }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "descripcion",
              "displayName": "descripcion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "Telefono",
              "displayName": "Telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        5900,
        560
      ],
      "id": "17dbb49e-55ef-4f12-be89-46f818c0a2ea",
      "name": "buscar_comida"
    },
    {
      "parameters": {
        "name": "insert_name_mail",
        "description": "Llamaras a esta herramienta cuando tengas sus datos ",
        "workflowId": {
          "__rl": true,
          "value": "MuBTjZBk3QgLNPG5",
          "mode": "list",
          "cachedResultName": "DESPENSA - Nombre real"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "nombre": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('nombre', `Guardaras el nombre real del usuario`, 'string') }}",
            "telefono": "={{ $('camposiniciales').first().json.telefonoCliente }}",
            "correo": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('correo', `envia el correo`, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "nombre",
              "displayName": "nombre",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "Id",
              "displayName": "Id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "correo",
              "displayName": "correo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        5780,
        560
      ],
      "id": "b769de56-c438-4c10-8d1b-7e03f0e24e72",
      "name": "nombre"
    },
    {
      "parameters": {
        "jsCode": "// --- Funciones de procesamiento de texto ---\n\n// Función para procesar el texto y dividirlo inteligentemente\nfunction processAndSplitText(textInput) {\n  // Asegúrate de que textInput sea un string o pueda ser convertido\n  let text = textInput;\n\n  // Si la entrada no es un string\n  if (typeof text !== 'string') {\n    // Si es null o undefined, simplemente devolvemos un array vacío\n    if (text === null || text === undefined) {\n      return [];\n    }\n\n    // Si es un objeto, intentamos encontrar campos comunes que contengan texto\n    if (typeof text === 'object') {\n      if (text.text) {\n        text = text.text;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.type === 'text' && text.text) {\n        text = text.text;\n      } else if (text.output) { // Intentamos extraer de un campo 'output'\n          // Si output es un string, lo usamos\n          if (typeof text.output === 'string') {\n              text = text.output;\n          } else { // Si output es un objeto o array, intentamos extraer de ahí\n              const extracted = extractTextContent(text.output); // Usamos la función de extracción\n              if (extracted) {\n                  text = extracted;\n              } else {\n                   // Si no pudimos extraer, intentamos convertir todo el objeto a string\n                   try {\n                       text = JSON.stringify(text);\n                   } catch (e) {\n                       console.error(\"No se pudo serializar el objeto a string:\", e);\n                       return []; // Si falla la serialización, devolvemos vacío\n                   }\n              }\n          }\n      } else {\n        // Si no encontramos campos de texto comunes ni 'output', intentamos convertir a string\n        try {\n          text = JSON.stringify(text);\n        } catch (e) {\n           console.error(\"No se pudo serializar el objeto a string:\", e);\n           return []; // Si falla la serialización, devolvemos vacío\n        }\n      }\n    } else { // Si no es string, objeto, null o undefined, devolvemos vacío\n       console.warn(\"Entrada a processAndSplitText no es string, objeto, null o undefined:\", typeof text);\n       return [];\n    }\n  }\n\n  // Si después de los intentos no tenemos un string válido, devolvemos vacío\n  if (typeof text !== 'string' || text.trim() === '') {\n      return [];\n  }\n\n  // Ahora que tenemos un string, procesamos el formato\n  const processedText = text\n    .replace(/\\*\\*(.+?)\\*\\*/g, '*$1*') // **texto** -> *texto*\n    .replace(/###\\s*/g, '')         // Elimina encabezados ###\n    .replace(/[¡¿!]/g, '');         // Elimina signos de exclamación e interrogación iniciales y finales\n\n  // Divide en líneas para análisis\n  const lines = processedText.split('\\n');\n\n  // Grupos para almacenar los mensajes\n  const messages = [];\n  let currentMessage = [];\n  let inNumberedSection = false;\n  let currentSectionNumber = null;\n\n  // Detectar secciones numeradas y agrupables\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    // Detecta si la línea es un encabezado numerado (ej: \"1. Tipo de propiedad:\")\n    const numberedHeaderMatch = line.match(/^\\s*(\\d+)\\.\\s+([^:]+):/);\n\n    if (numberedHeaderMatch) {\n      const sectionNumber = parseInt(numberedHeaderMatch[1]);\n\n      // Si estamos empezando una nueva sección numerada O si el número no es el siguiente esperado\n      if (!inNumberedSection || (inNumberedSection && sectionNumber !== currentSectionNumber + 1)) {\n         // Si tenemos contenido previo, guardamos como mensaje separado\n         if (currentMessage.length > 0) {\n             messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n             currentMessage = [];\n         }\n         inNumberedSection = true;\n      }\n      currentSectionNumber = sectionNumber; // Actualizamos el número de sección actual\n       currentMessage.push(line); // Agregamos la línea al mensaje actual\n\n    } else if (line.trim() === '') { // Línea vacía\n        // Una línea vacía puede terminar una sección si hay contenido previo\n        if (currentMessage.length > 0) {\n             // Si no estamos en una sección numerada, una línea vacía termina el mensaje actual\n             if (!inNumberedSection) {\n                 messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n                 currentMessage = [];\n             } else {\n                 // Si estamos en una sección numerada, una línea vacía se agrega al mensaje actual,\n                 // podría terminar la sección si hay otra línea vacía o fin de texto después.\n                 currentMessage.push(line);\n             }\n        }\n         // Si currentMessage está vacío, una línea vacía consecutiva no hace nada\n\n    } else { // Línea con contenido que no es un encabezado numerado\n        currentMessage.push(line);\n        inNumberedSection = false; // Salimos de la sección numerada si el contenido no sigue el patrón\n    }\n  }\n\n  // Agregar el último mensaje si queda algo\n  if (currentMessage.length > 0) {\n    messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n  }\n\n  // Filtrar mensajes vacíos y limpiar líneas vacías extra\n  return messages\n    .filter(msg => msg.length > 0) // Filtrar cadenas vacías después del trim\n    .map(msg => {\n      // Eliminar líneas vacías múltiples dentro del mensaje\n      return msg.replace(/\\n{2,}/g, '\\n\\n');\n    });\n}\n\n// Función para extraer texto de diferentes estructuras de datos\nfunction extractTextContent(data) {\n  // Si la data es null o undefined, retornamos null inmediatamente\n  if (data === null || data === undefined) {\n    return null;\n  }\n\n  // Si es un string, lo retornamos directamente\n  if (typeof data === 'string') {\n    return data;\n  }\n\n  // Si es un array\n  if (Array.isArray(data)) {\n    // Iteramos sobre el array e intentamos extraer texto de cada elemento\n    for (const item of data) {\n       const extracted = extractTextContent(item); // Llamada recursiva para elementos del array\n       if (extracted) {\n           return extracted; // Devolvemos el primer texto que encontramos\n       }\n    }\n    return null; // Si no encontramos texto en ningún elemento del array\n  }\n\n  // Si es un objeto\n  if (typeof data === 'object') {\n    // Priorizamos campos comunes que suelen contener texto\n    if (data.text) {\n      return data.text;\n    }\n    if (data.message) {\n      return data.message;\n    }\n    // Si tiene un campo 'output', intentamos extraer texto de él (puede ser string, array u objeto)\n    if (data.output !== undefined && data.output !== null) {\n         const extracted = extractTextContent(data.output); // Llamada recursiva para el campo output\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'response', intentamos extraer texto de él\n     if (data.response !== undefined && data.response !== null) {\n         const extracted = extractTextContent(data.response); // Llamada recursiva para el campo response\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'json', intentamos extraer texto de él\n     if (data.json !== undefined && data.json !== null) {\n         const extracted = extractTextContent(data.json); // Llamada recursiva para el campo json\n         if (extracted) {\n             return extracted;\n         }\n    }\n    // Si no encontramos campos de texto comunes ni estructuras anidadas esperadas,\n    // intentamos convertir el objeto completo a string como último recurso\n     try {\n         return JSON.stringify(data);\n     } catch (e) {\n         console.error(\"No se pudo serializar el objeto a string en extractTextContent:\", e);\n         return null; // Si falla la serialización\n     }\n  }\n\n  // Si el tipo de dato no es manejado, retornamos null\n  console.warn(\"Tipo de dato no manejado en extractTextContent:\", typeof data);\n  return null;\n}\n\n// --- Lógica Principal con manejo seguro de nodos ---\nlet textToProcess = null;\n\ntry {\n  // Verificar si el nodo \"Cancelar evento\" existe y tiene datos\n  let cancelarEventoData = null;\n  try {\n    // Usamos try-catch para capturar errores si el nodo no existe\n    cancelarEventoData = $('Cancelar evento');\n    if (cancelarEventoData && cancelarEventoData.first() && cancelarEventoData.first().json) {\n      if (cancelarEventoData.first().json.response !== undefined) {\n        textToProcess = extractTextContent(cancelarEventoData.first().json.response);\n      } else {\n        textToProcess = extractTextContent(cancelarEventoData.first().json);\n      }\n    }\n  } catch (e) {\n    // Silenciosamente ignoramos errores si el nodo no existe\n    console.log(\"Nodo 'Cancelar evento' no disponible o sin datos válidos\");\n  }\n  \n  // Solo intentamos acceder a AGE3 si aún no hemos encontrado texto para procesar\n  if (!textToProcess) {\n    try {\n      // Usamos try-catch para capturar errores si el nodo no existe\n      const age3Data = $('AGE3');\n      if (age3Data && age3Data.first() && age3Data.first().json) {\n        if (age3Data.first().json.output !== undefined) {\n          textToProcess = extractTextContent(age3Data.first().json.output);\n        } else {\n          textToProcess = extractTextContent(age3Data.first().json);\n        }\n      }\n    } catch (e) {\n      // Silenciosamente ignoramos errores si el nodo no existe\n      console.log(\"Nodo 'AGE3' no disponible o sin datos válidos\");\n    }\n  }\n  \n  // Si no hemos encontrado datos en los nodos específicos, intentamos con $input directamente\n  if (!textToProcess) {\n    try {\n      const inputItems = $input.all();\n      if (inputItems && inputItems.length > 0 && inputItems[0].json) {\n        textToProcess = extractTextContent(inputItems[0].json);\n      }\n    } catch (e) {\n      console.log(\"No se pudo acceder a los datos de entrada directamente:\", e.message);\n    }\n  }\n  \n  // Procesar y retornar el resultado\n  if (textToProcess) {\n    const textArray = processAndSplitText(textToProcess);\n    // Devolvemos un array con un objeto que contiene el array de texto\n    return [{json: {text: textArray}}];\n  } else {\n    // Si no se pudo obtener ni procesar texto, devolvemos un array vacío\n    return [{json: {text: []}}];\n  }\n} catch (error) {\n  // Capturamos cualquier error no manejado y devolvemos un objeto con información del error\n  console.error(\"Error general en el nodo:\", error.message);\n  return [{json: {text: [], error: error.message}}];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6300,
        340
      ],
      "id": "9a50b878-e826-4a28-b8bf-29bab4d402aa",
      "name": "Separa datos"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52cc775a-1114-46b3-9b00-bc2a6900638e",
              "name": "message_completo",
              "value": "={{ $json?.message_completo || $json.message_completo }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4820,
        200
      ],
      "id": "06c8f4ad-dcb4-4f93-a78a-ed460dfccddf",
      "name": "msg"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.innovasoftpro.dev",
            "content-length": "2163",
            "accept": "application/json",
            "content-type": "application/json",
            "x-forwarded-for": "65.21.161.42",
            "x-forwarded-host": "n8n.innovasoftpro.dev",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "575dad520f0e",
            "x-real-ip": "65.21.161.42",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "messages": [
              {
                "id": "h_nKnEDtKJSJeXPxnTe_OQ-gJkE_sPiXgo",
                "from_me": false,
                "type": "reply",
                "chat_id": "5492254596618@s.whatsapp.net",
                "timestamp": 1749235369,
                "source": "mobile",
                "reply": {
                  "type": "list_reply",
                  "list_reply": {
                    "id": "ListV3:menu_5",
                    "title": "🥪 Sandwich de Miga  - $1900",
                    "description": "Jamon y Queso"
                  }
                },
                "context": {
                  "quoted_id": "yqJTBFAP1ZYY0wY-wBcE_sPiXgo",
                  "quoted_author": "5492235246842",
                  "quoted_content": {
                    "header": "🥶 MENÚ ANTIFRÍO x MENOS DE $5000 🥶",
                    "body": "🟢 Seleccioná tu plato para combatir el frío y escribí la cantidad que quieras",
                    "label": " 🔺 Ver Menú ",
                    "footer": "📲 Hacé tu pedido y\n📍 Retirá en Bolívar y Neuquén o\n 🚚 Consultá el envío",
                    "sections": [
                      {
                        "title": "🥶 MENÚ ANTIFRÍO x MENOS DE $5000 🥶",
                        "rows": [
                          {
                            "id": "ListV3:menu_1",
                            "title": "🥧 Tartas - $5500",
                            "description": "Jamon y queso - Pollo - Verdura - Tricolor (Verduras,  musarella y zapallo) - choclo - puerro y pollo - zapallito - brocoli)"
                          },
                          {
                            "id": "ListV3:menu_2",
                            "title": "🥟 Empanadas - $1500",
                            "description": "Carne cortadas a cuchillo - Jamon y Queso - Pollo - Fatay - Choclo - Verdura - Capresse"
                          },
                          {
                            "id": "ListV3:menu_3",
                            "title": "🥗 Ensaladas - $3000",
                            "description": "Cocidas y Gourmet"
                          },
                          {
                            "id": "ListV3:menu_4",
                            "title": "🥪 Sandwich  - $4500",
                            "description": "Milanesa de Carne "
                          },
                          {
                            "id": "ListV3:menu_5",
                            "title": "🥪 Sandwich de Miga  - $1900",
                            "description": "Jamon y Queso"
                          },
                          {
                            "id": "ListV3:menu_6",
                            "title": "🍽️ Bomba de papa - $900",
                            "description": ""
                          },
                          {
                            "id": "ListV3:menu_7",
                            "title": "🥬 Buñuelos de verdura - $450",
                            "description": ""
                          },
                          {
                            "id": "ListV3:menu_8",
                            "title": "🍽️ Tortilla de papa - $4000",
                            "description": ""
                          },
                          {
                            "id": "ListV3:menu_9",
                            "title": "🍽️ Super Panchos - $1500",
                            "description": ""
                          },
                          {
                            "id": "ListV3:menu_10",
                            "title": "🍝 Ravioles - $3500",
                            "description": "(ricota, verdura o jamón/pollo) x porcion"
                          },
                          {
                            "id": "ListV3:menu_11",
                            "title": "🍽️ Canelones x3  - $5000",
                            "description": ""
                          },
                          {
                            "id": "ListV3:menu_12",
                            "title": "🥪 Sándwich - $4000",
                            "description": " Bondiola + Queso Ahumado"
                          }
                        ]
                      }
                    ]
                  },
                  "quoted_type": "list"
                },
                "from": "5492254596618",
                "from_name": "Automátizaciones AI"
              }
            ],
            "event": {
              "type": "messages",
              "event": "post"
            },
            "channel_id": "GROOTT-ZSFJB"
          },
          "webhookUrl": "https://n8n.innovasoftpro.dev/webhook/lodepocho",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "2kOn0Oz7c2uvczPK",
    "callerPolicy": "workflowsFromSameOwner",
    "timezone": "America/Argentina/Buenos_Aires"
  },
  "staticData": {
    "node:File Created": {
      "lastTimeChecked": "2025-01-24T00:40:06Z"
    },
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-01-19T21:20:51.336Z",
      "updatedAt": "2025-01-19T21:20:51.336Z",
      "id": "dgrS6et84MZNe4W0",
      "name": "POCHO"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-06-06T18:45:38.309Z",
  "versionId": "206a07cc-e945-46f2-b07a-ee7660e47898"
}