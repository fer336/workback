{
  "active": false,
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Tiene Coordenadas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Geocodificar Dirección": {
      "main": [
        [
          {
            "node": "Calcular Distancia",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcular Distancia": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tiene Coordenadas": {
      "main": [
        [
          {
            "node": "Calcular Distancia",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Preparar Dirección",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Dirección": {
      "main": [
        [
          {
            "node": "Geocodificar Dirección",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resultado Final": {
      "main": [
        []
      ]
    }
  },
  "createdAt": "2025-06-28T03:55:57.077Z",
  "id": "1yQhNrSiAqYJsDaV",
  "isArchived": false,
  "meta": null,
  "name": "DESPENSA - verificar_elegibilidad_envio",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "direccion"
            },
            {
              "name": "location",
              "type": "object"
            }
          ]
        }
      },
      "id": "e823c0de-3d23-4aef-b4c2-9cf5d9b5a153",
      "typeVersion": 1.1,
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -560,
        -40
      ]
    },
    {
      "parameters": {
        "url": "https://nominatim.openstreetmap.org/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.direccion }}, Mar del Plata, Argentina"
            },
            {
              "name": "format",
              "value": "json"
            },
            {
              "name": "limit",
              "value": "1"
            },
            {
              "name": "addressdetails",
              "value": "1"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        120,
        100
      ],
      "id": "9f09ce4a-4082-4380-b6fe-aa365527a90d",
      "name": "Geocodificar Dirección"
    },
    {
      "parameters": {
        "jsCode": "// --- Helpers -------------------------------------------------\nconst toRad = deg => deg * Math.PI / 180;\n\n/**\n * Devuelve la distancia en kilómetros entre dos puntos\n * (lat1, lon1) y (lat2, lon2) usando la fórmula de Haversine.\n */\nfunction calcularDistancia(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Radio medio de la Tierra en km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n\n  const a = Math.sin(dLat / 2) ** 2 +\n            Math.cos(toRad(lat1)) *\n            Math.cos(toRad(lat2)) *\n            Math.sin(dLon / 2) ** 2;\n\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n// -------------------------------------------------------------\n\n\n// Agregá logs si querés depurar\nconsole.log(\"Contenido de $input:\", $input);\nconsole.log(\"Contenido de $json:\", $json);\n\nconst tiendaLat   = -37.991875;\nconst tiendaLng   = -57.5705472;\nconst radioEntrega = 50; // km de radio máximo\n\nlet clienteLat, clienteLng;\n\n// 1) ¿Viene en $json.location?\nif ($json.location?.latitude && $json.location?.longitude) {\n  clienteLat = parseFloat($json.location.latitude);\n  clienteLng = parseFloat($json.location.longitude);\n  console.log(\"Usando $json.location:\", clienteLat, clienteLng);\n\n// 2) ¿Viene en el body (array)?\n} else if (Array.isArray($json.body) && $json.body.length) {\n  clienteLat = parseFloat($json.body[0].lat);\n  clienteLng = parseFloat($json.body[0].lon);\n  console.log(\"Usando $json.body:\", clienteLat, clienteLng);\n\n// 3) ¿Viene desde otro nodo vía $input?\n} else if ($input.first()?.json?.location) {\n  clienteLat = parseFloat($input.first().json.location.latitud);\n  clienteLng = parseFloat($input.first().json.location.longitud);\n  console.log(\"Usando $input:\", clienteLat, clienteLng);\n}\n\n// Si no encontramos coordenadas válidas, salimos temprano\nif (clienteLat === undefined || clienteLng === undefined) {\n  return {\n    json: {\n      enRango: false,\n      distancia: \"desconocida\",\n      mensaje: \"No pude encontrar tus coordenadas. Verificá que hayas compartido tu ubicación correctamente.\",\n      coordenadas: null,\n    },\n  };\n}\n\n// --- Cálculo de distancia y mensaje --------------------------\nconst distancia = calcularDistancia(tiendaLat, tiendaLng, clienteLat, clienteLng);\nconst enRango   = distancia <= radioEntrega;\nconst distanciaKm = Math.round(distancia * 100) / 100;\n\nconst mensaje = enRango\n  ? `¡Buenas! Estás a ${distanciaKm} km de Lo de Pocho, dentro de nuestra zona de delivery.`\n  : `Mi ubicacion esta a ${distanciaKm} km de Lo de Pocho (${radioEntrega} km).`;\n\n// --- Salida --------------------------------------------------\nreturn {\n  json: {\n    enRango,\n    distancia: `${distanciaKm} km`,\n    mensaje,\n    coordenadas: {\n      latitud: clienteLat,\n      longitud: clienteLng,\n    },\n  },\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        -60
      ],
      "id": "7601827d-b9a3-4d09-8bc1-8b2de74bfc99",
      "name": "Calcular Distancia"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "f21d5bed-f25c-42c2-806d-7113bfce0abb",
              "leftValue": "={{ $json.location !== undefined }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "32c50c09-e687-4165-8491-d2c8c1f545a9",
      "name": "Tiene Coordenadas",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -360,
        -40
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://httpbin.org/anything",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"workflow\": \"verificar_rango_delivery\",\n  \"status\": \"success\",\n  \"resultado\": {\n    \"enRango\": {{ $json.enRango }},\n    \"distancia\": \"{{ $json.distancia }}\",\n    \"mensaje\": \"{{ $json.mensaje }}\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        520,
        -280
      ],
      "id": "6a6b75ab-7a8c-4e65-b9c0-9f7cab5d6699",
      "name": "Resultado Final"
    },
    {
      "parameters": {
        "jsCode": "// Este nodo simplemente pasa los datos a través\n// y los prepara para ser enviados al geocodificador\n\n// Si tenemos dirección, la pasamos directamente\nif ($json.direccion && $json.direccion.trim() !== '') {\n  return {\n    json: {\n      direccion: $json.direccion\n    }\n  };\n}\n// Si viene del mensaje de WhatsApp directamente\nelse if ($json.body && $json.body.messages && $json.body.messages[0] && \n    $json.body.messages[0].type === 'location') {\n  // Extraer la ubicación del mensaje de WhatsApp\n  return {\n    json: {\n      direccion: \"Ubicación compartida\"\n    }\n  };\n}\n\n// Por defecto, devolver los datos tal como están\nreturn $json;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -120,
        100
      ],
      "id": "37dc7a78-7907-4571-b91b-37bf120fa0df",
      "name": "Preparar Dirección"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e36b882-2df4-4e5e-a2c6-2511c6e8aea1",
              "name": "response",
              "value": "={{ $json.mensaje }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        640,
        -60
      ],
      "id": "52eb69d1-3b08-4f93-a277-d4ba8917e256",
      "name": "Edit Fields"
    }
  ],
  "pinData": null,
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-06-28T03:58:23.092Z",
  "versionId": "7cd492e8-bbeb-451f-8cb9-133861fb49dd"
}