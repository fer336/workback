{
  "active": false,
  "connections": {
    "Lista General": {
      "main": [
        [
          {
            "node": "menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "MESSAGE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MESSAGE": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa datos": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Tester Prompt",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Crypto": {
      "main": [
        [
          {
            "node": "Insertar Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Variables globales",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Crypto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "From Me3": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "getCliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insertar Lead": {
      "main": [
        [
          {
            "node": "Variables globales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Variables globales": {
      "main": [
        [
          {
            "node": "Listas1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getCliente": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tester Prompt": {
      "main": [
        [
          {
            "node": "Separa datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "From Me3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Tester Prompt",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Redis3",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis3": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "JSON Parse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON Parse": {
      "main": [
        [
          {
            "node": "Message Type1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type1": {
      "main": [
        [
          {
            "node": "text1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Transcribir",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribir": {
      "main": [
        [
          {
            "node": "text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "text": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "chatInput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chatInput": {
      "main": [
        [
          {
            "node": "Tester Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "text1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Listas": {
      "main": [
        []
      ]
    },
    "Listas1": {
      "main": [
        [
          {
            "node": "Listas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Lista General",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "menu": {
      "main": [
        []
      ]
    },
    "text3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "text3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-15T01:36:14.652Z",
  "id": "FR9qUEE1lqIr1h2S",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "AGENTE DELIVERY - Menu principal",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Funci√≥n para generar el men√∫ principal (categor√≠as)\nfunction generarMenuPrincipal(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üçî Men√∫ Delivery\",\n      \"description\": \"¬°Hola! Bienvenido a nuestro servicio de delivery\",\n      \"buttonText\": \"Ver Categor√≠as\",\n      \"footerText\": \"Selecciona una categor√≠a para continuar\",\n      \"sections\": [\n        {\n          \"title\": \"üçî Nuestro Men√∫\",\n          \"rows\": [\n            {\n              \"title\": \"Burgers con papas\",\n              \"description\": \"Hamburguesas gourmet con papas fritas incluidas\",\n              \"rowId\": \"cat_burgers\"\n            },\n            {\n              \"title\": \"Veggies con papas\",\n              \"description\": \"Hamburguesas vegetarianas con papas fritas incluidas\",\n              \"rowId\": \"cat_veggies\"\n            },\n            {\n              \"title\": \"Fries\",\n              \"description\": \"Papas fritas y toppings especiales\",\n              \"rowId\": \"cat_fries\"\n            },\n            {\n              \"title\": \"Ensaladas\",\n              \"description\": \"Opciones frescas y saludables\",\n              \"rowId\": \"cat_ensaladas\"\n            },\n            {\n              \"title\": \"Menu Kids\",\n              \"description\": \"Opciones especiales para los m√°s peque√±os\",\n              \"rowId\": \"cat_kids\"\n            },\n            {\n              \"title\": \"Tostados con papas\",\n              \"description\": \"Tostados gourmet con papas fritas incluidas\",\n              \"rowId\": \"cat_tostados\"\n            }\n          ]\n        },\n        {\n          \"title\": \"ü•§ Bebidas\",\n          \"rows\": [\n            {\n              \"title\": \"Bebidas sin alcohol\",\n              \"description\": \"Refrescos, jugos y aguas\",\n              \"rowId\": \"cat_bebidas\"\n            },\n            {\n              \"title\": \"Cerveza Artesanal MINGA\",\n              \"description\": \"Variedad de cervezas artesanales\",\n              \"rowId\": \"cat_cervezas\"\n            },\n            {\n              \"title\": \"Tragos\",\n              \"description\": \"Bebidas con alcohol y c√≥cteles\",\n              \"rowId\": \"cat_tragos\"\n            }\n          ]\n        },\n        {\n          \"title\": \"‚ú® Especiales\",\n          \"rows\": [\n            {\n              \"title\": \"Invitados especiales\",\n              \"description\": \"Nuestras creaciones destacadas\",\n              \"rowId\": \"cat_invitados\"\n            },\n            {\n              \"title\": \"Combo Del d√≠a\",\n              \"description\": \"La mejor opci√≥n al mejor precio\",\n              \"rowId\": \"cat_combo\"\n            },\n            {\n              \"title\": \"Promos\",\n              \"description\": \"Ofertas y promociones especiales\",\n              \"rowId\": \"cat_promos\"\n            },\n            {\n              \"title\": \"Postres\",\n              \"description\": \"Dulces para completar tu experiencia\",\n              \"rowId\": \"cat_postres\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para generar el men√∫ de hamburguesas cuando se selecciona \"Burgers con papas\"\nfunction generarMenuBurgers(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üçî Burgers con Papas\",\n      \"description\": \"Selecciona la hamburguesa que deseas ordenar\",\n      \"buttonText\": \"Ver Hamburguesas\",\n      \"footerText\": \"Todas nuestras hamburguesas incluyen papas fritas\",\n      \"sections\": [\n        {\n          \"title\": \"‚≠ê Hamburguesas Cl√°sicas\",\n          \"rows\": [\n            {\n              \"title\": \"Cheese Burger\",\n              \"description\": \"Medall√≥n 120gr (blend secreto), cheddar x4\\nSimple: $14.500 | Doble: $17.300\",\n              \"rowId\": \"burger_cheese\"\n            },\n            {\n              \"title\": \"American\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, ketchup, mostaza, cebolla cubitos, pepinillos\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_american\"\n            },\n            {\n              \"title\": \"Classic\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, salsa mil islas, cebollas, pepinillos, lechuga, tomate\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_classic\"\n            },\n            {\n              \"title\": \"Tasty\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, lechuga, tomate, cebolla morada, aderezo tasty\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_tasty\"\n            }\n          ]\n        },\n        {\n          \"title\": \"ü•ì Hamburguesas con Bacon\",\n          \"rows\": [\n            {\n              \"title\": \"Cheese Bacon\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado\\nSimple: $16.500 | Doble: $19.000 | Triple: $21.900\",\n              \"rowId\": \"burger_cheese_bacon\"\n            },\n            {\n              \"title\": \"Sistons\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado, aioli de berenjena ahumada, pepinillos\\nSimple: $16.500 | Doble: $19.000 | Triple: $21.900\",\n              \"rowId\": \"burger_sistons\"\n            },\n            {\n              \"title\": \"Candy\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado, cebolla caramelizada\\nSimple: $16.500 | Doble: $19.100 | Triple: $21.900\",\n              \"rowId\": \"burger_candy\"\n            },\n            {\n              \"title\": \"Cheese Bacon Egg\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado, huevo a la plancha\\nSimple: $16.700 | Doble: $19.800 | Triple: $22.900\",\n              \"rowId\": \"burger_egg\"\n            }\n          ]\n        },\n        {\n          \"title\": \"üßÖ Hamburguesas con Cebolla\",\n          \"rows\": [\n            {\n              \"title\": \"Fried Onion\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, cebolla smasheada en la plancha\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_fried_onion\"\n            },\n            {\n              \"title\": \"Fried Onion 2.0\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, cebolla smasheada, ali oli, pepinillos (opcional)\\nSimple: $15.800 | Doble: $18.800 | Triple: $21.000\",\n              \"rowId\": \"burger_fried_onion2\"\n            },\n            {\n              \"title\": \"Crispy Onion\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado, ali oli, mil islas, cebolla crispy, pepinillos\\nSimple: $16.700 | Doble: $19.800 | Triple: $22.900\",\n              \"rowId\": \"burger_crispy_onion\"\n            }\n          ]\n        },\n        {\n          \"title\": \"üåü Hamburguesas Especiales\",\n          \"rows\": [\n            {\n              \"title\": \"Blue Cheese\",\n              \"description\": \"Medall√≥n 120gr, queso emmental x2, queso azul, bacon ahumado, cebolla morada\\nSimple: $16.500 | Doble: $19.000 | Triple: $21.900\",\n              \"rowId\": \"burger_blue_cheese\"\n            },\n            {\n              \"title\": \"Butter Sriracha\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, manteca, sriracha\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_sriracha\"\n            },\n            {\n              \"title\": \"Gesell Burger\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, cebolla brunoise salteada, mayonesa heinz\\nSimple: $15.300 | Doble: $18.100 | Triple: $21.000\",\n              \"rowId\": \"burger_gesell\"\n            },\n            {\n              \"title\": \"Pina Burger\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado, aros de cebolla, barbacoa, aioli ahumado\\nSimple: $16.700 | Doble: $19.800 | Triple: $22.900\",\n              \"rowId\": \"burger_pina\"\n            }\n          ]\n        },\n        {\n          \"title\": \"üîù Premium\",\n          \"rows\": [\n            {\n              \"title\": \"Juicy\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, bacon ahumado (2 fetas), cebolla morada, salsa secreta, pepinillos\\nSimple: $16.700 | Doble: $19.800 | Triple: $22.900\",\n              \"rowId\": \"burger_juicy\"\n            },\n            {\n              \"title\": \"Sistons Scott\",\n              \"description\": \"Medall√≥n 120gr, cheddar x4, ketchup, mostaza, cebolla, pepinillos, lechuga, bacon\\nSimple: $16.700 | Doble: $19.800 | Triple: $22.900\",\n              \"rowId\": \"burger_sistons_scott\"\n            },\n            {\n              \"title\": \"Triple Queso\",\n              \"description\": \"3 medallones 120gr (blend secreto), x6 cheddar\\n$19.800\",\n              \"rowId\": \"burger_triple_queso\"\n            },\n            {\n              \"title\": \"Chicken Burger\",\n              \"description\": \"Pollo crispy, salsa caesar, lechuga, crispy, bacon, cheddar\\n$16.700\",\n              \"rowId\": \"burger_chicken\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para mostrar opciones de una hamburguesa espec√≠fica (Simple/Doble/Triple)\nfunction generarOpcionesHamburguesa(numeroCliente, burgerId, nombreHamburguesa) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": `üçî ${nombreHamburguesa}`,\n      \"description\": \"Selecciona el tama√±o de tu hamburguesa\",\n      \"buttonText\": \"Seleccionar Tama√±o\",\n      \"footerText\": \"Todas nuestras hamburguesas incluyen papas fritas\",\n      \"sections\": [\n        {\n          \"title\": \"üîÑ Selecciona el Tama√±o\",\n          \"rows\": [\n            {\n              \"title\": \"Simple\",\n              \"description\": \"1 medall√≥n de carne de 120gr\",\n              \"rowId\": `${burgerId}_simple`\n            },\n            {\n              \"title\": \"Doble\",\n              \"description\": \"2 medallones de carne de 120gr\",\n              \"rowId\": `${burgerId}_doble`\n            },\n            {\n              \"title\": \"Triple\",\n              \"description\": \"3 medallones de carne de 120gr\",\n              \"rowId\": `${burgerId}_triple`\n            }\n          ]\n        },\n        {\n          \"title\": \"‚¨ÖÔ∏è Navegaci√≥n\",\n          \"rows\": [\n            {\n              \"title\": \"Volver a Hamburguesas\",\n              \"description\": \"Ver otras opciones\",\n              \"rowId\": \"volver_burgers\"\n            },\n            {\n              \"title\": \"Volver al Men√∫ Principal\",\n              \"description\": \"Ver otras categor√≠as\",\n              \"rowId\": \"volver_menu\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para generar la lista de bebidas sin alcohol\nfunction generarMenuBebidas(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"ü•§ Bebidas sin Alcohol\",\n      \"description\": \"Selecciona la bebida que deseas ordenar\",\n      \"buttonText\": \"Ver Bebidas\",\n      \"footerText\": \"Bebidas refrescantes para acompa√±ar tu comida\",\n      \"sections\": [\n        {\n          \"title\": \"ü•§ Gaseosas\",\n          \"rows\": [\n            {\n              \"title\": \"Coca-Cola 500ml\",\n              \"description\": \"Gaseosa sabor cola\\n$1.800\",\n              \"rowId\": \"bebida_coca_500\"\n            },\n            {\n              \"title\": \"Sprite 500ml\",\n              \"description\": \"Gaseosa sabor lima-lim√≥n\\n$1.800\",\n              \"rowId\": \"bebida_sprite_500\"\n            },\n            {\n              \"title\": \"Fanta 500ml\",\n              \"description\": \"Gaseosa sabor naranja\\n$1.800\",\n              \"rowId\": \"bebida_fanta_500\"\n            },\n            {\n              \"title\": \"Coca-Cola Zero 500ml\",\n              \"description\": \"Gaseosa sabor cola sin az√∫car\\n$1.800\",\n              \"rowId\": \"bebida_coca_zero_500\"\n            }\n          ]\n        },\n        {\n          \"title\": \"üíß Agua y Jugos\",\n          \"rows\": [\n            {\n              \"title\": \"Agua Mineral 500ml\",\n              \"description\": \"Agua mineral sin gas\\n$1.500\",\n              \"rowId\": \"bebida_agua_500\"\n            },\n            {\n              \"title\": \"Agua con Gas 500ml\",\n              \"description\": \"Agua mineral con gas\\n$1.500\",\n              \"rowId\": \"bebida_agua_gas_500\"\n            },\n            {\n              \"title\": \"Jugo de Naranja Natural\",\n              \"description\": \"Exprimido al momento\\n$2.200\",\n              \"rowId\": \"bebida_jugo_naranja\"\n            },\n            {\n              \"title\": \"Limonada\",\n              \"description\": \"Con menta y jengibre\\n$2.200\",\n              \"rowId\": \"bebida_limonada\"\n            }\n          ]\n        },\n        {\n          \"title\": \"‚¨ÖÔ∏è Navegaci√≥n\",\n          \"rows\": [\n            {\n              \"title\": \"Volver al Men√∫ Principal\",\n              \"description\": \"Ver otras categor√≠as\",\n              \"rowId\": \"volver_menu\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para generar el men√∫ de cervezas artesanales\nfunction generarMenuCervezas(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üç∫ Cerveza Artesanal MINGA\",\n      \"description\": \"Selecciona la cerveza que deseas ordenar\",\n      \"buttonText\": \"Ver Cervezas\",\n      \"footerText\": \"Cervezas artesanales de producci√≥n local\",\n      \"sections\": [\n        {\n          \"title\": \"üç∫ Cervezas MINGA\",\n          \"rows\": [\n            {\n              \"title\": \"IPA\",\n              \"description\": \"Indian Pale Ale, con notas c√≠tricas y amargor pronunciado\\nPinta: $2.900\",\n              \"rowId\": \"cerveza_ipa\"\n            },\n            {\n              \"title\": \"Golden\",\n              \"description\": \"Rubia suave y refrescante, f√°cil de tomar\\nPinta: $2.700\",\n              \"rowId\": \"cerveza_golden\"\n            },\n            {\n              \"title\": \"Amber\",\n              \"description\": \"Roja con notas a caramelo y cuerpo medio\\nPinta: $2.700\",\n              \"rowId\": \"cerveza_amber\"\n            },\n            {\n              \"title\": \"Stout\",\n              \"description\": \"Negra con notas a caf√© y chocolate\\nPinta: $2.900\",\n              \"rowId\": \"cerveza_stout\"\n            }\n          ]\n        },\n        {\n          \"title\": \"‚¨ÖÔ∏è Navegaci√≥n\",\n          \"rows\": [\n            {\n              \"title\": \"Volver al Men√∫ Principal\",\n              \"description\": \"Ver otras categor√≠as\",\n              \"rowId\": \"volver_menu\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para los combos del d√≠a\nfunction generarMenuCombos(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üî• Combos del D√≠a\",\n      \"description\": \"Nuestras mejores ofertas de hoy\",\n      \"buttonText\": \"Ver Combos\",\n      \"footerText\": \"Aprovecha nuestras promociones especiales\",\n      \"sections\": [\n        {\n          \"title\": \"üî• Combos Especiales\",\n          \"rows\": [\n            {\n              \"title\": \"Combo Individual\",\n              \"description\": \"Hamburguesa Simple + Bebida\\nCon 20% de descuento sobre el precio individual\",\n              \"rowId\": \"combo_individual\"\n            },\n            {\n              \"title\": \"Combo Pareja\",\n              \"description\": \"2 Hamburguesas Dobles + 2 Bebidas\\nCon 25% de descuento sobre el precio individual\",\n              \"rowId\": \"combo_pareja\"\n            },\n            {\n              \"title\": \"Combo Familiar\",\n              \"description\": \"4 Hamburguesas + 4 Bebidas + 2 Postres\\nCon 30% de descuento sobre el precio individual\",\n              \"rowId\": \"combo_familiar\"\n            }\n          ]\n        },\n        {\n          \"title\": \"‚¨ÖÔ∏è Navegaci√≥n\",\n          \"rows\": [\n            {\n              \"title\": \"Volver al Men√∫ Principal\",\n              \"description\": \"Ver otras categor√≠as\",\n              \"rowId\": \"volver_menu\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para solicitar direcci√≥n de entrega\nfunction solicitarDireccion(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"type\": \"text\",\n      \"text\": \"üè† Por favor, ind√≠canos la direcci√≥n de entrega para tu pedido. Incluye calle, n√∫mero, piso/departamento (si aplica) y referencias que nos ayuden a encontrar tu domicilio.\"\n    }\n  ];\n}\n\n// Funci√≥n para solicitar m√©todo de pago\nfunction solicitarMetodoPago(numeroCliente) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üí∞ M√©todo de Pago\",\n      \"description\": \"Selecciona c√≥mo deseas pagar tu pedido\",\n      \"buttonText\": \"Seleccionar Pago\",\n      \"footerText\": \"Elige el m√©todo de pago m√°s conveniente\",\n      \"sections\": [\n        {\n          \"title\": \"üí≥ Opciones de Pago\",\n          \"rows\": [\n            {\n              \"title\": \"Efectivo\",\n              \"description\": \"Pagar√© en efectivo al momento de la entrega\",\n              \"rowId\": \"pago_efectivo\"\n            },\n            {\n              \"title\": \"Tarjeta (en delivery)\",\n              \"description\": \"Pagar√© con tarjeta al momento de la entrega\",\n              \"rowId\": \"pago_tarjeta\"\n            },\n            {\n              \"title\": \"Transferencia\",\n              \"description\": \"Realizar√© una transferencia bancaria\",\n              \"rowId\": \"pago_transferencia\"\n            },\n            {\n              \"title\": \"Mercado Pago\",\n              \"description\": \"Pagar√© usando Mercado Pago\",\n              \"rowId\": \"pago_mercadopago\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Funci√≥n para procesar mensajes de la IA (personalizaci√≥n de hamburguesa)\nfunction mensajeIA(numeroCliente, nombreHamburguesa, tamano) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"type\": \"text\",\n      \"text\": `¬°Excelente elecci√≥n! Has seleccionado una ${nombreHamburguesa} ${tamano}.\\n\\n¬øDeseas personalizar tu hamburguesa? Puedes decirme si quieres quitar o agregar alg√∫n ingrediente.\\n\\nPor ejemplo:\\n- \"Sin cebolla\"\\n- \"Sin ketchup\"\\n- \"Extra queso\"\\n- \"Agregar bacon\"\\n\\nO simplemente dime \"Est√° bien as√≠\" para continuar con tu pedido.`\n    }\n  ];\n}\n\n// Funci√≥n para confirmar el pedido final\nfunction confirmarPedido(numeroCliente, detallePedido, precioTotal) {\n  return [\n    {\n      \"number\": numeroCliente,\n      \"title\": \"üõí Confirmar Pedido\",\n      \"description\": `Tu pedido:\\n${detallePedido}\\n\\nTotal: $${precioTotal}`,\n      \"buttonText\": \"Confirmar\",\n      \"footerText\": \"Verifica que tu pedido est√© correcto\",\n      \"sections\": [\n        {\n          \"title\": \"‚úÖ Finalizar\",\n          \"rows\": [\n            {\n              \"title\": \"Confirmar Pedido\",\n              \"description\": \"Proceder con la compra\",\n              \"rowId\": \"confirmar_pedido\"\n            },\n            {\n              \"title\": \"Editar Pedido\",\n              \"description\": \"Realizar cambios\",\n              \"rowId\": \"editar_pedido\"\n            },\n            {\n              \"title\": \"Cancelar\",\n              \"description\": \"Cancelar todo el pedido\",\n              \"rowId\": \"cancelar_pedido\"\n            }\n          ]\n        }\n      ]\n    }\n  ];\n}\n\n// Exportar las funciones para su uso\nmodule.exports = {\n  generarMenuPrincipal,\n  generarMenuBurgers,\n  generarOpcionesHamburguesa,\n  generarMenuBebidas,\n  generarMenuCervezas,\n  generarMenuCombos,\n  solicitarDireccion,\n  solicitarMetodoPago,\n  mensajeIA,\n  confirmarPedido\n};\n\n// Si se ejecuta directamente, retornar el men√∫ principal por defecto\n// (Con un n√∫mero de cliente de ejemplo, debe ser reemplazado por el n√∫mero real)\nreturn generarMenuPrincipal($input.first().json.numero_cliente);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2000,
        -460
      ],
      "id": "ce2b2bba-eb5f-4022-a253-675a00a0bd84",
      "name": "Lista General"
    },
    {
      "parameters": {
        "batchSize": "=1",
        "options": {
          "reset": false
        }
      },
      "id": "7d509c14-917d-4269-8a9f-81db48f07a3c",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1880,
        -440
      ],
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$node[\"Webhook\"].json.body.server_url}}/message/sendText/{{$node[\"Webhook\"].json.body.instance}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$node[\"Webhook\"].json.body.apikey}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"delay\": 1500,\n    \"number\":\"{{ $('Variables globales').item.json.msg.telefono }}\",\n    \"text\": \"{{ $('Loop Over Items').first().json.text.replace(/\\n/g,'\\\\n').replace(/\\\"/g,'\\'') }}\"\n\n}",
        "options": {}
      },
      "id": "19af59d3-d1fe-4084-a605-7923b2263a4b",
      "name": "MESSAGE",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2100,
        -440
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "text",
        "options": {}
      },
      "id": "51eaaefe-7398-49d7-97ab-9bb952a34de1",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1660,
        -440
      ]
    },
    {
      "parameters": {
        "jsCode": "// --- Funciones de procesamiento de texto ---\n\n// Funci√≥n para procesar el texto y dividirlo inteligentemente\nfunction processAndSplitText(textInput) {\n  // Aseg√∫rate de que textInput sea un string o pueda ser convertido\n  let text = textInput;\n\n  // Si la entrada no es un string\n  if (typeof text !== 'string') {\n    // Si es null o undefined, simplemente devolvemos un array vac√≠o\n    if (text === null || text === undefined) {\n      return [];\n    }\n\n    // Si es un objeto, intentamos encontrar campos comunes que contengan texto\n    if (typeof text === 'object') {\n      if (text.text) {\n        text = text.text;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.type === 'text' && text.text) {\n        text = text.text;\n      } else if (text.output) { // Intentamos extraer de un campo 'output'\n          // Si output es un string, lo usamos\n          if (typeof text.output === 'string') {\n              text = text.output;\n          } else { // Si output es un objeto o array, intentamos extraer de ah√≠\n              const extracted = extractTextContent(text.output); // Usamos la funci√≥n de extracci√≥n\n              if (extracted) {\n                  text = extracted;\n              } else {\n                   // Si no pudimos extraer, intentamos convertir todo el objeto a string\n                   try {\n                       text = JSON.stringify(text);\n                   } catch (e) {\n                       console.error(\"No se pudo serializar el objeto a string:\", e);\n                       return []; // Si falla la serializaci√≥n, devolvemos vac√≠o\n                   }\n              }\n          }\n      } else {\n        // Si no encontramos campos de texto comunes ni 'output', intentamos convertir a string\n        try {\n          text = JSON.stringify(text);\n        } catch (e) {\n           console.error(\"No se pudo serializar el objeto a string:\", e);\n           return []; // Si falla la serializaci√≥n, devolvemos vac√≠o\n        }\n      }\n    } else { // Si no es string, objeto, null o undefined, devolvemos vac√≠o\n       console.warn(\"Entrada a processAndSplitText no es string, objeto, null o undefined:\", typeof text);\n       return [];\n    }\n  }\n\n  // Si despu√©s de los intentos no tenemos un string v√°lido, devolvemos vac√≠o\n  if (typeof text !== 'string' || text.trim() === '') {\n      return [];\n  }\n\n  // Ahora que tenemos un string, procesamos el formato\n  const processedText = text\n    .replace(/\\*\\*(.+?)\\*\\*/g, '*$1*') // **texto** -> *texto*\n    .replace(/###\\s*/g, '')         // Elimina encabezados ###\n    .replace(/[¬°¬ø!]/g, '');         // Elimina signos de exclamaci√≥n e interrogaci√≥n iniciales y finales\n\n  // Divide en l√≠neas para an√°lisis\n  const lines = processedText.split('\\n');\n\n  // Grupos para almacenar los mensajes\n  const messages = [];\n  let currentMessage = [];\n  let inNumberedSection = false;\n  let currentSectionNumber = null;\n\n  // Detectar secciones numeradas y agrupables\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    // Detecta si la l√≠nea es un encabezado numerado (ej: \"1. Tipo de propiedad:\")\n    const numberedHeaderMatch = line.match(/^\\s*(\\d+)\\.\\s+([^:]+):/);\n\n    if (numberedHeaderMatch) {\n      const sectionNumber = parseInt(numberedHeaderMatch[1]);\n\n      // Si estamos empezando una nueva secci√≥n numerada O si el n√∫mero no es el siguiente esperado\n      if (!inNumberedSection || (inNumberedSection && sectionNumber !== currentSectionNumber + 1)) {\n         // Si tenemos contenido previo, guardamos como mensaje separado\n         if (currentMessage.length > 0) {\n             messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n             currentMessage = [];\n         }\n         inNumberedSection = true;\n      }\n      currentSectionNumber = sectionNumber; // Actualizamos el n√∫mero de secci√≥n actual\n       currentMessage.push(line); // Agregamos la l√≠nea al mensaje actual\n\n    } else if (line.trim() === '') { // L√≠nea vac√≠a\n        // Una l√≠nea vac√≠a puede terminar una secci√≥n si hay contenido previo\n        if (currentMessage.length > 0) {\n             // Si no estamos en una secci√≥n numerada, una l√≠nea vac√≠a termina el mensaje actual\n             if (!inNumberedSection) {\n                 messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n                 currentMessage = [];\n             } else {\n                 // Si estamos en una secci√≥n numerada, una l√≠nea vac√≠a se agrega al mensaje actual,\n                 // podr√≠a terminar la secci√≥n si hay otra l√≠nea vac√≠a o fin de texto despu√©s.\n                 currentMessage.push(line);\n             }\n        }\n         // Si currentMessage est√° vac√≠o, una l√≠nea vac√≠a consecutiva no hace nada\n\n    } else { // L√≠nea con contenido que no es un encabezado numerado\n        currentMessage.push(line);\n        inNumberedSection = false; // Salimos de la secci√≥n numerada si el contenido no sigue el patr√≥n\n    }\n  }\n\n  // Agregar el √∫ltimo mensaje si queda algo\n  if (currentMessage.length > 0) {\n    messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n  }\n\n  // Filtrar mensajes vac√≠os y limpiar l√≠neas vac√≠as extra\n  return messages\n    .filter(msg => msg.length > 0) // Filtrar cadenas vac√≠as despu√©s del trim\n    .map(msg => {\n      // Eliminar l√≠neas vac√≠as m√∫ltiples dentro del mensaje\n      return msg.replace(/\\n{2,}/g, '\\n\\n');\n    });\n}\n\n// Funci√≥n para extraer texto de diferentes estructuras de datos\nfunction extractTextContent(data) {\n  // Si la data es null o undefined, retornamos null inmediatamente\n  if (data === null || data === undefined) {\n    return null;\n  }\n\n  // Si es un string, lo retornamos directamente\n  if (typeof data === 'string') {\n    return data;\n  }\n\n  // Si es un array\n  if (Array.isArray(data)) {\n    // Iteramos sobre el array e intentamos extraer texto de cada elemento\n    for (const item of data) {\n       const extracted = extractTextContent(item); // Llamada recursiva para elementos del array\n       if (extracted) {\n           return extracted; // Devolvemos el primer texto que encontramos\n       }\n    }\n    return null; // Si no encontramos texto en ning√∫n elemento del array\n  }\n\n  // Si es un objeto\n  if (typeof data === 'object') {\n    // Priorizamos campos comunes que suelen contener texto\n    if (data.text) {\n      return data.text;\n    }\n    if (data.message) {\n      return data.message;\n    }\n    // Si tiene un campo 'output', intentamos extraer texto de √©l (puede ser string, array u objeto)\n    if (data.output !== undefined && data.output !== null) {\n         const extracted = extractTextContent(data.output); // Llamada recursiva para el campo output\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'response', intentamos extraer texto de √©l\n     if (data.response !== undefined && data.response !== null) {\n         const extracted = extractTextContent(data.response); // Llamada recursiva para el campo response\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'json', intentamos extraer texto de √©l\n     if (data.json !== undefined && data.json !== null) {\n         const extracted = extractTextContent(data.json); // Llamada recursiva para el campo json\n         if (extracted) {\n             return extracted;\n         }\n    }\n    // Si no encontramos campos de texto comunes ni estructuras anidadas esperadas,\n    // intentamos convertir el objeto completo a string como √∫ltimo recurso\n     try {\n         return JSON.stringify(data);\n     } catch (e) {\n         console.error(\"No se pudo serializar el objeto a string en extractTextContent:\", e);\n         return null; // Si falla la serializaci√≥n\n     }\n  }\n\n  // Si el tipo de dato no es manejado, retornamos null\n  console.warn(\"Tipo de dato no manejado en extractTextContent:\", typeof data);\n  return null;\n}\n\n// --- L√≥gica Principal con manejo seguro de nodos ---\nlet textToProcess = null;\n\ntry {\n  // Verificar si el nodo \"Cancelar evento\" existe y tiene datos\n  let cancelarEventoData = null;\n  try {\n    // Usamos try-catch para capturar errores si el nodo no existe\n    cancelarEventoData = $('Cancelar evento');\n    if (cancelarEventoData && cancelarEventoData.first() && cancelarEventoData.first().json) {\n      if (cancelarEventoData.first().json.response !== undefined) {\n        textToProcess = extractTextContent(cancelarEventoData.first().json.response);\n      } else {\n        textToProcess = extractTextContent(cancelarEventoData.first().json);\n      }\n    }\n  } catch (e) {\n    // Silenciosamente ignoramos errores si el nodo no existe\n    console.log(\"Nodo 'Cancelar evento' no disponible o sin datos v√°lidos\");\n  }\n  \n  // Solo intentamos acceder a AGE3 si a√∫n no hemos encontrado texto para procesar\n  if (!textToProcess) {\n    try {\n      // Usamos try-catch para capturar errores si el nodo no existe\n      const age3Data = $('AGE3');\n      if (age3Data && age3Data.first() && age3Data.first().json) {\n        if (age3Data.first().json.output !== undefined) {\n          textToProcess = extractTextContent(age3Data.first().json.output);\n        } else {\n          textToProcess = extractTextContent(age3Data.first().json);\n        }\n      }\n    } catch (e) {\n      // Silenciosamente ignoramos errores si el nodo no existe\n      console.log(\"Nodo 'AGE3' no disponible o sin datos v√°lidos\");\n    }\n  }\n  \n  // Si no hemos encontrado datos en los nodos espec√≠ficos, intentamos con $input directamente\n  if (!textToProcess) {\n    try {\n      const inputItems = $input.all();\n      if (inputItems && inputItems.length > 0 && inputItems[0].json) {\n        textToProcess = extractTextContent(inputItems[0].json);\n      }\n    } catch (e) {\n      console.log(\"No se pudo acceder a los datos de entrada directamente:\", e.message);\n    }\n  }\n  \n  // Procesar y retornar el resultado\n  if (textToProcess) {\n    const textArray = processAndSplitText(textToProcess);\n    // Devolvemos un array con un objeto que contiene el array de texto\n    return [{json: {text: textArray}}];\n  } else {\n    // Si no se pudo obtener ni procesar texto, devolvemos un array vac√≠o\n    return [{json: {text: []}}];\n  }\n} catch (error) {\n  // Capturamos cualquier error no manejado y devolvemos un objeto con informaci√≥n del error\n  console.error(\"Error general en el nodo:\", error.message);\n  return [{json: {text: [], error: error.message}}];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        -440
      ],
      "id": "b50609be-9c27-4c50-a224-ba731ebaa93f",
      "name": "Separa datos"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        920,
        -200
      ],
      "id": "ff68a5e9-3fa8-427a-a59d-07ae48d4b7ce",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "9O8uUWkp7h4KwsVD",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "options": {
          "systemMessage": "=### Ejemplo de Identificaci√≥n y Consulta por Categor√≠a:\n\n```\nUsuario: burger_sistons\nMingo Bot: Excelente elecci√≥n. La Sistons incluye medall√≥n blend secreto, cheddar x4, bacon ahumado, alioli de berenjena ahumada, pepinillos. ¬øLa prefer√≠s simple, doble o triple?\n\nUsuario: simple\nMingo Bot: Perfecto. Una Sistons simple ha sido a√±adida a tu pedido. ¬øQuer√©s personalizarla o agregar algo m√°s?\n\nUsuario: cerveza_juicy_lite\nMingo Bot: Has seleccionado JUICY LITE IPA - SRM 4 / ABV 5.2. ¬øPrefer√≠s pinta o media pinta?\n\nUsuario: pinta\nMingo Bot: Excelente. Una pinta de JUICY LITE IPA ha sido a√±adida a tu pedido. ¬øDese√°s agregar algo m√°s?\n\nUsuario: bebida_agua_saborizada\nMingo Bot: Has seleccionado Agua saborizada. Contamos con los siguientes sabores: Pomelo, Manzana, Pera y Uva. ¬øCu√°l prefer√≠s?\n\nUsuario: pomelo\nMingo Bot: Perfecto. Un Agua saborizada sabor pomelo ha sido a√±adida a tu pedido. ¬øDese√°s agregar algo m√°s?\n```### Ejemplo Adicional - Cerveza y Confirmaci√≥n de Selecci√≥n:\n\n```\nUsuario: #menu\nMingo Bot: [muestra men√∫ completo con opciones de bebidas]\n\nUsuario: quiero una cerveza\nMingo Bot: Tenemos varias opciones de cervezas disponibles:\n‚Ä¢ Rubia IPA\n‚Ä¢ Roja Irish\n‚Ä¢ Negra Stout\n‚Ä¢ Honey\nPor favor, confirm√° exactamente cu√°l dese√°s seleccionar.\n\nUsuario: Rubia IPA\nMingo Bot: Has seleccionado Cerveza Rubia IPA. ¬øPrefer√≠s pinta o media pinta?\n\nUsuario: pinta\nMingo Bot: Perfecto. Una pinta de Cerveza Rubia IPA a√±adida a tu pedido. ¬øDese√°s agregar algo m√°s?\n```# Prompt Mejorado ‚Äî Mingo Bot (Delivery de Hamburguesas)\n\n## 1. Identidad y Personalidad\n\nEres **¬´Mingo Bot¬ª**, el asistente virtual exclusivo de **MINGA Burgers**, una hamburgueser√≠a premium con aut√©ntico sabor argentino. Tu misi√≥n es gestionar pedidos de delivery con eficiencia, cordialidad y un tono profesional con identidad argentina.\n\n**Personalidad:**\n- **Tono argentino profesional:** Us√°s expresiones como \"excelente\", \"perfecto\", \"genial\", \"correcto\", \"por supuesto\", \"entendido\", con acento en la segunda persona (\"vos\", \"quer√©s\", \"pod√©s\").\n- **Actitud:** Cordial, atento y eficiente. Entusiasta sobre los productos pero manteniendo un tono profesional.\n- **Comunicaci√≥n:** Mensajes claros y concisos (m√°ximo 3 l√≠neas por respuesta) y emojis discretos cuando sea apropiado (üçî üëç ‚úÖ).\n\n**Instrucciones iniciales:**\n- En tu primer mensaje, SIEMPRE indicarle al usuario que puede escribir **#menu** en cualquier momento para ver las opciones disponibles.\n- Recordarle esta opci√≥n si parece estar confundido o pregunta por opciones no disponibles.\n\n## 2. Funciones Principales\n\n1. **Gesti√≥n de pedidos:** Traduc√≠s c√≥digos `row_id` a productos reconocibles y manten√©s un carrito actualizado.\n2. **Interpretar c√≥digos y selecciones:** Cualquier `row_id` o selecci√≥n directa del men√∫ mostrado debe ser reconocida como v√°lida e incorporada al carrito inmediatamente. NUNCA rechazar opciones que el usuario seleccion√≥ directamente.\n3. **Tama√±o de productos:**\n   - Para TODA hamburguesa, SIEMPRE preguntar: \"¬øLa prefer√≠s simple, doble o triple?\" y esperar respuesta.\n   - Para TODA cerveza, SIEMPRE preguntar: \"¬øPrefer√≠s pinta o media pinta?\" y esperar respuesta.\n   - NUNCA agregar estos productos al carrito hasta confirmar el tama√±o.\n4. **Confirmaci√≥n:** Proces√°s la direcci√≥n, m√©todo de pago y emit√≠s `PEDIDO_CONFIRMADO`.\n5. **Experiencia:** Respond√©s con velocidad y confirmaci√≥n clara de cada acci√≥n.\n\n## 3. Especificaciones T√©cnicas\n\n### Estructura del Carrito (interno)\n```json\n{\n  \"carrito\": [\n    {\n      \"row_id\": \"burger_cheese\", \n      \"nombre_display\": \"Cheese Burger\",\n      \"precio_unitario\": 12500,\n      \"cantidad\": 2, \n      \"modifs\": [\"sin cebolla\", \"extra bacon\"],\n      \"subtotal\": 25000\n    }\n  ],\n  \"total_pedido\": 25000,\n  \"estado_pedido\": \"en_proceso\",\n  \"direccion\": \"\",\n  \"metodo_pago\": \"\"\n}\n```\n\n### Manejo de Opciones de Producto\n- **CRUCIAL:** El bot debe reconocer CUALQUIER selecci√≥n que provenga de los listados n8n como v√°lida (burger_xxx, veggie_xxx, fries_xxx, etc.)\n- Cuando el usuario selecciona un √≠tem, el bot debe **primero identificar qu√© tipo de producto es** y luego preguntar las opciones espec√≠ficas seg√∫n la categor√≠a:\n  - **Hamburguesas:** Preguntar si quiere simple, doble o triple\n  - **Cervezas:** Preguntar si quiere pinta o media pinta\n  - **Aguas saborizadas:** Preguntar qu√© sabor quiere (pomelo, manzana, pera, uva)\n  - **Otros productos con opciones:** Identificar las opciones disponibles consultando el listado\n\n### Reglas de Validaci√≥n\n- **IMPORTANTE:** Cualquier `row_id` o selecci√≥n que provenga del flujo n8n o que aparezca en los men√∫s SIEMPRE debe ser considerado v√°lido y procesarse seg√∫n las reglas espec√≠ficas de cada categor√≠a. NUNCA responder que \"no est√° en el men√∫\" para opciones que el usuario seleccion√≥ del men√∫ mostrado.\n- Si el usuario escribe texto libre que no corresponde a ning√∫n c√≥digo o selecci√≥n del men√∫: \"Por favor, seleccion√° una de las opciones del men√∫ disponible o escrib√≠ #menu para ver todas las opciones\"\n- Si solicita modificar un √≠tem no a√±adido a√∫n: \"Primero necesitamos agregar la hamburguesa al pedido, luego podremos personalizarla seg√∫n tus preferencias\"\n- Tiempo de inactividad (3 minutos): \"¬øContinuamos con tu pedido? Estamos listos para asistirte. Record√° que pod√©s escribir #menu para ver todas las opciones disponibles\"\n\n## 4. Frases y Modismos Argentinos Profesionales para Usar\n\n- \"¬°Buen d√≠a! ¬øEn qu√© puedo ayudarte hoy?\"\n- \"Excelente elecci√≥n, a√±adido a tu pedido\"\n- \"Tu selecci√≥n ha sido registrada con √©xito\"\n- \"¬øTe gustar√≠a personalizarla de alguna manera?\"\n- \"Perfecto, ya tenemos todo listo\"\n- \"¬øDese√°s agregar algo m√°s a tu pedido?\"\n- \"Por favor, indicame la direcci√≥n de entrega\"\n- \"Tu pedido est√° en preparaci√≥n\"\n- \"Esta combinaci√≥n es muy recomendada por nuestros clientes\"\n- \"No hay problema, lo modificamos enseguida\"\n\n## 5. Flujo de Interacci√≥n Optimizado\n\n1. **Inicio:** Saludo personalizado con men√∫ actual\n2. **Selecci√≥n:** Usuario elige mediante `row_id` o selecci√≥n directa del men√∫ ‚Üí SIEMPRE aceptar como v√°lido\n3. **Confirmaci√≥n de selecci√≥n:** Si la selecci√≥n proviene de un listado con m√∫ltiples opciones, confirmar espec√≠ficamente cu√°l eligi√≥\n4. **Tama√±os obligatorios:** \n   - Para TODA hamburguesa, preguntar: \"¬øLa prefer√≠s simple, doble o triple?\" \n   - Para TODA cerveza, preguntar: \"¬øPrefer√≠s pinta o media pinta?\"\n5. **Personalizaci√≥n:** Una vez confirmado el tama√±o, aceptar modificaciones con feedback claro\n6. **Resumen:** Muestra carrito cuando el usuario escribe \"ver pedido\", \"resumen\" o similar\n7. **Confirmaci√≥n:** Al recibir \"confirmar\" ‚Üí solicita direcci√≥n ‚Üí solicita m√©todo de pago\n8. **Finalizaci√≥n:** Emite `PEDIDO_CONFIRMADO` con resumen final y tiempo estimado\n\n**IMPORTANTE:** \n- Cuando el usuario selecciona un √≠tem directamente del men√∫, SIEMPRE aceptarlo como v√°lido, nunca indicar que no existe.\n- Para hamburguesas y cervezas, OBLIGATORIAMENTE preguntar por el tama√±o antes de a√±adir al carrito.\n- Cuando el usuario selecciona de un listado con m√∫ltiples opciones, SIEMPRE confirmar espec√≠ficamente qu√© eligi√≥.\n\n## 6. Ejemplos Mejorados de Conversaci√≥n\n\n### Escenario Principal:\n\n```\nUsuario: Hola\nMingo Bot: ¬°Buen d√≠a! Soy Mingo de MINGA Burgers. ¬øEn qu√© puedo ayudarte hoy? Pod√©s escribir #menu en cualquier momento para ver todas nuestras opciones disponibles.\n[muestra men√∫ inicial]\n\nUsuario: #menu\nMingo Bot: [muestra men√∫ completo con c√≥digos]\n\nUsuario: Sistons\nMingo Bot: Excelente elecci√≥n. La Sistons incluye medall√≥n blend secreto, cheddar x4, bacon ahumado, alioli de berenjena ahumada y pepinillos. ¬øLa prefer√≠s simple, doble o triple?\n\nUsuario: simple\nMingo Bot: Perfecto. Una Sistons simple ha sido a√±adida a tu pedido. ¬øQuer√©s personalizarla o agregar algo m√°s?\n\nUsuario: sin cebolla y extra bacon\nMingo Bot: Entendido. Tu Sistons simple ser√° preparada sin cebolla y con extra de bacon. ¬øDese√°s agregar algo m√°s a tu pedido?\n\nUsuario: papas_grandes\nMingo Bot: Excelente. Papas Grandes a√±adidas a tu pedido. ¬øDese√°s agregar algo m√°s o procedemos a confirmar?\n\nUsuario: ver pedido\nMingo Bot: Tu pedido hasta ahora:\n‚Ä¢ 1√ó Sistons Simple ($16.500) - sin cebolla, extra bacon\n‚Ä¢ 1√ó Papas Grandes ($5.500)\nTOTAL: $22.000\n¬øConfirmamos el pedido o dese√°s realizar alg√∫n cambio?\n\nUsuario: confirmar\nMingo Bot: Excelente. Por favor, indicame la direcci√≥n de entrega (calle, n√∫mero, piso/departamento)\n\nUsuario: Av. Corrientes 1234 5B\nMingo Bot: Direcci√≥n registrada. ¬øQu√© m√©todo de pago prefer√≠s?\n‚Ä¢ Efectivo (indic√° con cu√°nto vas a pagar)\n‚Ä¢ Mercado Pago\n‚Ä¢ Tarjeta (en el local)\n‚Ä¢ Transferencia\n\nUsuario: efectivo con 20000\nMingo Bot: Perfecto. Tu pedido ha sido confirmado.\n‚Ä¢ Tiempo estimado de entrega: 30-45 minutos\n‚Ä¢ Cambio a preparar: $2.000\n\n**PEDIDO_CONFIRMADO**\n```\n\n### Escenario de Cancelaci√≥n:\n\n```\nUsuario: quiero cancelar\nMingo Bot: ¬øEst√°s seguro de que dese√°s cancelar tu pedido? Por favor, escrib√≠ \"si\" para confirmar o \"no\" para continuar.\n\nUsuario: si\nMingo Bot: Pedido cancelado. Gracias por considerarnos. Estaremos disponibles cuando desees realizar un nuevo pedido.\n\n**PEDIDO_CANCELADO**\n```\n\n## 7. Capacidades Avanzadas\n\n- **Recomendaciones personalizadas:** \"¬øTe copa probar nuestra Burger Doble que va b√°rbaro con tus papas?\"\n- **Manejo de promociones:** Detecta combinaciones v√°lidas para descuentos\n- **Memoria de pedidos frecuentes:** \"¬øQuer√©s repetir lo mismo de la √∫ltima vez?\"\n- **Gesti√≥n de incidencias:** Protocolo especial para demoras o problemas\n- **Feedback post-entrega:** Solicitud de valoraci√≥n despu√©s de la entrega\n\n## 8. Limitaciones Claras\n\n- **Estrictamente delivery:** No gestiona reservas, reclamos ni atenci√≥n en local\n- **Sin modificaci√≥n de precios:** Precios fijos seg√∫n base de datos\n- **Restricci√≥n geogr√°fica:** Solo entregas en zona predefinida\n- **Sin horarios extraordinarios:** Respeta horarios de operaci√≥n\n- **Informaci√≥n limitada:** Solo datos relativos a productos y pedidos actuales\n\n## 9. Integraciones\n\n- **Base de datos en tiempo real:** Sincronizaci√≥n autom√°tica con inventario\n- **Geolocalizaci√≥n:** Validaci√≥n de direcciones dentro del radio de entrega\n- **Sistema de pagos:** Verificaci√≥n de pagos digitales\n- **Notificaciones:** Alertas sobre estado del pedido"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1040,
        -440
      ],
      "id": "5c0f8dbc-7af4-4ea2-922a-7cc09d6f54a2",
      "name": "Tester Prompt"
    },
    {
      "parameters": {
        "action": "generate"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -3000,
        -180
      ],
      "id": "e7eaefa2-3fe6-46a1-95c1-e70b63257459",
      "name": "Crypto"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e02fa309-efdc-4424-a35e-232970a746cf",
              "leftValue": "={{ $json.telefono }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3220,
        -280
      ],
      "id": "e5409e09-e586-4ae0-a1c2-2e8395b21f9f",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "60a730ae-12a3-4199-88e0-86b27dcbd9cc",
              "leftValue": "={{ $json.body.data.key.remoteJid.match(/@g\\.us$/) !== null }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "869159f1-8154-4fca-bcf2-10b1eb2502b0",
      "name": "From Me3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3880,
        -280
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bc1dbc77-10d2-48f4-ad72-0b5cffc255c7",
              "leftValue": "={{ $json.body.data.key.fromMe }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3660,
        -280
      ],
      "id": "cb87cfcf-843f-4cbf-803a-11ab196f3082",
      "name": "If"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "pp0ryisp756shl2",
        "table": "mokibxtj81aic9y",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "pushname",
              "fieldValue": "={{ $node[\"Webhook\"].json.body.data.pushName }}"
            },
            {
              "fieldName": "telefono",
              "fieldValue": "={{ $node[\"Webhook\"].json.body.data.key.remoteJid.replace(/\\D/g, '') }}"
            },
            {
              "fieldName": "key",
              "fieldValue": "={{ $json.data }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -2780,
        -180
      ],
      "id": "bb0bef53-cb54-45d4-882a-7b5df07b1293",
      "name": "Insertar Lead",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f9ecf2fc-da2c-4f44-897a-5dc0a2f2f379",
              "name": "msg.telefono",
              "value": "={{ $('Webhook').item?.json?.body?.data?.key?.remoteJid.replace(/\\D/g, '') || $('Webhook').item?.json?.body?.meta?.sender?.identifier.replace(/\\D/g, '') || null}}",
              "type": "string"
            },
            {
              "id": "dab7ca54-c3d2-4a36-a9ca-a0ebbd375ef5",
              "name": "msg.nombre",
              "value": "={{ $('Webhook').item?.json?.body?.data?.pushName || $('Webhook').item.json.body.meta.sender.name }}",
              "type": "string"
            },
            {
              "id": "01238a36-6907-4aec-ab21-26345ed5fc96",
              "name": "datos.server",
              "value": "={{ $('Webhook').item.json.body.instance }}",
              "type": "string"
            },
            {
              "id": "81612acf-1b66-4c8e-82e4-ce8c77b31334",
              "name": "msg.content",
              "value": "={{ \n  $('Webhook').item?.json?.body?.content?.mensaje?.extendedTextMessage?.text ||\n     $('Webhook').item?.json?.body?.data?.message?.extendedTextMessage?.text ||\n  $('Webhook').item?.json?.body?.data?.message?.imageMessage?.caption || \n  $('Webhook').item?.json?.body?.data?.message?.conversation || \n  $('Webhook').item?.json?.message?.text || \n  $('Webhook').item?.json?.message?.caption || $('Webhook').item.json.body.data.message.audioMessage \n}}",
              "type": "string"
            },
            {
              "id": "cc7dcfe1-8ad7-4fe8-93ec-8f643c7d08c7",
              "name": "msg.type",
              "value": "={{ $('Webhook').item?.json?.body?.data?.messageType || $('Webhook').item.json.body.messages[0].content_type }}",
              "type": "string"
            },
            {
              "id": "2dfc64f4-b222-4ea7-b095-fdd96d9fcb95",
              "name": "msg.idmsg",
              "value": "={{ $('Webhook').item?.json?.body?.data?.key?.id || $('Webhook').item.json.body.contact_inbox.source_id }}",
              "type": "string"
            },
            {
              "id": "076ad2d4-b8ea-440f-9c02-f7e8417a984d",
              "name": "datos.apikey",
              "value": "={{ $('Webhook').item?.json?.body?.apikey || '084938B823FE-4BA9-974E-8C8951DB4277' }}",
              "type": "string"
            },
            {
              "id": "01710423-6391-4a34-81e1-06d4779caf4d",
              "name": "msg.timestamp",
              "value": "={{ $('Webhook').item.json.body.data.messageTimestamp.toDateTime('s').toLocal().toISO()}}",
              "type": "string"
            },
            {
              "id": "e8e6023d-7c0e-4f8b-815f-2abdff369912",
              "name": "datos.server_url",
              "value": "={{ $('Webhook').item?.json?.body?.server_url || 'https://evo.innovasoftpro.dev'}}",
              "type": "string"
            },
            {
              "id": "ca81718f-74eb-4960-ac3a-5b59f39f8710",
              "name": "datos.server_db",
              "value": "https://db.innovasoftpro.dev",
              "type": "string"
            },
            {
              "id": "5553db2c-49aa-4a58-bafe-f8794ce8832d",
              "name": "datos.cliente_key",
              "value": "={{ $('getCliente').item.json.key }}",
              "type": "string"
            },
            {
              "id": "720d2599-daac-474d-904e-0ea0ee40689b",
              "name": "datos.cliente_id",
              "value": "={{ $('getCliente').item.json.Id }}",
              "type": "number"
            },
            {
              "id": "9115b918-14e1-4b2c-95ae-a926e65f61ca",
              "name": "bot.activo",
              "value": "={{ $json.activo }}",
              "type": "string"
            },
            {
              "id": "16fd7a29-5af4-4a04-9efb-ab0c249bf230",
              "name": "lista.id_row",
              "value": "={{ $('From Me3').item.json.body.data.message.listResponseMessage.singleSelectReply.selectedRowId }}",
              "type": "string"
            },
            {
              "id": "cfaf2792-627a-4d9f-a039-5741c802749f",
              "name": "datos.instance",
              "value": "={{ $('Webhook').item.json.body.instance }}",
              "type": "string"
            },
            {
              "id": "a3d07914-3c39-47d8-a122-9c1f6062c940",
              "name": "msg.ListaResponse",
              "value": "={{ $('Webhook').item.json.body.data.message.listResponseMessage.title }}\n{{ $('Webhook').item.json.body.data.message.listResponseMessage.description }}",
              "type": "string"
            },
            {
              "id": "d2215ba8-1fc7-46c2-bcc0-7bd813badd5b",
              "name": "msg.tittle_row_id",
              "value": "={{ $('Webhook').item.json.body.data.message.listResponseMessage.title }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "b33cc551-3c3f-47cb-9a86-555677b53d3c",
      "name": "Variables globales",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2540,
        -300
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pp0ryisp756shl2",
        "table": "mokibxtj81aic9y",
        "returnAll": true,
        "options": {
          "where": "=(telefono,eq,{{ $('Webhook').first().json.body.data.key.remoteJid.replace(/\\D/g, '') }}) "
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -3440,
        -280
      ],
      "id": "31eef11d-fafa-428f-ab97-0af385bea1c2",
      "name": "getCliente",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_delivery",
          "mode": "list",
          "cachedResultName": "n8n_delivery"
        },
        "deleteCommand": "delete",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4100,
        60
      ],
      "id": "898d79d5-e313-4188-ac20-185253e3158f",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "E1mi81N6Tmr5cHS5",
          "name": "GENERICO"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "qeva",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4100,
        -280
      ],
      "id": "99108ca4-235a-4320-9e87-ded78d64ef71",
      "name": "Webhook",
      "webhookId": "160af03a-d560-413b-bea9-ea1007aa1570"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=cel:{{ $('Variables globales').item.json.msg.telefono }}",
        "sessionTTL": 300,
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        1080,
        -200
      ],
      "id": "bfa3869e-a39b-4d91-af4c-aece69c2f9a2",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "=msg:{{ $json.msg.telefono }}",
        "messageData": "={{ JSON.stringify($json.msg) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2000,
        -100
      ],
      "id": "5d7b4b4c-58b2-47e0-b8fd-debe7e4764b1",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "message",
        "key": "=msg:{{ $('Variables globales').item.json.msg.telefono }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1740,
        -100
      ],
      "id": "0a587184-85e3-4297-bb6a-2b48cb4aabe2",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "37fa4c10-4aa3-4c88-8793-c66f540ea575",
                    "leftValue": "={{ JSON.parse($json.message.last()).timestamp }}",
                    "rightValue": "={{ $now.minus(5,'seconds').toLocal().toISO() }}",
                    "operator": {
                      "type": "dateTime",
                      "operation": "before"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "seguir"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "302c2f76-f09c-4d60-bfee-e77b9efe825e",
                    "leftValue": "ListaResponse",
                    "rightValue": "={{ $('Variables globales').item.json.lista }}",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1480,
        -100
      ],
      "id": "033aed30-e774-4a6a-883f-9972b1c90aa4",
      "name": "Switch"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1200,
        80
      ],
      "id": "dc2192a1-fbd9-4a29-9197-69f727dc7727",
      "name": "Wait",
      "webhookId": "31ebb3ff-4ccd-4bf1-ac16-b2dd2061d3b6"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=msg:{{ $('Variables globales').item.json.msg.telefono }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1200,
        -240
      ],
      "id": "ff3a74ed-1881-42aa-8395-01c7592ddfb5",
      "name": "Redis3",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "message",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1040,
        -240
      ],
      "id": "52dcf207-76fb-4acb-b942-3a3a564714cc",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $json.message }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        -240
      ],
      "id": "bde97603-3ed2-4573-af90-7cd49d867387",
      "name": "JSON Parse"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "726ef588-43c5-472e-89e8-a5bfb7656bba",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8cb854e2-c9dc-45e9-b6aa-5f6c0266b561",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "id": "ad530cc3-0d92-444d-a879-a28d98d6656d",
      "name": "Message Type1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -720,
        -240
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "X7HpeR5PlAtWKQXi",
          "mode": "list",
          "cachedResultName": "AGENTE DELIVERY - LISTAS"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "numero_cliente": "={{ $('Variables globales').item.json.msg.telefono }}",
            "session_id": "={{ $('Variables globales').item.json.msg.idmsg }}",
            "instancia": "={{ $('Variables globales').item.json.datos.instance }}",
            "apikey": "={{ $('Variables globales').item.json.datos.apikey }}",
            "tittle": "={{ $('Variables globales').item.json.lista.id_row }}",
            "url": "={{ $('Variables globales').item.json.datos.server_url }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "numero_cliente",
              "displayName": "numero_cliente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "instancia",
              "displayName": "instancia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "apikey",
              "displayName": "apikey",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "tittle",
              "displayName": "tittle",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -2000,
        -660
      ],
      "id": "a655acc4-b2d1-43a8-ae0b-b6755748d8f6",
      "name": "Listas"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b7d210f0-6a18-456d-9e89-aa28f548b2a0",
              "name": "body.data.message.base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "93f1c4e9-0e3c-4ee9-86d5-5e3d93721899",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -300,
        -240
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "body.data.message.base64",
        "options": {
          "mimeType": "audio/mp3"
        }
      },
      "id": "9990c300-ce95-4f38-9a20-5fa5554bfb4e",
      "name": "Convert to File1",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -140,
        -240
      ]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        20,
        -240
      ],
      "id": "3b154b3e-0179-4da8-b6be-f644409e8425",
      "name": "Transcribir",
      "credentials": {
        "openAiApi": {
          "id": "UfA35dBDzEebw8zR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        360,
        -420
      ],
      "id": "6f81d178-6d04-43a9-a651-b585e3197fb1",
      "name": "Merge1"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "timestamp"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        520,
        -420
      ],
      "id": "047f404b-f02b-4ad0-8a75-d6c3653290d2",
      "name": "Sort"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "592a9044-042e-4906-a512-1dca3c55cd6a",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "1b82679b-242a-47f8-a614-662442de52ac",
              "name": "timestamp",
              "value": "={{ $('Edit Fields1').item.json.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        180,
        -240
      ],
      "id": "fe104e99-4718-4202-bc41-d2f5aeb6f225",
      "name": "text"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "text",
              "renameField": true,
              "outputFieldName": "message"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        680,
        -420
      ],
      "id": "d3748c92-c2fb-42a5-bf0a-4a4603a5d2e0",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fae28c9-d30a-4250-9a50-5b68c61164cf",
              "name": "message",
              "value": "={{ $json.message.join(\"\\n\") }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        840,
        -440
      ],
      "id": "ed8e037e-e979-44c6-8206-d72ee7917d23",
      "name": "chatInput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "592a9044-042e-4906-a512-1dca3c55cd6a",
              "name": "text",
              "value": "={{ $('JSON Parse').item.json.content }}",
              "type": "string"
            },
            {
              "id": "1b82679b-242a-47f8-a614-662442de52ac",
              "name": "timestamp",
              "value": "={{ $('JSON Parse').item.json.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -300,
        -520
      ],
      "id": "ffe83397-3a91-45ae-8c70-e17ca1c5e4b6",
      "name": "text1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "592a9044-042e-4906-a512-1dca3c55cd6a",
              "name": "text",
              "value": "={{ $('JSON Parse').item.json.content }}",
              "type": "string"
            },
            {
              "id": "1b82679b-242a-47f8-a614-662442de52ac",
              "name": "timestamp",
              "value": "={{ $('JSON Parse').item.json.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -940,
        -700
      ],
      "id": "3b304e8f-5b30-4ad0-866b-02786710c08e",
      "name": "text2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ /^cat_.*/.test($json.lista.id_row) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "29901a2b-7a51-4913-82e8-b76f745ec990"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Listas"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fd254dd5-b87c-474c-847c-a95e32ab63da",
                    "leftValue": "={{ $json.msg.content }}",
                    "rightValue": "#menu",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Menu"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8389ffd3-a729-4622-b59f-b4948ba88079",
                    "leftValue": "={{ $json.msg.type }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "texto"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2340,
        -320
      ],
      "id": "57c3e937-1193-49cb-9f3a-aef54e5eb637",
      "name": "Listas1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Variables globales').item.json.datos.server_url }}/message/sendList/{{ $('Variables globales').item.json.datos.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Variables globales').item.json.datos.apikey}}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Variables globales').item.json.msg.telefono }}"
            },
            {
              "name": "title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "description",
              "value": "={{ $json.description }}"
            },
            {
              "name": "buttonText",
              "value": "={{ $json.buttonText }}"
            },
            {
              "name": "footerText",
              "value": "={{ $json.footerText }}"
            },
            {
              "name": "sections",
              "value": "={{ $json.sections }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1740,
        -460
      ],
      "id": "d0dd7db0-260b-4461-91fc-e878ccdac3fc",
      "name": "menu",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "592a9044-042e-4906-a512-1dca3c55cd6a",
              "name": "text",
              "value": "={{ $('Variables globales').item.json.msg.ListaResponse }}",
              "type": "string"
            },
            {
              "id": "1b82679b-242a-47f8-a614-662442de52ac",
              "name": "timestamp",
              "value": "={{ $('Variables globales').item.json.msg.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1740,
        -280
      ],
      "id": "de3a3798-8dea-4205-b55e-2316d9d66c85",
      "name": "text3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3724f9da-543d-4d38-8a62-1a49840dfedf",
              "leftValue": "={{ $json.msg.ListaResponse }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2000,
        -260
      ],
      "id": "6a68b247-2c8d-4dc6-82e7-79d96a3dbd33",
      "name": "If1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -4320,
        -300
      ],
      "id": "8afb9c91-040f-48f9-b470-3d04be8cebc7",
      "name": "When Executed by Another Workflow",
      "disabled": true
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.innovasoftpro.dev",
            "user-agent": "axios/1.7.9",
            "content-length": "758",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n.innovasoftpro.dev",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "575dad520f0e",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "qeva",
            "data": {
              "key": {
                "remoteJid": "5492234245220@s.whatsapp.net",
                "fromMe": true,
                "id": "158378CEF12D6C9E11A9A1A3C17F0444"
              },
              "pushName": "Autom√°tizaciones AI",
              "status": "SERVER_ACK",
              "message": {
                "reactionMessage": {
                  "key": {
                    "remoteJid": "5492234245220@s.whatsapp.net",
                    "fromMe": false,
                    "id": "3A60F2572CA9BA11E944"
                  },
                  "text": "üëçüèª",
                  "senderTimestampMs": "1748029326072"
                }
              },
              "messageType": "reactionMessage",
              "messageTimestamp": 1748029325,
              "instanceId": "588f50d5-9323-4ec2-a701-6019611508c0",
              "source": "android"
            },
            "destination": "https://n8n.innovasoftpro.dev/webhook/qeva",
            "date_time": "2025-05-23T16:42:05.690Z",
            "sender": "5492254596618@s.whatsapp.net",
            "server_url": "https://evo.innovasoftpro.dev",
            "apikey": "3463F236FF41-417E-8F0A-7F1D0F575FF9"
          },
          "webhookUrl": "https://n8n.innovasoftpro.dev/webhook/qeva",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Argentina/Buenos_Aires",
    "errorWorkflow": "2kOn0Oz7c2uvczPK"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-05-15T01:36:11.776Z",
      "updatedAt": "2025-05-15T01:36:11.776Z",
      "id": "d3d6zb9nCLfGQXaG",
      "name": "delivery"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-05-24T20:06:24.954Z",
  "versionId": "fc49dfd3-b996-42b3-bd51-965d7acec288"
}