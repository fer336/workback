{
  "active": false,
  "connections": {
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "imagen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compara Get Memory": {
      "main": [
        [
          {
            "node": "Compara memorias",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Memory 2": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Get Memory 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Compara Get Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Memory 1": {
      "main": [
        [
          {
            "node": "Escribiendo...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "MESSAGE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit1": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Limpiamos Imagen": {
      "main": [
        [
          {
            "node": "Variables individuales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Variables individuales": {
      "main": [
        [
          {
            "node": "Text Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compara memorias": {
      "main": [
        [
          {
            "node": "Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Memory": {
      "main": [
        [
          {
            "node": "Get Memory 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen_gastos": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Datos": {
      "main": [
        [
          {
            "node": "Text Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calculadora": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Insertar gastos": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escribiendo...": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "Datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "imagen": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Limpiamos Imagen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Delete": {
      "main": [
        []
      ]
    },
    "Audio Memory": {
      "main": [
        [
          {
            "node": "Return Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Memory": {
      "main": [
        [
          {
            "node": "Return Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 10s": {
      "main": [
        [
          {
            "node": "Get Memory ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Audio Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tiempo1": {
      "main": [
        [
          {
            "node": "Wait 10s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return Redis1": {
      "main": [
        [
          {
            "node": "Tiempo1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compara igualdad de memorias": {
      "main": [
        [
          {
            "node": "Delete1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Memory ": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI3": {
      "main": [
        [
          {
            "node": "Image Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "Compara Get Memory1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compara Get Memory1": {
      "main": [
        [
          {
            "node": "Compara igualdad de memorias",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "apilaText": {
      "main": [
        [
          {
            "node": "Return Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type": {
      "main": [
        [
          {
            "node": "apilaText",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Message Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MESSAGE": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "replace1": {
      "main": [
        []
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "MESSAGE1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "replace": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MESSAGE1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-12-25T16:01:24.472Z",
  "id": "l0eWfhQiukoE5hId",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "RAG PERSONAL",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b7d210f0-6a18-456d-9e89-aa28f548b2a0",
              "name": "body.data.message.base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "1954ee24-278e-4501-a52a-5b6fc8e50537",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        740,
        860
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "body.data.message.base64",
        "options": {
          "mimeType": "audio/mp3"
        }
      },
      "id": "f8769f0d-bbef-4966-87e4-d881a0d8652f",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        920,
        1660
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d5a342e9-585b-42ea-be44-644adae10199",
              "leftValue": "={{ $json.Redis1 }}",
              "rightValue": "={{ $json.Redis2 }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "46308980-9ad2-4bd8-b131-7e046f566b1c",
      "name": "Compara Get Memory",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1760,
        1340
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Redis2",
        "key": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
        "options": {}
      },
      "id": "5a1c520d-bad6-41f8-98fd-9f51970315ac",
      "name": "Get Memory 2",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1440,
        1340
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "amount": 9
      },
      "id": "4ab0f72c-ac84-4ca4-88c7-ec6a195c678c",
      "name": "Wait2",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1300,
        1340
      ],
      "webhookId": "6f130bc2-7de0-4353-b6d0-653f7c7e6623"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "86ff282a-3ede-4417-98c1-0d10858bc5dc",
              "name": "Redis1",
              "value": "={{ $('Get Memory 1').item.json.Redis1 }}",
              "type": "string"
            },
            {
              "id": "3cd6e8a1-98ef-4abb-9490-fb7946365cfb",
              "name": "Redis2",
              "value": "={{ $json.Redis2 }}",
              "type": "string"
            },
            {
              "id": "975fae7d-8ba6-4149-9d13-868f9089e362",
              "name": "session_id",
              "value": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "44b9f086-b3ab-4bdb-b82d-923349941e26",
              "name": "Redis3",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "ff27d9c8-e17b-477b-9524-33435bc8921a",
      "name": "Redis",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1600,
        1340
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Redis1",
        "key": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
        "options": {
          "dotNotation": true
        }
      },
      "id": "e0ff11fe-076d-46ad-92d5-47f1569f7268",
      "name": "Get Memory 1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1020,
        1340
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b7d210f0-6a18-456d-9e89-aa28f548b2a0",
              "name": "body.data.message.base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "646debfc-8045-454b-bfca-3bf2d323d6f6",
      "name": "Edit Fields3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        720,
        1660
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "text",
        "options": {}
      },
      "id": "c7cb0e69-0f16-4e10-9d5f-fb9303e88e39",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1560,
        -1380
      ]
    },
    {
      "parameters": {
        "amount": "=1"
      },
      "id": "04a571d5-07e9-40ad-bd40-10c140fd7504",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2020,
        -1180
      ],
      "webhookId": "6f130bc2-7de0-4353-b6d0-653f7c7e6623"
    },
    {
      "parameters": {
        "batchSize": "=1",
        "options": {
          "reset": false
        }
      },
      "id": "0d404c70-81a8-4241-819f-984ed2894d52",
      "name": "Loop Over Items1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1740,
        -1380
      ],
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {},
      "id": "d9a1e17a-42c7-42ad-92f2-96fb30401b16",
      "name": "Limit1",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        2020,
        -1480
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b291a8fe-7b37-4a29-931f-101fb1ee9fc1",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        780,
        -1000
      ],
      "credentials": {
        "openAiApi": {
          "id": "UfA35dBDzEebw8zR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "21febd42-6a94-4e95-a4e0-a82e9eac9008",
              "name": "Limpio",
              "value": "={{ $json.content.replace(/\\\\n|\"\"\"|json|\\\\/g, '').trim() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "207c8563-0a6d-4660-a1b7-9b05b8bfa712",
      "name": "Limpiamos Imagen",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1160,
        860
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d04d69d-cb9c-41be-a44a-95fac3c059f3",
              "name": "fecha",
              "value": "={{ $json.Limpio.match(/\"fecha\":\\s*\"([^\"]+)\"/)?.[1] || '' }}",
              "type": "string"
            },
            {
              "id": "791d6622-0b9c-4ff9-abd7-63c54c4c4f5f",
              "name": "monto",
              "value": "={{ $json.Limpio.match(/\"monto\":\\s*\"([^\"]+)\"/).at(1) || '0' }}",
              "type": "string"
            },
            {
              "id": "f2db0e16-0432-4de3-95bf-3e98a298b939",
              "name": "categoria",
              "value": "={{ $json.Limpio.match(/\"categoria\":\\s*\"([^\"]+)\"/)?.[1] || '' }}",
              "type": "string"
            },
            {
              "id": "217c0a67-02b4-4bea-823d-a4ef5bc585d2",
              "name": "descripcion",
              "value": "={{ $json.Limpio.match(/\"descripcion\":\\s*\"([^\"]+)\"/)?.[1] || '' }}",
              "type": "string"
            },
            {
              "id": "1ffa6e8b-6941-49aa-b39e-6f54382b71ff",
              "name": "metodo_pago",
              "value": "={{ $json.Limpio.match(/\"metodo_pago\":\\s*\"([^\"]+)\"/)?.[1] || '' }}",
              "type": "string"
            },
            {
              "id": "dd3ab75e-5ccc-45d3-a28f-1e02321e8bcf",
              "name": "razon_social",
              "value": "={{ $json.Limpio.match(/\"razon_social\":\\s*\"([^\"]+)\"/)?.[1] || '' }}",
              "type": "string"
            },
            {
              "id": "448bcd3f-595a-43a9-a0a7-0e3b13767793",
              "name": "var",
              "value": "={{ $json.Limpio }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "0919d764-539e-4d1c-a0bc-74feca590fe0",
      "name": "Variables individuales",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1300,
        860
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $item(0).$node[\"Compara Get Memory\"].json[\"Redis2\"]; \n\nlet array = Array.isArray(data) ? data : JSON.parse(data);\n\nconst mensage_completo = array.join(\" \");\n\nreturn [{ json: { mensage_completo } }];\n"
      },
      "id": "527182a0-7294-42d0-92d1-1f9893d9c25d",
      "name": "Compara memorias",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        880
      ]
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
        "messageData": "={{ $json.Limpio }} || {{ $json.text }} || {{ $json.voice }} ||  {{ $json.var }}",
        "tail": true
      },
      "id": "6be56a24-2010-4022-b5b4-51a4c03a2ad4",
      "name": "Text Memory",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        880,
        1340
      ],
      "alwaysOutputData": false,
      "executeOnce": false,
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "name": "resumen_gastos",
        "description": "Llamaras a esta herramienta cuando el usuario necesita saber los gastos semanales, mensuales o diarios",
        "workflowId": {
          "__rl": true,
          "value": "31qNrynUbCN8A34k",
          "mode": "list",
          "cachedResultName": "RAG Personal - resumen gastos"
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n\t\"desde\": \"2025-01-01\",    \n    \"hasta\":\"2025-01-10\"\n}"
      },
      "id": "c96ded6a-9800-4a88-aeab-254a341e0b99",
      "name": "resumen_gastos",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1320,
        -1000
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1c859eff-6baa-453d-b6dd-818fabad66fd",
              "name": "Limpio",
              "value": "={{ $json.body.data.message.conversation || $json.text || ($('Limpiamos Imagen', 0) ? $('Limpiamos Imagen').item.json.Limpio : 'Sin datos disponibles') }}\n",
              "type": "string"
            },
            {
              "id": "cf15fa6e-e477-438d-8119-e72a917e5e46",
              "name": "text",
              "value": "={{ $json.body.data.message.conversation }}",
              "type": "string"
            },
            {
              "id": "921bc6a5-5eaf-489b-88a2-10b654611e3c",
              "name": "voice",
              "value": "={{$json.text || ''}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "7a926c28-643e-46c3-abff-2b82253df00e",
      "name": "Datos",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        740,
        1340
      ]
    },
    {
      "parameters": {},
      "id": "200a2c48-4ba7-448f-ad26-4d9e35ff0656",
      "name": "calculadora",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        1040,
        -1000
      ]
    },
    {
      "parameters": {
        "name": "insertar_gasto",
        "description": "LLamaras a esta herramienta cuando el usuario confirme un gasto",
        "workflowId": {
          "__rl": true,
          "value": "31qNrynUbCN8A34k",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "Fer",
              "stringValue": "={{ $('Webhook').item.json.body.data.key.remoteJid }}"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"fecha\": \"25-01-2025\",\n  \"monto\": 29543.31, \n  \"categoria\": \"Pinturería\",\n  \"metodo_pago\": \"Contado\",\n  \"razon_social\": \"FUNDACIÓN\"\n}\n"
      },
      "id": "95913f0f-95dc-44e9-8625-52b266fa6e73",
      "name": "Insertar gastos",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1180,
        -1000
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/chat/sendPresence/{{ $node['Webhook'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"number\": \"{{ $node['Webhook'].json.body.data.key.remoteJid }}\",\n    \"delay\": 3000,\n    \"presence\": \"composing\"\n}",
        "options": {}
      },
      "id": "0e775233-0a80-4225-addc-645d712102af",
      "name": "Escribiendo...",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1160,
        1340
      ]
    },
    {
      "parameters": {
        "content": "## Elimina base de datos conversacional",
        "height": 178.30485910941883,
        "width": 431.36898159846913,
        "color": 7
      },
      "id": "b3ffc222-f076-4a44-9c3e-c5f7963ee785",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -780,
        840
      ]
    },
    {
      "parameters": {
        "content": "## Transcribe audio a texto",
        "height": 253,
        "width": 1229
      },
      "id": "49addf28-c059-4d94-80d3-e67147eac1a0",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        640,
        1580
      ]
    },
    {
      "parameters": {
        "content": "## Obtiene los datos de las imagenes",
        "height": 442.04353939667726,
        "width": 1220.142001404333,
        "color": 3
      },
      "id": "38bc0594-9d47-47db-945a-8e688105dd14",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        640,
        780
      ]
    },
    {
      "parameters": {
        "content": "## Memoria",
        "height": 266.50099845480025,
        "width": 1233.5096557871489,
        "color": 4
      },
      "id": "8455975e-c11c-4dda-88dd-a6962c7e86ad",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        640,
        1260
      ]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "7aad41a7-3de5-48da-a1b1-25a4a1cea37a",
      "name": "OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.7,
      "position": [
        1100,
        1660
      ],
      "credentials": {
        "openAiApi": {
          "id": "UfA35dBDzEebw8zR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "body.data.message.base64",
        "options": {}
      },
      "id": "76d7e819-9fba-4a92-93ab-12d7cd8c92c8",
      "name": "imagen",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        880,
        860
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
        "tableName": "n8n_chat_histories_personal"
      },
      "id": "ab12c868-ea7a-4c4a-b507-75da9a91311f",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        920,
        -1000
      ],
      "credentials": {
        "postgres": {
          "id": "E1mi81N6Tmr5cHS5",
          "name": "GENERICO"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message_completo }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={\n  \"asistente\": {\n    \"nombre\": \"Asistente Financiero Personal\",\n    \"version\": \"1.0\",\n    \"configuracion\": {\n      \"modelo\": \"gpt-4\",\n      \"temperatura\": 0.7,\n      \"maximoTokens\": 1500\n    }\n  },\n  \"instrucciones\": {\n    \"rol\": \"Eres un Asistente Financiero Personal especializado, diseñado para ayudar al usuario a mantener un control preciso de sus finanzas personales y gestionar eficientemente su tiempo a través de n8n.\",\n    \"contexto\": \"El usuario necesita un sistema para registrar gastos e ingresos en NocoDB, así como gestionar su tiempo con Google Tasks y Google Calendar. Proporcionas una interfaz conversacional amigable que le ayuda a mantener sus finanzas organizadas.\",\n    \"voz\": \"Profesional pero cercano, paciente, claro y educativo. Adapta tu lenguaje según el nivel de conocimiento financiero del usuario.\"\n  },\n  \"capacidades\": [\n    {\n      \"id\": \"gestion_finanzas\",\n      \"nombre\": \"Gestión de Finanzas Personales\",\n      \"descripcion\": \"Ayuda a registrar y analizar transacciones financieras\",\n      \"acciones\": [\n        \"Registrar gastos e ingresos en NocoDB\",\n        \"Categorizar transacciones\",\n        \"Ofrecer análisis de gastos\",\n        \"Calcular balances y proyecciones\",\n        \"Establecer y monitorear presupuestos\"\n      ]\n    },\n    {\n      \"id\": \"gestion_tareas\",\n      \"nombre\": \"Gestión de Tareas y Calendario\",\n      \"descripcion\": \"Ayuda a organizar el tiempo y los compromisos\",\n      \"acciones\": [\n        \"Crear tareas en Google Tasks\",\n        \"Programar eventos en Google Calendar\",\n        \"Enviar recordatorios para pagos\",\n        \"Programar revisiones financieras\"\n      ]\n    },\n    {\n      \"id\": \"educacion_financiera\",\n      \"nombre\": \"Consejos y Educación Financiera\",\n      \"descripcion\": \"Proporciona orientación para mejorar la situación financiera\",\n      \"acciones\": [\n        \"Ofrecer consejos prácticos\",\n        \"Sugerir estrategias de ahorro\",\n        \"Compartir información educativa\"\n      ]\n    }\n  ],\n  \"baseDeDatos\": {\n    \"nombre\": \"NocoDB\",\n    \"tablas\": [\n      {\n        \"nombre\": \"Transacciones\",\n        \"campos\": [\n          {\n            \"nombre\": \"fecha\",\n            \"tipo\": \"date\",\n            \"formato\": \"YYYY-MM-DD\",\n            \"descripcion\": \"Fecha de la transacción\"\n          },\n          {\n            \"nombre\": \"monto\",\n            \"tipo\": \"number\",\n            \"descripcion\": \"Valor numérico (positivo para ingresos, negativo para gastos)\"\n          },\n          {\n            \"nombre\": \"categoria\",\n            \"tipo\": \"string\",\n            \"descripcion\": \"Tipo de transacción\",\n            \"ejemplos\": [\"Alimentación\", \"Transporte\", \"Vivienda\", \"Entretenimiento\", \"Salario\", \"Inversiones\"]\n          },\n          {\n            \"nombre\": \"metodo_pago\",\n            \"tipo\": \"string\",\n            \"descripcion\": \"Forma de pago utilizada\",\n            \"ejemplos\": [\"Efectivo\", \"Tarjeta de crédito\", \"Transferencia\", \"Débito automático\"]\n          },\n          {\n            \"nombre\": \"razon_social\",\n            \"tipo\": \"string\",\n            \"descripcion\": \"Empresa o persona relacionada con la transacción\"\n          }\n        ]\n      }\n    ]\n  },\n  \"integraciones\": [\n    {\n      \"nombre\": \"Google Tasks\",\n      \"descripcion\": \"Para registrar recordatorios y tareas financieras\",\n      \"campos_requeridos\": [\"titulo\", \"fecha_limite\", \"recordatorio\"]\n    },\n    {\n      \"nombre\": \"Google Calendar\",\n      \"descripcion\": \"Para agendar reuniones y fechas importantes\",\n      \"campos_requeridos\": [\"titulo\", \"fecha\", \"hora\", \"duracion\", \"recordatorio\"]\n    }\n  ],\n  \"flujos_trabajo\": [\n    {\n      \"id\": \"registro_transaccion\",\n      \"nombre\": \"Registro de Transacción\",\n      \"pasos\": [\n        \"Solicitar información completa (fecha, monto, categoría, método, razón social)\",\n        \"Validar datos\",\n        \"Confirmar registro\"\n      ],\n      \"ejemplo_entradas\": [\n        \"Registra un gasto de 50000 en combustible en Shell con tarjeta de crédito\",\n        \"Anota un ingreso de 150000 por trabajo freelance\",\n        \"Gasté 3500 en el supermercado ayer\"\n      ]\n    },\n    {\n      \"id\": \"consulta_finanzas\",\n      \"nombre\": \"Consulta de Finanzas\",\n      \"pasos\": [\n        \"Interpretar período solicitado\",\n        \"Presentar resumen relevante\",\n        \"Ofrecer análisis adicional\"\n      ],\n      \"ejemplo_entradas\": [\n        \"¿Cuánto gasté en restaurantes este mes?\",\n        \"Muéstrame mis ingresos del último trimestre\",\n        \"¿Cuál fue mi mayor gasto la semana pasada?\"\n      ]\n    },\n    {\n      \"id\": \"gestion_calendario\",\n      \"nombre\": \"Gestión de Calendario\",\n      \"pasos\": [\n        \"Capturar detalles del evento\",\n        \"Confirmar con usuario\",\n        \"Programar en calendario\"\n      ],\n      \"ejemplo_entradas\": [\n        \"Programa una reunión con mi contador el próximo jueves a las 4pm\",\n        \"Agenda una revisión financiera para el primer día del mes\",\n        \"Recordatorio para revisar mi presupuesto este domingo\"\n      ]\n    }\n  ],\n  \"ejemplos_interaccion\": [\n    {\n      \"tipo\": \"registro_gasto\",\n      \"usuario\": \"Registra un gasto de $45.30 en supermercado Carrefour con tarjeta de débito ayer\",\n      \"asistente\": [\n        \"Voy a registrar ese gasto. Necesito confirmar algunos detalles:\",\n        \"• Fecha: [fecha de ayer]\",\n        \"• Monto: $45.30 (gasto)\",\n        \"• Categoría: Alimentación (supermercado)\",\n        \"• Método de pago: Tarjeta de débito\",\n        \"• Razón social: Carrefour\",\n        \"\",\n        \"¿Es correcta esta información? ¿Deseas agregar algún detalle adicional?\"\n      ],\n      \"usuario_confirmacion\": \"Sí, es correcto\",\n      \"asistente_confirmacion\": \"¡Perfecto! He registrado el gasto de $45.30 en Carrefour realizado ayer con tarjeta de débito bajo la categoría Alimentación. Tu registro financiero ha sido actualizado. ¿Necesitas registrar algo más?\"\n    },\n    {\n      \"tipo\": \"consulta_gastos\",\n      \"usuario\": \"¿Cuánto he gastado en restaurantes este mes?\",\n      \"asistente\": \"He consultado tus gastos en la categoría 'Restaurantes' para [mes actual]. Has gastado un total de $237.50 en esta categoría, lo que representa aproximadamente el 15% de tus gastos totales del mes. ¿Te gustaría ver el desglose de estos gastos o compararlo con meses anteriores?\"\n    },\n    {\n      \"tipo\": \"programacion_calendario\",\n      \"usuario\": \"Programa una reunión con mi contador el próximo jueves a las 4pm\",\n      \"asistente\": [\n        \"Voy a agendar esa reunión en tu calendario. Confirma por favor:\",\n        \"• Título: Reunión con contador\",\n        \"• Fecha: [próximo jueves]\",\n        \"• Hora: 4:00 PM\",\n        \"• Duración: 1 hora (predeterminado)\",\n        \"• Recordatorio: 30 minutos antes (predeterminado)\",\n        \"\",\n        \"¿Es correcta esta información? ¿Deseas agregar más detalles como ubicación o información adicional?\"\n      ]\n    },\n    {\n      \"tipo\": \"creacion_tarea\",\n      \"usuario\": \"Recuérdame pagar la factura de luz antes del día 15\",\n      \"asistente\": [\n        \"He creado una tarea en Google Tasks:\",\n        \"• Tarea: Pagar factura de luz\",\n        \"• Fecha límite: 15 de [mes actual]\",\n        \"• Prioridad: Alta\",\n        \"• Recordatorio: 2 días antes (13 de [mes actual])\",\n        \"\",\n        \"La tarea ha sido agregada. Te recordaré sobre este pago cuando se acerque la fecha.\"\n      ]\n    }\n  ],\n  \"mejores_practicas\": {\n    \"privacidad\": [\n      \"Nunca solicitar contraseñas o datos de acceso\",\n      \"No almacenar información personal sensible\",\n      \"Recordar revisar datos financieros periódicamente\"\n    ],\n    \"finanzas\": [\n      \"Fomentar revisión regular de transacciones\",\n      \"Sugerir categorías adecuadas para mejor análisis\",\n      \"Promover establecimiento de metas financieras realistas\",\n      \"Recomendar creación de fondo de emergencia\"\n    ],\n    \"limitaciones\": [\n      \"No realizar transacciones financieras directamente\",\n      \"No modificar configuraciones de cuentas bancarias\",\n      \"No ofrecer asesoramiento financiero profesional regulado\"\n    ]\n  },\n  \"herramientas\": {\n    \"analisis_datos\": [\n      \"Cálculos financieros básicos y avanzados\",\n      \"Detección de patrones de gasto\",\n      \"Generación de informes y visualizaciones\"\n    ],\n    \"integracion_sistemas\": [\n      \"Compatibilidad con NocoDB\",\n      \"Interfaz con Google Tasks\",\n      \"Conexión con Google Calendar\"\n    ],\n    \"educacion\": [\n      \"Conceptos financieros personales\",\n      \"Recursos sobre presupuestos y ahorro\",\n      \"Consejos personalizados según comportamiento\"\n    ]\n  },\n  \"instrucciones_implementacion\": {\n    \"pasos\": [\n      \"Configurar conexiones a NocoDB en n8n\",\n      \"Establecer integraciones con Google Tasks y Calendar\",\n      \"Implementar flujos de trabajo para cada interacción\",\n      \"Configurar validaciones para los datos ingresados\",\n      \"Realizar pruebas exhaustivas antes de uso regular\"\n    ],\n    \"notas_formato\": [\n      \"Usar bullets (•) para listas en WhatsApp\",\n      \"Separar mensajes largos en bloques lógicos\"\n      \n    ]\n  }\n}"
        }
      },
      "id": "cb2e943a-0ac8-4ac3-85d7-0cec6efafb86",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        840,
        -1380
      ]
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "text": "=Analiza esta imagen de comprobante y extrae la siguiente información en el siguiente formato\nsi hay un dato que no tienes informacion pon el emoji \"❌\"  y si los datos estan correcto agregale el check \"✅\" :\n\n{\n  \"fecha\": \"\",\n  \"monto\": xxxx.x,\n  \"descripcion\": \"\",\n  \"categoria\": \"\",\n  \"metodo_pago\": \"\",\n  \"razon_social\": \"\",\n  \"comprobante\": \"\",\n  \"productos\": [\n    {\n      \"producto_nombre\": \"ISOM. MOL. DOR. PIN. TEOD./PAR (EPS) 80 350GR\",\n      \"cantidad\": 2,\n      \"precio_unitario\": 3518.00\n    },\n    {\n      \"producto_nombre\": \"PRINZ. ENDUIDO (PANT. INTERIOR BLANCO)\",\n      \"cantidad\": 1,\n      \"precio_unitario\": 6266.00\n    }\n  ]\n}\n\n\n\nrecuerda que la fecha debes guardarla en formate Date ('yyyy-MM-dd')",
        "inputType": "base64",
        "options": {
          "detail": "auto"
        }
      },
      "id": "8b3ab792-c734-4056-bc04-8f31cd5168ac",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.7,
      "position": [
        1020,
        860
      ],
      "credentials": {
        "openAiApi": {
          "id": "UfA35dBDzEebw8zR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Webhook').item.json.body.data.key.remoteJid }}"
      },
      "id": "92895285-03ce-486f-9d02-a092e0537e94",
      "name": "Delete",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1680,
        880
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
        "messageData": "={{ $json.text }}",
        "tail": true
      },
      "id": "a0b694b5-694a-434e-a852-949a20512ea5",
      "name": "Audio Memory",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1320,
        -1120
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
        "messageData": "={{ $json.content }}",
        "tail": true
      },
      "id": "1220b9af-ac9e-40f0-9899-fe46cccb9e12",
      "name": "Image Memory",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1320,
        -820
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "amount": "={{ $json.responseDelay /1000 }}"
      },
      "id": "68673100-dff4-4982-adb4-5ca66fec12a6",
      "name": "Wait 10s",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -620,
        -1280
      ],
      "webhookId": "241554e1-7fe9-4c6d-9c49-69ec498c8481"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "body.data.message.base64",
        "options": {
          "mimeType": "audio/mp3"
        }
      },
      "id": "9d2deaa3-62c1-4a32-a577-9b9a43a3cfa0",
      "name": "Convert to File1",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1740,
        -1120
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b7d210f0-6a18-456d-9e89-aa28f548b2a0",
              "name": "body.data.message.base64",
              "value": "={{ $('Webhook1').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "a73280ff-ebf4-49f2-b6d8-7c537175af90",
      "name": "Edit Fields4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1960,
        -1120
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtener historial de mensajes desde Redis\nconst redisMessages = $input.first().json.Redis1 || [];\n\n// Extraer el último mensaje recibido, asegurando que sea un string válido\nconst userMessage = Array.isArray(redisMessages) && redisMessages.length > 0\n  ? String(redisMessages[redisMessages.length - 1]).trim().toLowerCase()\n  : \"\";\n\n// Obtener la cantidad de mensajes en cola desde Redis en los últimos 6 segundos\nconst queueLength = parseInt($json.queueLength || \"0\", 10);\n\n// Contar palabras en el mensaje\nconst words = userMessage.trim().split(/\\s+/).filter(Boolean);\nconst wordCount = words.length;\n\n// Contar caracteres en el mensaje\nconst charCount = userMessage.length;\n\n// Detectar si el mensaje contiene solo palabras de 6 caracteres o menos\nconst isShortMessage = words.every(word => word.length <= 6);\n\n// Detectar si el mensaje es numérico (puede ser un solo número o varios números separados por espacio)\nconst isNumericMessage = /^[0-9\\s]+$/.test(userMessage);\n\n// Detectar si es un mensaje corto de respuesta rápida\nconst quickReplies = [\"ok\", \"sí\", \"dale\", \"hola\", \"gracias\", \"entendido\", \"bien\", \"cómo estás\", \"adiós\"];\nconst isQuickReply = quickReplies.includes(userMessage);\n\n// 🚀 **Lógica del delay**\nlet responseDelay = 9000; // ⏳ Por defecto, 9 segundos\n\n// 🏃 Mensajes cortos, numéricos o respuestas rápidas → Delay de 1 segundo\nif (isQuickReply || isNumericMessage || (isShortMessage && wordCount <= 3)) {\n  responseDelay = 1000;\n}\n\nreturn { json: { responseDelay } };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -820,
        -1280
      ],
      "id": "2e0dbe5e-acbe-4e29-aaa0-8cc43aca0a42",
      "name": "Tiempo1"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Redis1",
        "key": "={{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
        "options": {}
      },
      "id": "b0ebe29a-fd1d-4511-a27c-045f3b2d51c1",
      "name": "Return Redis1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1020,
        -1280
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data = $item(0).$node[\"Compara Get Memory1\"].json[\"Redis2\"];\n\n// Verifica si data es un array directamente\nlet array;\n\nif (Array.isArray(data)) {\n    array = data;\n} else {\n    try {\n        // Intenta parsear si es una cadena JSON válida\n        array = JSON.parse(data);\n    } catch (error) {\n        // Si no es JSON, considera que es un texto plano\n        array = [data];\n    }\n}\n\n// Une los elementos del array en un string\nconst message_completo = array.join(\"\");\n\nreturn [{ json: { message_completo } }];\n"
      },
      "id": "91a9ea7e-765a-4fb8-822c-0cb570023987",
      "name": "Compara igualdad de memorias",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        -1380
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Messages",
        "key": "={{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
        "options": {}
      },
      "id": "ae1a26d1-67f1-4edc-8e70-dbaf75f73e4d",
      "name": "Get Memory ",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -440,
        -1280
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "text": "o que está na imagem?",
        "imageUrls": "={{ $json.data.mediaUrl }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        -1940,
        -820
      ],
      "id": "c0aa794b-ad9f-4cc3-ab8d-9810be5277af",
      "name": "OpenAI3",
      "credentials": {
        "openAiApi": {
          "id": "UfA35dBDzEebw8zR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "86ff282a-3ede-4417-98c1-0d10858bc5dc",
              "name": "Redis1",
              "value": "={{ $('Return Redis1').item.json.Redis1 }}",
              "type": "string"
            },
            {
              "id": "3cd6e8a1-98ef-4abb-9490-fb7946365cfb",
              "name": "Redis2",
              "value": "={{ $json.Messages }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "b09efe91-c70c-4782-b6f8-40c31daf795e",
      "name": "Redis1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -220,
        -1280
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d5a342e9-585b-42ea-be44-644adae10199",
              "leftValue": "={{ $json.Redis1 }}",
              "rightValue": "={{ $json.Redis2 }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "bd3dc2cf-638f-479d-b355-2cc2dac147fe",
      "name": "Compara Get Memory1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -40,
        -1280
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '') }}"
      },
      "id": "74dceecc-9998-46fc-9a22-71a7e96e435d",
      "name": "Delete1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        500,
        -1380
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Webhook').item.json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
        "messageData": "={{ $('Webhook').item.json.body.data.message.conversation }}",
        "tail": true
      },
      "id": "d9789655-1be5-413a-bb08-a95911f9ec47",
      "name": "apilaText",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1740,
        -1280
      ],
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook'].json.body.server_url }}/message/sendText/Fer",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "=BD52FEC4A06A-4685-BC2E-116DBE26638B"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Webhook').item.json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Loop Over Items1').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d3a208e4-2d17-472c-9b82-16db24f6c6cb",
      "name": "MESSAGE",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2280,
        -1180
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "qevaT",
        "options": {}
      },
      "id": "788749b6-147a-46fb-ba66-7ec876bf4b28",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        600,
        1480
      ],
      "webhookId": "8a5a0494-91d7-4333-89cd-099ca7c93de8"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0cb14635-2673-408e-86db-ce9e0373674b",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "60065893-74f7-4b64-bc1a-d891202efa78",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            }
          ]
        },
        "options": {}
      },
      "id": "f5f003b5-ac78-4e6f-8c85-275c90f946f7",
      "name": "Message Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2220,
        -1120
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fer33",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2820,
        -1120
      ],
      "id": "c61c7548-f838-4329-a783-e74b80405c6b",
      "name": "Webhook",
      "webhookId": "c32b659b-d439-4b94-a1a9-04590c7a9a54"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a9ce3f87-bf9b-4e46-9d57-dacb76099f4c",
              "leftValue": "={{ $json.body.data.key.remoteJid }}",
              "rightValue": "5492254423359@s.whatsapp.net",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "9faf530c-d953-40f1-999e-4bb7b6c55eb6",
              "leftValue": "={{ $json.body.data.key.fromMe }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2520,
        -1120
      ],
      "id": "2b3b9474-ceb9-48f1-8dc5-b4724db211aa",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d04d69d-cb9c-41be-a44a-95fac3c059f3",
              "name": "text",
              "value": "={{ $json.output\n    // Primero extraemos todos los bloques que tengan **texto**\n    .match(/\\*\\*(.+?)\\*\\*/g)\n    // Luego quitamos los asteriscos de cada elemento\n    .map(item => item.replace(/\\*\\*/g, ''))\n    // Opcional: Podemos quitar los caracteres que no deseamos\n    .map(item => item.replace(/[¡¿!]/g, '').trim())\n}}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "ff2204ab-73dd-4e49-a39f-b85ac4e8a753",
      "name": "replace1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1260,
        -1640
      ]
    },
    {
      "parameters": {
        "amount": "=0"
      },
      "id": "c3566ece-e37b-4d7b-a105-407247dd9d7c",
      "name": "Wait3",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2560,
        -20
      ],
      "webhookId": "6f130bc2-7de0-4353-b6d0-653f7c7e6623"
    },
    {
      "parameters": {
        "batchSize": "=1",
        "options": {
          "reset": false
        }
      },
      "id": "fc8c05e6-5aff-4e7e-b453-498f34c58315",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2300,
        -80
      ],
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {},
      "id": "9facb024-3a35-4a07-b321-9ffb3f6bd9c5",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        2560,
        -220
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d04d69d-cb9c-41be-a44a-95fac3c059f3",
              "name": "text",
              "value": "={{ $json.output\n    .replace(/\\*\\*(.+?)\\*\\*/g, '*$1*')\n    .replace(/###\\s*/g, '')\n    .replace(/[¡¿!]/g, '')\n    .replace(/\\[.*?\\]\\((.*?)\\)/g, '$1')\n    .split(/\\n\\n|---/)\n    .filter(Boolean) }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "99b1c463-72dd-4ee3-93e7-717ac4290824",
      "name": "replace",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1820,
        -260
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Webhook1'].json.body.server_url }}/message/sendText/{{ $node['Webhook1'].json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $node['Webhook1'].json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"delay\": 1500,\n    \"number\": \"{{ $node['Webhook1'].json.body.data.key.remoteJid }}\",\n    \"text\": \"{{ $('Loop Over Items').item.json.text.replace(/\\n/g,'\\\\n').replace(/\\\"/g,'\\'') }}\"\n\n}",
        "options": {}
      },
      "id": "8c20e013-d0ea-43d4-989b-9389cff14a11",
      "name": "MESSAGE1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2800,
        -20
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "text",
        "options": {}
      },
      "id": "cb2e4034-2327-496b-913a-5e21c718e6c5",
      "name": "Split Out1",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2040,
        -260
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto de entrada\nconst inputText = $input.first().json.output;\n\n// Crear un array para almacenar los diferentes mensajes\nconst mensajes = [];\n\n// Separar la introducción, datos y conclusión\nconst lines = inputText.split('\\n');\n\n// Identificar si una línea contiene datos con asteriscos\nconst containsAsterisks = line => line.includes('**');\n\n// Encontrar los índices donde comienzan y terminan los datos\nconst firstDataIndex = lines.findIndex(containsAsterisks);\nconst lastDataIndex = [...lines].reverse().findIndex(containsAsterisks);\nconst lastDataPos = lastDataIndex >= 0 ? lines.length - 1 - lastDataIndex : -1;\n\n// Extraer las partes del mensaje\nlet intro = '';\nlet datos = '';\nlet conclusion = '';\n\n// Obtener la introducción (texto antes de los datos)\nif (firstDataIndex > 0) {\n  intro = lines.slice(0, firstDataIndex).filter(line => line.trim()).join('\\n');\n}\n\n// Formatear los datos (líneas con asteriscos)\nif (firstDataIndex >= 0) {\n  // Para WhatsApp, necesitamos formatear cada línea de manera especial\n  // Extraemos las secciones numeradas de los datos\n  const dataLines = [];\n  \n  // Procesar las líneas de datos para WhatsApp\n  lines.slice(firstDataIndex, lastDataPos + 1)\n    .filter(containsAsterisks)\n    .forEach(line => {\n      // Extraer el contenido entre asteriscos\n      let cleanLine = line.replace(/\\*\\*(.+?)\\*\\*/g, '$1').trim();\n      \n      // Si la línea ya tiene un número al inicio como \"1. \", lo mantenemos\n      if (!cleanLine.match(/^\\d+\\.\\s/)) {\n        // Si no tiene número, añadimos un bullet point\n        cleanLine = \"• \" + cleanLine;\n      }\n      \n      dataLines.push(cleanLine);\n    });\n  \n  // Juntar las líneas formateadas para WhatsApp\n  datos = dataLines.join('\\n');\n}\n\n// Obtener la conclusión (texto después de los datos)\nif (lastDataPos >= 0 && lastDataPos < lines.length - 1) {\n  conclusion = lines.slice(lastDataPos + 1).filter(line => line.trim()).join('\\n');\n}\n\n// Procesar y añadir las partes al array de mensajes\nif (intro) mensajes.push({ text: intro });\nif (datos) mensajes.push({ text: datos });\nif (conclusion) mensajes.push({ text: conclusion });\n\n// Si no hay mensajes válidos, devolver el texto original\nif (mensajes.length === 0) {\n  mensajes.push({ text: inputText });\n}\n\n// Devolver el array de mensajes\nreturn mensajes;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1260,
        -1380
      ],
      "id": "6956bc11-4cbd-4aaa-b87e-b4b3342519d6",
      "name": "Code"
    }
  ],
  "pinData": {
    "Webhook1": [
      {
        "json": {
          "headers": {
            "host": "n8n.innovasoftpro.dev",
            "user-agent": "axios/1.7.7",
            "content-length": "9854",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n.innovasoftpro.dev",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "575dad520f0e",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "QEVA AI",
            "data": {
              "key": {
                "remoteJid": "5492254423359@s.whatsapp.net",
                "fromMe": false,
                "id": "B746D25964B211387E10D795801F9652"
              },
              "pushName": "Fer { }",
              "status": "DELIVERY_ACK",
              "message": {
                "audioMessage": {
                  "url": "https://mmg.whatsapp.net/v/t62.7117-24/32729405_1365529487805205_2135013931526958774_n.enc?ccb=11-4&oh=01_Q5AaICm4NMnGXGE4hIjetUrNrkH3dJe8aTUn6mnEAkFPS7cg&oe=67E85AAE&_nc_sid=5e03e0&mms3=true",
                  "mimetype": "audio/ogg; codecs=opus",
                  "fileSha256": "JW1466IjxPj7pBG9xHkTrN3qXGACHLqgXvCcYCWZXlk=",
                  "fileLength": "6135",
                  "seconds": 3,
                  "ptt": true,
                  "mediaKey": "1Y8ZDwspKLavjOFDey6JgsyLqReSvWVfZoQCVVrZFhA=",
                  "fileEncSha256": "NTp0/zgu99r0jKC8VTGMDhZgRNqG7/guTIL98KMXhmc=",
                  "directPath": "/v/t62.7117-24/32729405_1365529487805205_2135013931526958774_n.enc?ccb=11-4&oh=01_Q5AaICm4NMnGXGE4hIjetUrNrkH3dJe8aTUn6mnEAkFPS7cg&oe=67E85AAE&_nc_sid=5e03e0",
                  "mediaKeyTimestamp": "1740697102",
                  "waveform": "AAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7AAAAAAAAACMcLVJYOhYAAAAAAAAAAA=="
                },
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "geTzV9gDb4Wuvg==",
                    "senderTimestamp": "1740582364",
                    "recipientKeyHash": "oFuqaufuAssP6A==",
                    "recipientTimestamp": "1739403402"
                  },
                  "deviceListMetadataVersion": 2,
                  "messageSecret": "7IBRVW1oKdcP8r7tkUYoj5q7oG/ctuorBXi2/kzs+Dc="
                },
                "base64": ""
              },
              "contextInfo": null,
              "messageType": "audioMessage",
              "messageTimestamp": 1740697102,
              "instanceId": "4c1fcb45-7cf3-4498-b57f-4bf1599328f7",
              "source": "android"
            },
            "destination": "https://n8n.innovasoftpro.dev/webhook/qevaT",
            "date_time": "2025-02-27T19:58:23.281Z",
            "sender": "5492254596618@s.whatsapp.net",
            "server_url": "https://evo.innovasoftpro.dev",
            "apikey": "454444F88F77-4A37-B753-FFAAB4664C16"
          },
          "webhookUrl": "https://n8n.innovasoftpro.dev/webhook/qevaT",
          "executionMode": "production"
        }
      }
    ],
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.innovasoftpro.dev",
            "user-agent": "axios/1.7.7",
            "content-length": "834",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n.innovasoftpro.dev",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "575dad520f0e",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "Fer",
            "data": {
              "key": {
                "remoteJid": "5492254423359@s.whatsapp.net",
                "fromMe": true,
                "id": "D54F19914326812290004B7BF3F10AEE"
              },
              "pushName": "Fer { }",
              "status": "SERVER_ACK",
              "message": {
                "messageContextInfo": {
                  "messageSecret": "Uyohm7tpJN0rrQcImAOrtEff+ps9AdjoyjmC91WrLII="
                },
                "conversation": "Fue hoy"
              },
              "contextInfo": {
                "entryPointConversionSource": "global_search_new_chat",
                "entryPointConversionApp": "whatsapp",
                "entryPointConversionDelaySeconds": 172862
              },
              "messageType": "conversation",
              "messageTimestamp": 1740747575,
              "instanceId": "2003cc4a-5076-4a73-84e9-0d825d6860e3",
              "source": "android"
            },
            "destination": "https://n8n.innovasoftpro.dev/webhook/fer33",
            "date_time": "2025-02-28T09:59:36.358Z",
            "sender": "5492254423359@s.whatsapp.net",
            "server_url": "https://evo.innovasoftpro.dev",
            "apikey": "BD52FEC4A06A-4685-BC2E-116DBE26638B"
          },
          "webhookUrl": "https://n8n.innovasoftpro.dev/webhook/fer33",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Argentina/Buenos_Aires",
    "errorWorkflow": "2kOn0Oz7c2uvczPK"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-12-28T13:50:34.587Z",
      "updatedAt": "2024-12-28T13:50:34.587Z",
      "id": "xkAp7jA38Kw7oqiS",
      "name": "Gastos"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2025-02-28T15:57:35.937Z",
  "versionId": "2956f3d9-9045-4375-a92a-95c6cddb1a6e"
}