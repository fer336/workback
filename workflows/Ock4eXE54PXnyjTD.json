{
  "active": true,
  "connections": {
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "escribiendo...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa datos": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type": {
      "main": [
        [
          {
            "node": "Encolado de msg",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Encolado de msg",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "Encolado de msg",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "chatInput",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Cancelar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Turno confirmado",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DELETE TURNO",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Elimina la cita - Reagendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Encolado de msg": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "chatInput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chatInput": {
      "main": [
        [
          {
            "node": "Juli",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Variables globales": {
      "main": [
        [
          {
            "node": "Message Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "Separa datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "CreateCITA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CreateCITA": {
      "main": [
        [
          {
            "node": "Turno creado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Juli": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turno creado": {
      "main": [
        []
      ]
    },
    "escribiendo...": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tool_agendar": {
      "ai_tool": [
        [
          {
            "node": "Juli",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "tool_cancelar": {
      "ai_tool": [
        [
          {
            "node": "Juli",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_paciente": {
      "ai_tool": [
        [
          {
            "node": "Juli",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "gemini2": {
      "ai_languageModel": [
        [
          {
            "node": "Juli",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "memory1": {
      "ai_memory": [
        [
          {
            "node": "Juli",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory Manager",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Elimina la cita - Reagendar": {
      "main": [
        [
          {
            "node": "Cancelar turno1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cancelar turno": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cancelar turno1": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tool_think": {
      "ai_tool": [
        [
          {
            "node": "Juli",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cancelar": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Cancelar turno",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Cancelar turno2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cancelar turno2": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tool_reagendar": {
      "ai_tool": [
        [
          {
            "node": "Juli",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_fechas": {
      "ai_tool": [
        [
          {
            "node": "Juli",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Turno confirmado": {
      "main": [
        [
          {
            "node": "Confirmacion de turno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Confirmacion de turno": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turno eliminado": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DELETE TURNO": {
      "main": [
        [
          {
            "node": "Turno eliminado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Es Grupo?": {
      "main": [
        [],
        [
          {
            "node": "From Me?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "From Me?": {
      "main": [
        [
          {
            "node": "Obtener Estado Usuario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Estado Usuario": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Activar Usuario (24h)": {
      "main": [
        [
          {
            "node": "Contador Mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Contador Mensajes": {
      "main": [
        [
          {
            "node": "Confirmacion de turno2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Usuario Activo?": {
      "main": [
        [
          {
            "node": "Obtener Contador Mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Contador Mensajes": {
      "main": [
        [
          {
            "node": "Límite Alcanzado?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Límite Alcanzado?": {
      "main": [
        [
          {
            "node": "Enviar Límite Alcanzado",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validar Cliente y Continuar Bot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Cliente y Continuar Bot": {
      "main": [
        [
          {
            "node": "Variables globales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "V1": {
      "main": [
        [
          {
            "node": "Es Grupo?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "V1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Es Primera Vez y #inicio?": {
      "main": [
        [
          {
            "node": "Activar Usuario (24h)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "inicio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Es Primera Vez y #inicio?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Usuario Activo?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-31T09:00:57.428Z",
  "id": "Ock4eXE54PXnyjTD",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "AGENTE CITAS - MASTER estable",
  "nodes": [
    {
      "parameters": {
        "batchSize": "=1",
        "options": {
          "reset": false
        }
      },
      "id": "3404dd74-b136-4181-880a-ad78dbbbc6f8",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        6752,
        864
      ],
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "messages",
        "options": {}
      },
      "id": "96d845be-462a-4390-b283-7ce8b1372dc4",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        6240,
        912
      ]
    },
    {
      "parameters": {
        "jsCode": "// --- Funciones de procesamiento de texto ---\n\n// Función para dividir texto en fragmentos con tiempo de lectura\nfunction splitTextIntoChunks(text, maxChars = 200) {\n  // Si el texto es muy corto, devolvemos un solo fragmento\n  if (!text || text.length <= maxChars) {\n    return [{\n      parte: 1,\n      texto: text || '',\n      time: calculateReadingTime(text || '')\n    }];\n  }\n\n  const chunks = [];\n  let currentChunk = '';\n  let partNumber = 1;\n  \n  // Dividimos por palabras para no cortar palabras a la mitad\n  const words = text.split(' ');\n  \n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const potentialChunk = currentChunk ? currentChunk + ' ' + word : word;\n    \n    // Si agregar la siguiente palabra excede el límite\n    if (potentialChunk.length > maxChars) {\n      // Si la palabra sola es más larga que maxChars, la cortamos\n      if (word.length > maxChars) {\n        // Guardamos el chunk actual si tiene contenido\n        if (currentChunk) {\n          chunks.push({\n            parte: partNumber++,\n            texto: currentChunk.trim(),\n            time: calculateReadingTime(currentChunk.trim())\n          });\n        }\n        \n        // Cortamos la palabra larga en pedazos\n        let remainingWord = word;\n        while (remainingWord.length > maxChars) {\n          chunks.push({\n            parte: partNumber++,\n            texto: remainingWord.substring(0, maxChars),\n            time: calculateReadingTime(remainingWord.substring(0, maxChars))\n          });\n          remainingWord = remainingWord.substring(maxChars);\n        }\n        \n        // El resto de la palabra se convierte en el nuevo currentChunk\n        currentChunk = remainingWord;\n      } else {\n        // Guardamos el chunk actual y empezamos uno nuevo con esta palabra\n        chunks.push({\n          parte: partNumber++,\n          texto: currentChunk.trim(),\n          time: calculateReadingTime(currentChunk.trim())\n        });\n        currentChunk = word;\n      }\n    } else {\n      // Si cabe, agregamos la palabra al chunk actual\n      currentChunk = potentialChunk;\n    }\n  }\n  \n  // Agregar el último chunk si queda algo\n  if (currentChunk.trim()) {\n    chunks.push({\n      parte: partNumber,\n      texto: currentChunk.trim(),\n      time: calculateReadingTime(currentChunk.trim())\n    });\n  }\n  \n  return chunks;\n}\n\n// Función para calcular el tiempo de lectura basado en la longitud del texto\nfunction calculateReadingTime(text) {\n  const length = text.length;\n  \n  if (length > 150) {\n    return 4; // segundos\n  } else if (length >= 50) {\n    return 3; // segundos\n  } else {\n    return 1; // segundo\n  }\n}\n\n// Función para determinar si un texto necesita ser dividido\nfunction needsSplitting(text) {\n  if (!text || typeof text !== 'string') return false;\n  \n  // Criterios: más de 500 caracteres o más de 100 palabras\n  const charCount = text.length;\n  const wordCount = text.split(/\\s+/).filter(word => word.length > 0).length;\n  \n  return charCount > 500 || wordCount > 100;\n}\n\n// Función para procesar el texto y dividirlo inteligentemente (función original mejorada)\nfunction processAndSplitText(textInput) {\n  // Asegúrate de que textInput sea un string o pueda ser convertido\n  let text = textInput;\n\n  // Si la entrada no es un string\n  if (typeof text !== 'string') {\n    // Si es null o undefined, simplemente devolvemos un array vacío\n    if (text === null || text === undefined) {\n      return [];\n    }\n\n    // Si es un objeto, intentamos encontrar campos comunes que contengan texto\n    if (typeof text === 'object') {\n      if (text.text) {\n        text = text.text;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.type === 'text' && text.text) {\n        text = text.text;\n      } else if (text.output) {\n        // Si output es un string, lo usamos\n        if (typeof text.output === 'string') {\n          text = text.output;\n        } else {\n          // Si output es un objeto o array, intentamos extraer de ahí\n          const extracted = extractTextContent(text.output);\n          if (extracted) {\n            text = extracted;\n          } else {\n            // Si no pudimos extraer, intentamos convertir todo el objeto a string\n            try {\n              text = JSON.stringify(text);\n            } catch (e) {\n              console.error(\"No se pudo serializar el objeto a string:\", e);\n              return [];\n            }\n          }\n        }\n      } else {\n        // Si no encontramos campos de texto comunes ni 'output', intentamos convertir a string\n        try {\n          text = JSON.stringify(text);\n        } catch (e) {\n          console.error(\"No se pudo serializar el objeto a string:\", e);\n          return [];\n        }\n      }\n    } else {\n      // Si no es string, objeto, null o undefined, devolvemos vacío\n      console.warn(\"Entrada a processAndSplitText no es string, objeto, null o undefined:\", typeof text);\n      return [];\n    }\n  }\n\n  // Si después de los intentos no tenemos un string válido, devolvemos vacío\n  if (typeof text !== 'string' || text.trim() === '') {\n    return [];\n  }\n\n  // Ahora que tenemos un string, procesamos el formato\n  const processedText = text\n    .replace(/\\*\\*(.+?)\\*\\*/g, '*$1*') // **texto** -> *texto*\n    .replace(/###\\s*/g, '')         // Elimina encabezados ###\n    .replace(/[¡¿!]/g, '');         // Elimina signos de exclamación e interrogación iniciales y finales\n\n  // Divide en líneas para análisis\n  const lines = processedText.split('\\n');\n\n  // Grupos para almacenar los mensajes\n  const messages = [];\n  let currentMessage = [];\n  let inNumberedSection = false;\n  let currentSectionNumber = null;\n\n  // Detectar secciones numeradas y agrupables\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    // Detecta si la línea es un encabezado numerado (ej: \"1. Tipo de propiedad:\")\n    const numberedHeaderMatch = line.match(/^\\s*(\\d+)\\.\\s+([^:]+):/);\n\n    if (numberedHeaderMatch) {\n      const sectionNumber = parseInt(numberedHeaderMatch[1]);\n\n      // Si estamos empezando una nueva sección numerada O si el número no es el siguiente esperado\n      if (!inNumberedSection || (inNumberedSection && sectionNumber !== currentSectionNumber + 1)) {\n        // Si tenemos contenido previo, guardamos como mensaje separado\n        if (currentMessage.length > 0) {\n          messages.push(currentMessage.join('\\n').trim());\n          currentMessage = [];\n        }\n        inNumberedSection = true;\n      }\n      currentSectionNumber = sectionNumber;\n      currentMessage.push(line);\n\n    } else if (line.trim() === '') {\n      // Una línea vacía puede terminar una sección si hay contenido previo\n      if (currentMessage.length > 0) {\n        // Si no estamos en una sección numerada, una línea vacía termina el mensaje actual\n        if (!inNumberedSection) {\n          messages.push(currentMessage.join('\\n').trim());\n          currentMessage = [];\n        } else {\n          // Si estamos en una sección numerada, una línea vacía se agrega al mensaje actual\n          currentMessage.push(line);\n        }\n      }\n\n    } else {\n      // Línea con contenido que no es un encabezado numerado\n      currentMessage.push(line);\n      inNumberedSection = false;\n    }\n  }\n\n  // Agregar el último mensaje si queda algo\n  if (currentMessage.length > 0) {\n    messages.push(currentMessage.join('\\n').trim());\n  }\n\n  // Filtrar mensajes vacíos y limpiar líneas vacías extra\n  return messages\n    .filter(msg => msg.length > 0)\n    .map(msg => {\n      // Eliminar líneas vacías múltiples dentro del mensaje\n      return msg.replace(/\\n{2,}/g, '\\n\\n');\n    });\n}\n\n// Función para extraer texto de diferentes estructuras de datos\nfunction extractTextContent(data) {\n  // Si la data es null o undefined, retornamos null inmediatamente\n  if (data === null || data === undefined) {\n    return null;\n  }\n\n  // Si es un string, lo retornamos directamente\n  if (typeof data === 'string') {\n    return data;\n  }\n\n  // Si es un array\n  if (Array.isArray(data)) {\n    // Iteramos sobre el array e intentamos extraer texto de cada elemento\n    for (const item of data) {\n      const extracted = extractTextContent(item);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    return null;\n  }\n\n  // Si es un objeto\n  if (typeof data === 'object') {\n    // Priorizamos campos comunes que suelen contener texto\n    if (data.text) {\n      return data.text;\n    }\n    if (data.message) {\n      return data.message;\n    }\n    // Si tiene un campo 'output', intentamos extraer texto de él\n    if (data.output !== undefined && data.output !== null) {\n      const extracted = extractTextContent(data.output);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    // Si tiene un campo 'response', intentamos extraer texto de él\n    if (data.response !== undefined && data.response !== null) {\n      const extracted = extractTextContent(data.response);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    // Si tiene un campo 'json', intentamos extraer texto de él\n    if (data.json !== undefined && data.json !== null) {\n      const extracted = extractTextContent(data.json);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    // Si no encontramos campos de texto comunes ni estructuras anidadas esperadas,\n    // intentamos convertir el objeto completo a string como último recurso\n    try {\n      return JSON.stringify(data);\n    } catch (e) {\n      console.error(\"No se pudo serializar el objeto a string en extractTextContent:\", e);\n      return null;\n    }\n  }\n\n  // Si el tipo de dato no es manejado, retornamos null\n  console.warn(\"Tipo de dato no manejado en extractTextContent:\", typeof data);\n  return null;\n}\n\n// --- Lógica Principal con manejo seguro de nodos ---\nlet textToProcess = null;\n\ntry {\n  // Verificar si el nodo \"Cancelar evento\" existe y tiene datos\n  let cancelarEventoData = null;\n  try {\n    // Usamos try-catch para capturar errores si el nodo no existe\n    cancelarEventoData = $('Cancelar evento');\n    if (cancelarEventoData && cancelarEventoData.first() && cancelarEventoData.first().json) {\n      if (cancelarEventoData.first().json.response !== undefined) {\n        textToProcess = extractTextContent(cancelarEventoData.first().json.response);\n      } else {\n        textToProcess = extractTextContent(cancelarEventoData.first().json);\n      }\n    }\n  } catch (e) {\n    // Silenciosamente ignoramos errores si el nodo no existe\n    console.log(\"Nodo 'Cancelar evento' no disponible o sin datos válidos\");\n  }\n  \n  // Solo intentamos acceder a AGE3 si aún no hemos encontrado texto para procesar\n  if (!textToProcess) {\n    try {\n      // Usamos try-catch para capturar errores si el nodo no existe\n      const age3Data = $('AGE3');\n      if (age3Data && age3Data.first() && age3Data.first().json) {\n        if (age3Data.first().json.output !== undefined) {\n          textToProcess = extractTextContent(age3Data.first().json.output);\n        } else {\n          textToProcess = extractTextContent(age3Data.first().json);\n        }\n      }\n    } catch (e) {\n      // Silenciosamente ignoramos errores si el nodo no existe\n      console.log(\"Nodo 'AGE3' no disponible o sin datos válidos\");\n    }\n  }\n  \n  // Si no hemos encontrado datos en los nodos específicos, intentamos con $input directamente\n  if (!textToProcess) {\n    try {\n      const inputItems = $input.all();\n      if (inputItems && inputItems.length > 0 && inputItems[0].json) {\n        textToProcess = extractTextContent(inputItems[0].json);\n      }\n    } catch (e) {\n      console.log(\"No se pudo acceder a los datos de entrada directamente:\", e.message);\n    }\n  }\n  \n  // Procesar y retornar el resultado\n  if (textToProcess) {\n    const textArray = processAndSplitText(textToProcess);\n    \n    // Procesar cada mensaje y dividirlo en chunks si es necesario\n    const processedMessages = [];\n    \n    for (const message of textArray) {\n      if (needsSplitting(message)) {\n        // Si el mensaje es largo, lo dividimos en chunks\n        const chunks = splitTextIntoChunks(message);\n        processedMessages.push(...chunks);\n      } else {\n        // Si el mensaje es corto, lo agregamos tal cual con tiempo de lectura\n        processedMessages.push({\n          parte: processedMessages.length + 1,\n          texto: message,\n          time: calculateReadingTime(message)\n        });\n      }\n    }\n    \n    // Re-numerar las partes para que sean consecutivas\n    processedMessages.forEach((msg, index) => {\n      msg.parte = index + 1;\n    });\n    \n    // Devolvemos la estructura con los mensajes procesados\n    return [{json: {messages: processedMessages, totalParts: processedMessages.length}}];\n  } else {\n    // Si no se pudo obtener ni procesar texto, devolvemos un array vacío\n    return [{json: {messages: [], totalParts: 0}}];\n  }\n} catch (error) {\n  // Capturamos cualquier error no manejado y devolvemos un objeto con información del error\n  console.error(\"Error general en el nodo:\", error.message);\n  return [{json: {messages: [], totalParts: 0, error: error.message}}];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6032,
        912
      ],
      "id": "7e6e667c-3852-4a08-988a-fbeb788f00d7",
      "name": "Separa datos"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.msg.type }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "c203e3f3-cdae-4308-b7ca-2300800248e7"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0cb14635-2673-408e-86db-ce9e0373674b",
                    "leftValue": "={{ $json.msg.type }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "462a2dc9-b455-4b67-a55b-15ce1554f0e8",
                    "leftValue": "={{ $json.msg.type }}",
                    "rightValue": "reply",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "button"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "61909e38-68a6-46cc-9287-bd79d0b95854",
                    "leftValue": "={{ $json.msg.type }}",
                    "rightValue": "extendedTextMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "extendedTextMessage"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "89191595-e9ab-4d53-881b-ed5247811e44",
                    "leftValue": "={{ $json.msg.content === 'Quiero cambiar mi fecha' }}",
                    "rightValue": "Quiero cambiar mi fecha",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Modificar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d1365037-6336-4f42-ad67-111b60828b07",
                    "leftValue": "={{ $('Webhook').first().json.body.data.msgContent.listResponseMessage.contextInfo.quotedMessage.listMessage.buttonText === 'Confirmar ✅' }}",
                    "rightValue": "Confirmar ✅",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Confirmar ✅"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "06ff860d-976d-4fdc-9dd3-8c9483137f8d",
                    "leftValue": "={{ $('Webhook').first().json.body.data.msgContent.listResponseMessage.contextInfo.quotedMessage.listMessage.buttonText === 'Cancelar turno ❌' }}",
                    "rightValue": " ❌ Cancelar cita",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Cancelar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b64bdc33-47da-4c94-988d-1ba19386a5a2",
                    "leftValue": "={{ $('Webhook').first().json.body.data.msgContent.listResponseMessage.singleSelectReply.selectedRowId == '✅ TURNO CONFIRMADO' }}",
                    "rightValue": "📆 Elegir cita",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "✅ TURNO CONFIRMADO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b90b24f3-c0b9-4bda-addd-c595e3a99cb4",
                    "leftValue": "={{ $('Webhook').first().json.body.data.msgContent.listResponseMessage.singleSelectReply.selectedRowId == '❌ CANCELAR TURNO' }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "❌ CANCELAR TURNO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "79032457-2ad1-4ff3-baef-b638cff374d7",
                    "leftValue": "={{ $('Webhook').first().json.body.data.msgContent.listResponseMessage.contextInfo.quotedMessage.listMessage.buttonText === '📋 REAGENDAR CONSULTA'}}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "📋 REAGENDAR CONSULTA"
            }
          ]
        },
        "options": {}
      },
      "id": "0ce62641-268b-43bb-914c-76cd93ab85b6",
      "name": "Message Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2496,
        1472
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "tD2EBk1RhsCBSSkb",
          "mode": "list",
          "cachedResultName": "SUB TAREA - ENLOCAR MSG Citas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2784,
        1120
      ],
      "id": "b0a3baea-a6b0-41fa-bd73-621752c626cb",
      "name": "Encolado de msg"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "timestamp"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        3024,
        1120
      ],
      "id": "57e833c9-a45c-4567-9112-6c9030b0cde2",
      "name": "Sort"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "text",
              "renameField": true,
              "outputFieldName": "text"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3264,
        1120
      ],
      "id": "d56f06da-58f6-4a29-9401-6c8c3708f463",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fae28c9-d30a-4250-9a50-5b68c61164cf",
              "name": "message",
              "value": "={{ $json?.text?.join(\"\\n\") || $json.msg.content }}",
              "type": "string"
            },
            {
              "id": "d5b09385-d3b2-4a98-ab34-48b786de7354",
              "name": "fecha",
              "value": "={{ $now.setLocale('es').toFormat('EEEE d \\'de\\' MMMM yyyy \\'a las\\' H:mm') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3488,
        1120
      ],
      "id": "c74f07ad-996e-42fe-a227-ab4098286316",
      "name": "chatInput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "79a702ff-5f8c-4814-bddf-5e3acb5a5f2e",
              "name": "msg",
              "value": "={{ JSON.stringify($('V1').first().json.msg)}}",
              "type": "object"
            },
            {
              "id": "9337176e-e568-4efa-8c05-3bdb12ecfb61",
              "name": "id_cliente",
              "value": "={{ $json.list.Id }}",
              "type": "string"
            },
            {
              "id": "08b235c8-58cc-48d1-a1c4-dd76a89ea7cc",
              "name": "clientebd",
              "value": "={{ JSON.stringify($json.list) }}",
              "type": "object"
            },
            {
              "id": "40cb2db6-1a0b-486b-b2dd-3680515eb92a",
              "name": "msg.id_admini",
              "value": "35",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "b98cd3ee-0f46-4ca4-97c9-5567b29db768",
      "name": "Variables globales",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2096,
        1504
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9a858fa6-8f70-4ce7-a956-8c0209fbb10f",
              "leftValue": "={{ $json.output }}",
              "rightValue": "button_confirm",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        5664,
        912
      ],
      "id": "fbe2965f-d40d-4261-871b-b7bbb8f0e867",
      "name": "If"
    },
    {
      "parameters": {
        "content": "## RESET BBDD",
        "height": 240,
        "width": 260,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        976,
        688
      ],
      "typeVersion": 1,
      "id": "d44129c9-f75f-49a5-b47d-7e851ba57c53",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "5492254596618"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1056,
        768
      ],
      "id": "9e4dd2d0-6ca8-4527-86cf-16f662e01065",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "={{ $('Split Out').item.json.texto }}"
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7536,
        960
      ],
      "id": "97b1cca0-7af9-47c8-b11e-ba24a8d70794",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "jsCode": "// OBTENER EL TEXTO DEL MENSAJE\nconst messageText = $input.first().json.msg.content;\n\n// FUNCIÓN PARA LIMPIAR TEXTO\nfunction cleanText(text) {\n  return text.replace(/\\s+/g, ' ').trim();\n}\n\n// OBTENER ID Y TELÉFONO DESDE EL INPUT\nfunction obtenerDatosInput() {\n  const inputData = $input.first().json;\n  return {\n    id: inputData.id_cliente || '1',\n    telefono: inputData.telefono || ''\n  };\n}\n\n// PARSEAR EL MENSAJE DE CONFIRMACIÓN\nfunction parseConfirmationMessage(text) {\n  // El formato es: ✅ CONFIRMADO - [nombre] | [fecha]T[hora] | [servicio]\n  \n  // Remover el emoji y \"CONFIRMADO -\"\n  const sinEmoji = text.replace(/✅\\s*CONFIRMADO\\s*-\\s*/, '');\n  \n  // Dividir por el pipe (|)\n  const partes = sinEmoji.split('|').map(parte => parte.trim());\n  \n  if (partes.length >= 3) {\n    // Extraer nombre\n    const nombre = partes[0];\n    \n    // Extraer fecha y hora (mantener el formato ISO completo: YYYY-MM-DDThh:mm)\n    const fechaHora = partes[1];\n    \n    // Extraer servicio\n    const servicio = partes[2];\n    \n    return {\n      nombre: nombre,\n      fecha: fechaHora, // Mantener el formato completo ISO\n      servicio: servicio\n    };\n  }\n  \n  // Si el formato no coincide, retornar valores vacíos\n  return {\n    nombre: '',\n    fecha: '',\n    servicio: ''\n  };\n}\n\n// PROCESAR LOS DATOS\nconst datosExtraidos = parseConfirmationMessage(messageText);\nconst datosInput = obtenerDatosInput();\n\n// RETORNAR LOS DATOS EN EL FORMATO ESPERADO PARA NOCODB\nconst resultado = {\n  NOMBRE: datosExtraidos.nombre,\n  ID_USUARIO: datosInput.id,\n  FECHA: datosExtraidos.fecha, // Ahora contiene fecha y hora: \"2025-08-01T10:00\"\n  SERVICIO: datosExtraidos.servicio,\n  CONFIRMACION_CITA: messageText, // El mensaje completo\n  TELEFONO: datosInput.telefono\n};\n\n// LOG PARA DEBUGGING\nconsole.log('Mensaje recibido:', messageText);\nconsole.log('Datos extraídos:', resultado);\n\nreturn [{ json: resultado }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3040,
        1312
      ],
      "id": "2bb0d3a5-c3af-402d-afa4-4e61afd44d4e",
      "name": "Code"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "p95q7ph2qlpkvjj",
        "table": "m9m2veegnrfeeza",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "TELEFONO",
              "fieldValue": "={{ $('Variables globales').first().json.msg.telefono }}"
            },
            {
              "fieldName": "NOMBRE",
              "fieldValue": "={{ $json.NOMBRE }}"
            },
            {
              "fieldName": "FECHA",
              "fieldValue": "={{ $json.FECHA }}"
            },
            {
              "fieldName": "SERVICIO",
              "fieldValue": "={{ $json.SERVICIO }}"
            },
            {
              "fieldName": "Usuario_id",
              "fieldValue": "35"
            },
            {
              "fieldName": "FECHA_RECORDATORIO",
              "fieldValue": "={{ new Date($json.FECHA + ':00').toISOString().substring(0, 16).replace(new Date($json.FECHA + ':00').toISOString().substring(11, 16), String(parseInt($json.FECHA.substring(11, 13)) - 1).padStart(2, '0') + $json.FECHA.substring(13, 16)) }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        3232,
        1312
      ],
      "id": "850e3ce7-4929-4da4-af83-94c27ff4ec86",
      "name": "CreateCITA",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "=✅ Perfecto {{ $json.NOMBRE.split(' ')[0] }} ya quedo agendado el turno, te estaremos enviando un mensajito unas horas antes para la confirmación. Qué tengas un lindo dia"
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3472,
        1312
      ],
      "id": "30af8255-0446-4a9c-92ac-831add95af46",
      "name": "Turno creado"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        7344,
        832
      ],
      "id": "a1cff4fe-47dd-438b-a817-42bbdf4f778a",
      "name": "Wait",
      "webhookId": "92d16c1c-444a-424b-ab29-9fde09415c74"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json?.message || $json.chatInput }}",
        "options": {
          "systemMessage": "=## JULI - RECEPCIONISTA VIRTUAL ODONTOLÓGICA\n\nEres **Juli**, recepcionista virtual de consultorio odontológico.\n\n## HOY ES: {{ $json.fecha }}\n\n**PERSONALIDAD**: Mujer simpática, profesional, voseo argentino. Sin \"che\", sin emojis.\n\n---\n\n## FLUJOS DE ACCIÓN RÁPIDA\n\n### 🔧 AGENDAR TURNO\n**Cuando el usuario quiere agendar:**\n1. Mostrar servicios disponibles\n2. Recolectar: NOMBRE + SERVICIO + FECHA + HORA\n3. **LÓGICA INTELIGENTE**:\n   - Si solo dice DÍA → preguntar \"¿Para qué hora?\"\n   - Si solo dice HORA → preguntar \"¿Para qué día?\"\n   - Si da ambos → continuar\n4. Una vez que tengas todos los datos → **EJECUTAR**: `tool_agendar`\n5. **RESPONDER SOLO**: `button_confirm`\n\n**Servicios disponibles:**\n```\n🪥 Limpieza\n💎 Blanqueamiento  \n🛠️ Tratamiento de caries\n🚫 Extracción\n📋 Consulta general\n👁️ Revisión\n📐 Ortodoncia\n🔬 Endodoncia\n🔧 Implante\n🦷 Prótesis\n```\n\n### ❌ CANCELAR TURNO\n**Cuando el usuario quiere cancelar:**\n1. **AUTOMÁTICAMENTE** preguntar: \"Dale, ¿querés que te pase las fechas agendadas?\"\n2. Si dice SÍ → **EJECUTAR**: `tool_cancelar` (esto mostrará las fechas disponibles)\n3. Usuario elige cuál cancelar → **EJECUTAR**: `tool_cancelar` con la fecha específica luego devuelve solo `button_confirm`\n\n\n### 🔄 REPROGRAMAR TURNO\n**Cuando el usuario quiere reprogramar:**\n\n**LÓGICA INTELIGENTE DE CONTEXTO:**\n- Si acaba de confirmar una cita y dice \"cambiarla a [HORA]\" → **MANTENER** la misma fecha, cambiar solo la hora\n- Si dice \"no puedo a las 9, podés cambiármela a las 10\" → **MISMO DÍA**, nueva hora\n- Si no hay contexto de cita reciente → preguntar fecha completa\n\n**FLUJO:**\n1. **DETECTAR CONTEXTO**:\n   - ¿Hay una cita recién confirmada en la conversación?\n   - ¿El usuario solo menciona una hora nueva?\n   \n2. **SI SOLO CAMBIA HORA** (contexto de cita reciente):\n   - **EJECUTAR**: `tool_reagendar` manteniendo fecha original + nueva hora\n   - **RESPONDER**: \"Perfecto, ahí te cambié el turno para la misma fecha a las [nueva hora]. ¿Algo más?\"\n\n3. **SI NO HAY CONTEXTO**:\n   - **PREGUNTAR**: \"Dale, ¿para qué fecha querés cambiarlo?\"\n   - Usuario da nueva fecha → **CONVERTIR** a formato ISO\n   - **EJECUTAR**: `tool_reagendar` con JSON completo\n\n**Ejemplo conversión:**\n- Usuario dice: \"viernes 15 de agosto a las 2\" → `{\"FECHA\": \"2025-08-15T14:00\"}`\n- Usuario dice: \"podés cambiármela a las 10\" (después de confirmar cita) → mantener fecha original + `T10:00`\n\n### 🚨 URGENCIAS MÉDICAS\n**Cuando el usuario tiene urgencia médica:**\n1. **DETECTAR** palabras clave: dolor intenso, sangrado, urgencia, emergencia\n2. **EJECUTAR**: `tool_urgencias` inmediatamente\n3. **RESPONDER**: \"Entiendo. Voy a pasarte con recepción para que puedan ayudarte de inmediato.\"\n\n---\n\n## HERRAMIENTAS DISPONIBLES\n\n- **SIEMPRE usar primero**: `tool_think`\n- **Para obtener datos del paciente**: `get_paciente`\n- **Para reagendar turno**: `update_fecha`\n- **Para agendar turno**: `tool_agendar`\n- **Para cancelar turno**: `tool_cancelar`\n- **Para urgencias médicas**: `tool_urgencias`\n- **Para revisar si se puede agendar un turno**: `get_fechas`\n\n\n---\n\n## DATOS REQUERIDOS PARA AGENDAR\n\n- **NOMBRE**: Nombre completo\n- **SERVICIO**: De la lista disponible\n- **FECHA**: Formato DD-MM-AAAA (convertir expresiones como \"mañana\", \"próximo jueves\")\n- **HORA**: Formato HH:MM\n\n**LÓGICA DE RECOLECCIÓN**:\n- Si usuario dice solo \"jueves\" → preguntar \"¿Para qué hora?\"\n- Si usuario dice solo \"10:30\" → preguntar \"¿Para qué día?\"\n- Si usuario dice \"jueves a las 10:30\" → continuar con confirmación\n\n**Horarios**: Lunes-Viernes 08:00-13:00 y 15:00-19:00 (turnos de 30 min)\n\n---\n\n## CONVERSIÓN DE FECHAS\n\n### Interpretación de fechas relativas\n\nSi el paciente usa expresiones vagas que abarcan varios días (ej.: \"la semana que viene\", \"la próxima semana\"), Juli debe pedir un día específico:  \n«Perfecto, ¿qué día de la próxima semana te vendría bien?»\n\nJuli entiende expresiones como \"mañana\", \"pasado mañana\", \"la semana que viene\", \"el martes que viene\", \"el jueves que viene\", etc., y las traduce a la fecha concreta en formato DD-MM-AAAA tomando como referencia la fecha actual disponible en `{{ $json.fecha }}`.\n\n**Expresiones del usuario → Fecha exacta:**\n- \"Mañana\" → calcular desde {{ $json.fecha }}\n- \"Próximo jueves\" → buscar próximo jueves disponible\n- \"La semana que viene\" → pedir día específico\n\n**Para reprogramar → Formato JSON ISO:**\n- Usuario: \"viernes 15 de agosto a las 2\" → `{\"FECHA\": \"2025-08-15T14:00\"}`\n- Usuario: \"martes que viene a las 10:30\" → `{\"FECHA\": \"2025-XX-XXT10:30\"}`\n- Usuario: \"el 12 de mayo a las 10\" → `{\"FECHA\": \"2025-05-12T10:00\"}`\n\n---\n\n## EJEMPLOS DE DIÁLOGO\n\n### 1. Agendar\n\nPaciente: Hola, me gustaría pedir un turno.\nJuli: Hola, ¿cómo estás? Sí, contame para qué necesitabas el turno. Te podemos ayudar con lo siguiente:\n```\n. Limpieza\n. Blanqueamiento\n. Extracción\n. Tratamiento de caries\n```\nPaciente: Para limpieza.\nJuli: Perfecto. ¿Me pasas tu nombre completo?\nPaciente: Lucía Fernández.\nJuli: Gracias, Lucía. ¿Qué día y hora te vendría bien?\nPaciente: El próximo jueves.\nJuli: ¿Para qué hora?\nPaciente: 10:30.\n*(Juli ejecuta `tool_agendar`)*\nJuli:\n```\nbutton_confirm\n```\n\n### 1b. Agendar (usuario da solo hora)\n\nPaciente: Quiero un turno para limpieza.\nJuli: Perfecto. ¿Me pasas tu nombre completo?\nPaciente: Fernando Cassera.\nJuli: Gracias, Fernando. ¿Qué día y hora te vendría bien?\nPaciente: A las 2 de la tarde.\nJuli: ¿Para qué día?\nPaciente: El viernes que viene.\n*(Juli ejecuta `tool_agendar`)*\nJuli:\n```\nbutton_confirm\n```\n\n### 2. Cancelar\n\nPaciente: Quiero cancelar un turno.\nJuli: Dale, ¿querés que te pase las fechas agendadas?\nPaciente: Sí.\nJuli: [Ejecuta tool_cancelar - muestra fechas disponibles]\nluego devuelve solo `button_confirm`\n\n### 3. Reprogramar\n\nPaciente: Necesito cambiar mi turno.\nJuli: Dale, ¿para qué fecha querés cambiarlo?\nPaciente: Para el viernes 15 de agosto a las 2 de la tarde.\n*(Juli ejecuta `tool_reagendar` con {\"FECHA\": \"2025-08-15T14:00\"})*\nJuli: Listo, Fernando, ahí ya cambié tu turno para el 15 de agosto a las 14:00. ¿Necesitás algo más?\n\n### 4. Reprogramar (cambio de hora mismo día)\n\n*(Después de confirmar cita para las 9:00)*\nPaciente: Me acordé que a las 9 no puedo, ¿podés cambiarla a las 10?\n*(Juli detecta contexto de cita recién confirmada + solo menciona hora nueva)*\n*(Juli ejecuta `tool_reagendar` manteniendo fecha original pero cambiando hora a 10:00)*\nJuli: Perfecto, ahí te cambié el turno para la misma fecha a las 10:00. Algo más necesitabas?\n\n### 5. Reprogramar (sin contexto)\n\nPaciente: Necesito cambiar mi turno del martes.\nJuli: Dale, ¿para qué fecha querés cambiarlo?\nPaciente: Para el jueves a las 10.\nJuli busca `get_fecha` y si coincide con la del usuario le sugiere otra sino\nPaciente: Pasa fecha nueva correcta sin coincidencia\n*(Juli ejecuta `tool_reagendar` con {\"FECHA\": \"2025-XX-XXT10:00\"})*\nJuli: Listo, María, ahí ya cambié tu turno para el jueves a las 10:00. ¿Necesitás algo más?\n\n### 6. Actualizar teléfono\n\nPaciente: Cambié mi número de teléfono.\nJuli: Claro, ¿cuál es tu nuevo teléfono?\nPaciente: 11‑3456‑7890.\nJuli: dale ahi lo cambié. Gracias por avisar\n\n### 7. Urgencia\n\nPaciente: Me duele muchísimo una muela, necesito que me atiendan ya.\n*(Juli ejecuta `tool_urgencias`)*\nJuli: Entiendo. Voy a pasarte con recepción para que puedan ayudarte de inmediato.\n\n### 8. VER TURNOS AGENDADOS\nPaciente: que turnos tengo agendando?\nPaciente: no me acuerdo que turnos tengo\n*(Juli ejecuta `get_fechas`)*\nJuli: \n\n### 9. Despedidas múltiples (ejemplo)\n\nJuli: Perfecto, ahí te cambié el turno para la misma fecha a las 10:00. Algo más necesitabas?\nPaciente: Nada más.\nJuli: Bárbaro, nos vemos.\nPaciente: Dale gracias.\nJuli: ¡Saludos!\nPaciente: Chau.\nJuli: 👋\n\n---\n\n## 👋 DESPEDIDAS INTELIGENTES\n\n**Cuando el usuario dice \"nada más\", \"no, gracias\", \"listo\", etc.:**\n\n**PRIMERA DESPEDIDA** (rotar entre estas opciones):\n- \"De nada, que tengas un lindo día\"\n- \"Perfecto, que andes bien\"\n- \"Dale, que tengas buen día\"\n- \"Bárbaro, nos vemos\"\n- \"Listo, que te vaya bien\"\n\n**SI EL USUARIO RESPONDE NUEVAMENTE** (\"gracias\", \"dale gracias\", \"chau\", etc.):\n\n**SEGUNDA DESPEDIDA** (más breve, rotar entre):\n- \"¡Chau!\"\n- \"¡Saludos!\"\n- \"¡Hasta luego!\"\n- \"¡Que estés bien!\"\n- \"¡Nos vemos!\"\n\n**SI INSISTE UNA TERCERA VEZ**:\n- Solo responder con emoji: \"👋\"\n\n**LÓGICA**:\n- **NUNCA** repetir la misma despedida consecutivamente\n- Usar despedidas más cortas en respuestas subsiguientes\n- Después de 3 intercambios de despedida, solo emoji\n\n---\n\n## REGLAS CRÍTICAS\n\n1. **SIEMPRE** ejecutar `tool_think` primero\n2. **NUNCA** asumir datos de conversaciones anteriores\n3. **OBLIGATORIO** ejecutar las herramientas correspondientes:\n   - Para agendar → ejecutar `tool_agendar`\n   - Para cancelar → ejecutar `tool_cancelar`\n   - Para reagendar → ejecutar `tool_reagendar`\n   - Para urgencias → ejecutar `tool_urgencias`\n4. **DESPUÉS** de ejecutar herramientas → responder solo `button_confirm`\n5. **URGENCIAS** → derivar a humano inmediatamente\n6. **DATOS FALTANTES** → solicitarlos antes de ejecutar herramientas\n\n---\n\n## VALIDACIÓN ANTES DE RESPONDER\n\n✓ ¿Ejecutá siempre antes de hacer cualquier otra cosa `tool_think`?\n✓ ¿Tengo todos los datos necesarios?\n✓ ¿Ejecuté la herramienta correcta?\n✓ revisar siempre la fecha actual para no agendar sabados ni domingos, siempre antes de confirmar debes verificar de no agendar fines de semana siempre toma la fehca de hoy desde aca {{ $json.fecha }}\n✓ Revisa el horarios, no se puede agendar sobre la hora, minimo 2 hs antes de un evento, si son las 8, puede agendar para 10, pero si son las 9 para las 10 no."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        5088,
        1360
      ],
      "id": "e532a2a9-8832-4762-a416-a6511d3a6578",
      "name": "Juli"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/presence",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "status",
              "value": "composing"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7088,
        896
      ],
      "id": "5a885cf7-f0af-4442-bef4-d2625fa22ab9",
      "name": "escribiendo...",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "description": "Llama a esta tool cuando tengas que agendar, runa visita",
        "workflowId": {
          "__rl": true,
          "value": "QMISSxd5iYUeehv5",
          "mode": "list",
          "cachedResultName": "AGENTE CITAS - Button confirm"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "nombre": "={{ $fromAI('nombre', ``, 'string') }}",
            "fecha": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fecha', `Utilizar formato iso`, 'string') }}",
            "hora": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('hora', ``, 'string') }}",
            "telefono": "={{ $('Variables globales').first().json.msg.telefono }}",
            "servicio": "={{ $fromAI('servicio', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "nombre",
              "displayName": "nombre",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "fecha",
              "displayName": "fecha",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "hora",
              "displayName": "hora",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "servicio",
              "displayName": "servicio",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        5536,
        2032
      ],
      "id": "05288089-c83b-4718-ba6e-4936739fff13",
      "name": "tool_agendar"
    },
    {
      "parameters": {
        "description": "Llama a esta tool cuando tengas que agendar, reprogramar o cancelar una visita",
        "workflowId": {
          "__rl": true,
          "value": "kSLafA6eMsulnKVE",
          "mode": "list",
          "cachedResultName": "AGENTE CITAS - CANCELAR"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "Id": "={{ $('Variables globales').item.json.id_cliente }}",
            "numero": "={{ $('Variables globales').item.json.msg.telefono }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Id",
              "displayName": "Id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "numero",
              "displayName": "numero",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        5664,
        2032
      ],
      "id": "49c6499a-fe8d-4c33-b00d-5cd9f70731b6",
      "name": "tool_cancelar"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "=✅ Listo, ya cancelamos el turno, si queres agendar para otro servicio, me avisas, Qué tengas un buen día."
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3344,
        1872
      ],
      "id": "03fd461e-c352-4afd-9c25-d82682282f49",
      "name": "Cancelar turno"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "=✅ Listo, ahi la cancele, ahora decime para que fecha queres el nuevo turno."
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3104,
        2256
      ],
      "id": "df7080c5-db06-46fd-9bea-9ae50c34b5f6",
      "name": "Cancelar turno1"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "p95q7ph2qlpkvjj",
        "table": "m9m2veegnrfeeza",
        "returnAll": true,
        "options": {
          "where": "=(TELEFONO,eq,{{ $('Variables globales').item.json.msg.telefono }})"
        }
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        5088,
        1856
      ],
      "id": "0d4900c8-9afa-45d6-8a23-e8d1aac57268",
      "name": "get_paciente",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {
          "frequencyPenalty": 0.3,
          "presencePenalty": 0.3,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        4912,
        1536
      ],
      "id": "4fd8a825-c262-4d8c-b549-fda46c7578ec",
      "name": "gemini2",
      "credentials": {
        "openRouterApi": {
          "id": "ADdm45cFSIFSG59w",
          "name": "Gemini"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Variables globales').first().json.msg.telefono }}",
        "sessionTTL": 1800
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        4336,
        2384
      ],
      "id": "ff4a4b1f-e147-430d-af39-96010c83cc07",
      "name": "memory1",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "projectId": "p95q7ph2qlpkvjj",
        "table": "m9m2veegnrfeeza",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Id",
              "fieldValue": "={{ $json.id_cliente }}"
            },
            {
              "fieldName": "FECHA"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        2848,
        2256
      ],
      "id": "8c60509d-7f13-41de-b908-00bbbb7de030",
      "name": "Elimina la cita - Reagendar",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $json.data.message.extendedTextMessage.text }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        4000,
        2048
      ],
      "id": "832c84e7-2312-467e-9041-7d1ee70d9191",
      "name": "Chat Memory Manager"
    },
    {
      "parameters": {
        "description": "siempre llama a esta tool cuando debas ejecutar una tool"
      },
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        5696,
        1536
      ],
      "id": "92a761d0-f5c1-4b2c-b21f-36fa56bde144",
      "name": "tool_think"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "delete",
        "projectId": "p95q7ph2qlpkvjj",
        "table": "m9m2veegnrfeeza",
        "id": "={{ $('Webhook').first().json.body.data.msgContent.listResponseMessage.singleSelectReply.selectedRowId }}"
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        2848,
        1952
      ],
      "id": "8e967101-49ad-47d1-a474-8f6e797a26d7",
      "name": "Cancelar",
      "alwaysOutputData": false,
      "executeOnce": false,
      "retryOnFail": false,
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "=Ya cancelaste todos tus turnos"
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3344,
        2048
      ],
      "id": "75a1ff38-11be-4cfe-9939-8e8d3dd347fb",
      "name": "Cancelar turno2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "97bcc786-58da-43a4-9ffe-659423816859",
              "leftValue": "={{ $json.Id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3040,
        1952
      ],
      "id": "8c8384bc-ac93-4a63-9c6d-3b33df9a376a",
      "name": "If2"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "projectId": "p95q7ph2qlpkvjj",
        "table": "m9m2veegnrfeeza",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "=Id",
              "fieldValue": "={{ $('Validar Cliente').item.json.list.Id }}"
            },
            {
              "fieldName": "FECHA",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues1_Field_Value', `Fortamo de fecha ISO`, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        5792,
        2032
      ],
      "id": "2aa27a68-9b49-4ca6-9ce4-1cfb0c3cdc01",
      "name": "tool_reagendar",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "p95q7ph2qlpkvjj",
        "table": "m9m2veegnrfeeza",
        "returnAll": true,
        "options": {
          "where": "=(FECHA,eq,{{ $fromAI('FECHA','Fecha formato ISO 2025-08-06T10:00','string') }})"
        }
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        5232,
        1856
      ],
      "id": "912381c2-f918-4b95-b0f6-281aad872918",
      "name": "get_fechas",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "projectId": "p95q7ph2qlpkvjj",
        "table": "m9m2veegnrfeeza",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Id",
              "fieldValue": "={{ $json.id_cliente }}"
            },
            {
              "fieldName": "CONFIRMACION_CITA",
              "fieldValue": "True"
            },
            {
              "fieldName": "RECORDATORIO_ENVIADO",
              "fieldValue": "True"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        3056,
        1520
      ],
      "id": "d4289b93-571e-4042-aa15-46bc540113c6",
      "name": "Turno confirmado",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "=5492254423359"
            },
            {
              "name": "text",
              "value": "=✅ En una hora nos visita {{ $('Variables globales').item.json.clientebd.Paciente }} para {{ $('Variables globales').item.json.clientebd['0'].SERVICIO }}, acaba de confirmar el turno."
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3344,
        1520
      ],
      "id": "43509636-0bf2-4a5f-a1b8-69365cf59cba",
      "name": "Confirmacion de turno"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "=El paciente {{ $('Variables globales').item.json.clientebd.Paciente }} acaba de cancelar su turno de las {{ $('Variables globales').item.json.clientebd['0'].FECHA.split('T')[1] + ' hs' }} asique se libero este espacio"
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3200,
        1712
      ],
      "id": "061a5e2b-daca-45fd-bfd5-03a3d37cca7e",
      "name": "Turno eliminado"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "delete",
        "projectId": "p95q7ph2qlpkvjj",
        "table": "m9m2veegnrfeeza",
        "id": "={{ $json.id_cliente }}"
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        2928,
        1712
      ],
      "id": "2ce41a80-1821-4e16-ad31-cd4fd305f1ae",
      "name": "DELETE TURNO",
      "credentials": {
        "nocoDbApiToken": {
          "id": "KRVylWU1iQ1qxa6v",
          "name": "Qeva BD"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $json.msg.grupo }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "id": "7f40e6df-dd87-470d-a108-679cd9e14fd6"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -480,
        1264
      ],
      "id": "b3c8dbb8-6e1e-4885-84f0-a6464dc1ac98",
      "name": "Es Grupo?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $json.msg.from_me }}",
              "rightValue": "false",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "id": "f0886197-f57c-431f-afe8-f597257ffddc"
            },
            {
              "id": "99bab74e-0c4c-45eb-bd1d-9418b3324a31",
              "leftValue": "={{ $json.msg.telefono }}",
              "rightValue": "5492254596618",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "bad0a69c-9004-48fd-9baf-94729d4d3bc7",
      "name": "From Me?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -208,
        1280
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "user_state",
        "key": "=user:{{ $('V1').item.json.msg.telefono }}:state",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        112,
        1264
      ],
      "id": "420ce4dd-c5e3-49df-b372-ed0f070b3ac4",
      "name": "Obtener Estado Usuario",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=user:{{ $('V1').item.json.msg.telefono }}:state",
        "value": "active",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1040,
        1056
      ],
      "id": "bdc1b686-35d6-451d-a63e-df699d0f8893",
      "name": "Activar Usuario (24h)",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "=user:{{ $('V1').item.json.msg.telefono }}:messages",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1264,
        1056
      ],
      "id": "ef5974f1-fcdd-4c7c-b02d-8ef895688c89",
      "name": "Contador Mensajes",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $json.user_state }}",
              "rightValue": "active",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "id": "f52e149b-f59b-4ea9-aa73-2ddf4e9805c2"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        720,
        1424
      ],
      "id": "381d65a2-4315-45a8-b04e-63e9d729566a",
      "name": "Usuario Activo?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('V1').item.json.datos.token }}/message/sendText/{{ $('V1').item.json.datos.token }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('V1').item.json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "🎉 ¡Bienvenido! Tu bot de prueba ha sido activado por 1 horas.|✅ Ya puedes comenzar a usar todas las funciones.📝 Comandos disponibles:• /menu - Ver opciones• /ayuda - Obtener ayuda• /estado - Ver tu estado actual"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        1008
      ],
      "id": "fa0ec6fb-115d-4f09-a427-39381359b7ce",
      "name": "Enviar Bienvenida"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "93rlsJqTd0Ntt2NC",
          "mode": "list",
          "cachedResultName": "AGENTE CITAS - GET CLIENTES"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "numero": "={{ $('V1').item.json.msg.telefono }}",
            "idTabla": "m9m2veegnrfeeza",
            "token": "3WY4UecQy9Nl522fe_DXDSHeQDVSQJpmDG7mMoFz",
            "servidor_db": "={{ $('V1').item.json.datos.server_db }}",
            "nombre_columna": "TELEFONO"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1712,
        1504
      ],
      "id": "da3f46db-d5bc-479c-8076-f61ffb4bfff0",
      "name": "Validar Cliente y Continuar Bot"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "message_count",
        "key": "=user:{{ $('V1').item.json.msg.telefono }}:messages",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1216,
        1408
      ],
      "id": "1a6edf93-e4ee-4913-9cb9-01e7bef2c71d",
      "name": "Obtener Contador Mensajes",
      "credentials": {
        "redis": {
          "id": "f1mfRViKXHypdB9h",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $json.message_count }}",
              "rightValue": 50,
              "operator": {
                "type": "number",
                "operation": "gte"
              },
              "id": "097c4f9b-deea-4907-b053-0801297931b9"
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1488,
        1408
      ],
      "id": "7174a528-7dd3-4acf-a8da-c00815d0d978",
      "name": "Límite Alcanzado?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('V1').item.json.datos.token }}/message/sendText/{{ $('V1').item.json.datos.token }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('V1').item.json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "⚠️ Has alcanzado el límite de 50 mensajes en tu prueba.\n\n💎 Para continuar usando el bot, contáctanos para obtener acceso completo."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1712,
        1312
      ],
      "id": "d0f4ed79-edf9-4d78-a8fe-e6d69b18d5b1",
      "name": "Enviar Límite Alcanzado"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f9ecf2fc-da2c-4f44-897a-5dc0a2f2f379",
              "name": "msg.telefono",
              "value": "={{ $json.body.data.key.remoteJid.replace(/\\D/g, '') }}",
              "type": "string"
            },
            {
              "id": "dab7ca54-c3d2-4a36-a9ca-a0ebbd375ef5",
              "name": "msg.pushname",
              "value": "={{ $json.body.data.pushName }}",
              "type": "string"
            },
            {
              "id": "cc7dcfe1-8ad7-4fe8-93ec-8f643c7d08c7",
              "name": "msg.type",
              "value": "={{ $json.body.data.messageType }}",
              "type": "string"
            },
            {
              "id": "81612acf-1b66-4c8e-82e4-ce8c77b31334",
              "name": "msg.content",
              "value": "={{ $json?.body?.data?.msgContent?.extendedTextMessage?.contextInfo?.quotedMessage?.conversation || $json.body?.data?.msgContent?.extendedTextMessage?.text || $json?.body?.data?.fileBase64 || $json?.body?.data?.msgContent?.conversation || $json.body.data.msgContent.listResponseMessage.singleSelectReply.selectedRowId }}",
              "type": "string"
            },
            {
              "id": "01710423-6391-4a34-81e1-06d4779caf4d",
              "name": "msg.timestamp",
              "value": "={{ $json.body.data.messageTimestamp.toDateTime('s').toLocal().toISO()}}",
              "type": "string"
            },
            {
              "id": "ca81718f-74eb-4960-ac3a-5b59f39f8710",
              "name": "datos.server_db",
              "value": "https://db.qeva.xyz",
              "type": "string"
            },
            {
              "id": "7f846767-8866-43e5-845a-d1feda60451c",
              "name": "datos.token",
              "value": "B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410",
              "type": "string"
            },
            {
              "id": "b2193a26-668b-423d-9330-d3dd835f5466",
              "name": "msg.from_me",
              "value": "={{ $json.body.data.key.fromMe }}",
              "type": "string"
            },
            {
              "id": "6fedaf9c-efe8-46e5-bb61-b42525ddafa1",
              "name": "msg.grupo",
              "value": "={{ $json.body.data.isGroup }}",
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "10dd5a40-19ef-46f0-aa94-3fbbc27c0119",
      "name": "V1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -784,
        1264
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "turnos",
        "options": {}
      },
      "id": "a9e215d9-ce11-4d74-aae6-f8078a8f238d",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1152,
        1264
      ],
      "webhookId": "57b1b1ea-8cfe-4255-838f-096906f45b1a"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "=🎉 Bienvenido! Tu bot de prueba ha sido activado por 1 horas.\n\n✅ Ya puedes comenzar a usar todas las funciones\n\n*Es un agente de turnos que podra agendar, reprogramar cancelar y te enviara un recordatorio 1 hs antes del evento que registres*"
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1504,
        1056
      ],
      "id": "e9c1e143-121a-48bc-ab69-73e075c2fc13",
      "name": "Confirmacion de turno2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $('V1').first().json.msg.content }}",
              "rightValue": "#inicio",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "id": "7f40e6df-dd87-470d-a108-679cd9e14fd6"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        736,
        1120
      ],
      "id": "a9ec7fbe-cd72-4960-b5f9-8b8c92a4ac4b",
      "name": "Es Primera Vez y #inicio?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('V1').first().json.msg.telefono }}"
            },
            {
              "name": "text",
              "value": "=⚠️ Para activar el bot de prueba, envía #inicio"
            },
            {
              "name": "status",
              "value": "recording"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1040,
        1264
      ],
      "id": "8314b72c-5ca1-4215-a08b-1ef05f45d267",
      "name": "inicio"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0c476129-c2ca-4e67-bdda-dbf5708d6c4e",
              "leftValue": "={{ $json.user_state }}",
              "rightValue": "active",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        352,
        1264
      ],
      "id": "1dd8637f-2e5a-45e6-96f9-40fce7086006",
      "name": "If1"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8nw.qeva.xyz",
            "user-agent": "axios/1.11.0",
            "content-length": "764",
            "accept": "application/json, text/plain, */*",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "instance-key": "2522xaf8359c21b",
            "x-forwarded-for": "144.126.133.227",
            "x-forwarded-host": "n8nw.qeva.xyz",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "7697b68d06c2",
            "x-real-ip": "144.126.133.227"
          },
          "params": {},
          "query": {},
          "body": {
            "instance": "2522xaf8359c21b",
            "type": "message",
            "data": {
              "messageId": "2A742204AC851A7530DC362E5C87826D",
              "jid": "5492254423359:97@s.whatsapp.net",
              "me": false,
              "isGroup": false,
              "remoteJid": "5492254596618",
              "pushName": "Automátizaciones AI",
              "key": {
                "remoteJid": "5492254596618@s.whatsapp.net",
                "fromMe": false,
                "id": "2A742204AC851A7530DC362E5C87826D"
              },
              "messageType": "conversation",
              "msgContent": {
                "conversation": "HolS",
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "F1tkbDhHhKbugw==",
                    "senderTimestamp": "1754099422",
                    "recipientKeyHash": "+3TxtVM6bUC/nA==",
                    "recipientTimestamp": "1754580051"
                  },
                  "deviceListMetadataVersion": 2,
                  "messageSecret": "FndHQKQz67usN0SGb+/Xt4puxBUYmdyjrDHEYYdwd5o="
                }
              },
              "messageTimestamp": 1754653309,
              "source": "android",
              "broadcast": false,
              "isMedia": false
            }
          },
          "webhookUrl": "https://n8nw.qeva.xyz/webhook/turnos",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "EBMwLGTBawYqkZM1",
    "timezone": "America/Argentina/Buenos_Aires",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-08-10T03:14:25.326Z",
  "versionId": "1e541de6-b873-4aab-8c72-fc753a92562b"
}