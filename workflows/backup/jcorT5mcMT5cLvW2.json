{
  "active": false,
  "connections": {
    "/": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tag?": {
      "main": [
        [
          {
            "node": "/",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          },
          {
            "node": "tag?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-12T00:23:39.343Z",
  "id": "jcorT5mcMT5cLvW2",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "My workflow 10",
  "nodes": [
    {
      "parameters": {},
      "id": "912bb755-7f6c-4088-b68c-21e35876a9b6",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        440,
        260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 751,
        "width": 2547,
        "color": 6
      },
      "id": "3d60866a-56bf-458a-906d-11e423fe5fca",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "ee18ee7c-3910-4252-8ff1-0fb6f713a15e",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        700,
        340
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "Ki5wPNytwpKrHGnQ",
          "name": "WorkFlows"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "67d28889-2fc7-4ac3-8f1f-91abc80b9ee9",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        2340,
        840
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "e4cecbd4-293b-4746-ad98-4a229bb4d9e3",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1440,
        720
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "99f3da5e-79be-4b37-98d8-4c56ec60ecee",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        1240,
        740
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "5a50ec4c-ed8d-42cf-bdbf-f81e12d3b623",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        1240,
        1000
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
      },
      "id": "146470a0-215a-43a7-b36a-8193dc314c4b",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        1440,
        1000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "36a17adc-2cfa-41a3-865b-23af59a13e43",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1660,
        1000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "3ea72b18-a8f4-4174-82b2-cc35ee67c1c1",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1880,
        840
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "bc6fc1a7-9e1e-44ce-b744-09ad684ec13f",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1880,
        1000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "26b374d7-28b7-4917-b7e5-020b0422103a",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1880,
        1160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "bd7234f6-ef67-44aa-ad3f-8a0fc34064ab",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        2100,
        1160
      ],
      "typeVersion": 1,
      "webhookId": "09d97c9f-449c-4589-aa06-a1a646e78e04",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "githubOAuth2Api": {
          "id": "jT5LNDbXbJWMToOl",
          "name": "Qeva Github"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "a7d17af7-a0d1-4f5a-beb3-57a89559a8a0",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        2100,
        980
      ],
      "typeVersion": 1,
      "webhookId": "5ced7548-75c2-4dee-8dfa-45ff204e6428",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "githubOAuth2Api": {
          "id": "jT5LNDbXbJWMToOl",
          "name": "Qeva Github"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "935053d2-95f3-40e4-a9fc-cee14389bed0",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        900,
        360
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 7
            }
          ]
        }
      },
      "id": "0f1332d2-d7d7-4fbf-b113-f80252820280",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        440,
        460
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub.\n\nThe files are saved `ID.json` for the filename.\n\n### Setup\nOpen `Globals` node and update the values below 👇\n\n- **repo.owner:** your Github username\n- **repo.name:** the name of your repository\n- **repo.path:** the folder to use within the repository. If it doesn't exist it will be created.\n\n\nIf your username was `john-doe` and your repository was called `n8n-backups` and you wanted the workflows to go into a `workflows` folder you would set:\n\n- repo.owner - john-doe\n- repo.name - n8n-backups\n- repo.path - workflows/\n\n\nThe workflow calls itself using a subworkflow, to help reduce memory usage.",
        "height": 600.88409546716,
        "width": 371.1995072042308,
        "color": 4
      },
      "id": "06d06a53-e285-48f0-b2a7-8bc3f152caaf",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 434.88564057365943,
        "width": 886.4410237965205,
        "color": 7
      },
      "id": "09e24664-bd08-4537-9980-25961c75692a",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        400,
        180
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.name }}"
        },
        "filePath": "={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "72f65f09-c6b0-4fef-a365-1eec2955534b",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        1040,
        740
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "22c03c5d-2db5-4e96-a5e1-730012b958d2",
      "credentials": {
        "githubOAuth2Api": {
          "id": "jT5LNDbXbJWMToOl",
          "name": "Qeva Github"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "fer336"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "workback"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "=workflows/{{ $json.tags[0].name }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ecbb3f2d-6ba5-48e8-82b5-c3932f6029de",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        820,
        900
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## Edit this node 👇",
        "height": 80,
        "width": 150,
        "color": 4
      },
      "id": "6e1d265f-62a3-4f3e-9e6e-235fc4869180",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        800,
        780
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "ef695bb4-484d-44c3-b1fd-61cb8fdb740e",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        100,
        1080
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "workflowInputs": {
          "value": {},
          "schema": [],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {}
      },
      "id": "52c17fcc-f8ec-45d9-8bc7-616b3701f1ad",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1120,
        380
      ],
      "typeVersion": 1.2,
      "executeOnce": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12cad226-e091-4bbb-aed9-a8e01311772c",
              "name": "tags[0].name",
              "type": "string",
              "value": "={{ $('Execute Workflow Trigger').item.json.tags[0].name }}/"
            }
          ]
        },
        "options": {}
      },
      "id": "01f58dcd-33b9-4ccb-a2b6-8159a5dded3f",
      "name": "/",
      "type": "n8n-nodes-base.set",
      "position": [
        580,
        800
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.tags[0] }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "tag"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "2656fbe3-fe35-4770-9c03-9a455ec618e4",
                    "operator": {
                      "type": "object",
                      "operation": "notExists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.tags[0] }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "none"
            }
          ]
        },
        "options": {}
      },
      "id": "0e843f41-37fe-4273-9563-4380cb127522",
      "name": "tag?",
      "type": "n8n-nodes-base.switch",
      "position": [
        340,
        900
      ],
      "typeVersion": 3.2
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "createdAt": "2025-01-03T01:04:59.894Z",
          "updatedAt": "2025-01-24T17:52:40.313Z",
          "id": "HM6cDIRqJtQVxEx7",
          "name": "Ejecucion de flujos",
          "active": false,
          "nodes": [
            {
              "parameters": {
                "source": "url",
                "workflowUrl": "https://n8n.innovasoftpro.dev/workflow/dKRh4VLjOZIgpPj4",
                "mode": "each",
                "options": {}
              },
              "id": "759b8acd-c518-4ee0-b269-80c69b959a13",
              "name": "Execute Workflow",
              "type": "n8n-nodes-base.executeWorkflow",
              "typeVersion": 1.1,
              "position": [
                1360,
                620
              ]
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "94746291-c0f3-44f3-b635-1fe696d7d74e",
                      "leftValue": "={{ $json.body.data.key.fromMe }}",
                      "rightValue": "false",
                      "operator": {
                        "type": "boolean",
                        "operation": "false",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "id": "30a3395e-c74e-4a94-8275-1977052704bf",
              "name": "Form Me",
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                660,
                920
              ]
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "41aafda0-2ad8-4a37-b160-1e7255bc75d5",
                      "leftValue": "={{ $json.body.data.key.remoteJid.includes('@g.us')}}",
                      "rightValue": "={{ $json.body.data.key.remoteJid.includes('@g.us')}}",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "id": "4b91f7a3-b44d-4154-b56e-1c5405634d23",
              "name": "If",
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                860,
                800
              ]
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{ $json.body.data.message.conversation }}",
                            "rightValue": "#delivery",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      }
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "2a6399ab-55dd-4097-94b2-ff917206ea8d",
                            "leftValue": "={{ $json.body.data.message.conversation }}",
                            "rightValue": "#inmobiliaria",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      }
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "0aaa332a-e24f-46b9-9fa9-b6ee92734627",
                            "leftValue": "={{ $json.body.data.message.conversation }}",
                            "rightValue": "#finanzas",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      }
                    }
                  ]
                },
                "options": {}
              },
              "id": "72d45c31-c0cc-4099-ac5a-28b06413e581",
              "name": "Switch",
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                1120,
                760
              ]
            },
            {
              "parameters": {
                "httpMethod": "POST",
                "path": "qeva",
                "options": {}
              },
              "id": "09d1f58f-8dbb-49dd-bddf-7adc9df28c14",
              "name": "Webhook",
              "type": "n8n-nodes-base.webhook",
              "typeVersion": 2,
              "position": [
                400,
                860
              ],
              "webhookId": "57731664-e3bf-4774-8842-33692e760cda"
            }
          ],
          "connections": {
            "Form Me": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [],
                [
                  {
                    "node": "Switch",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Switch": {
              "main": [
                [
                  {
                    "node": "Execute Workflow",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Webhook": {
              "main": [
                [
                  {
                    "node": "Form Me",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {
            "Webhook": [
              {
                "json": {
                  "headers": {
                    "host": "n8n.innovasoftpro.dev",
                    "user-agent": "axios/1.7.7",
                    "content-length": "884",
                    "accept-encoding": "gzip, compress, deflate, br",
                    "content-type": "application/json",
                    "x-forwarded-for": "172.18.0.1",
                    "x-forwarded-host": "n8n.innovasoftpro.dev",
                    "x-forwarded-port": "443",
                    "x-forwarded-proto": "https",
                    "x-forwarded-server": "37ff230d2669",
                    "x-real-ip": "172.18.0.1"
                  },
                  "params": {},
                  "query": {},
                  "body": {
                    "event": "messages.upsert",
                    "instance": "QEVA AI",
                    "data": {
                      "key": {
                        "remoteJid": "5492254423359@s.whatsapp.net",
                        "fromMe": false,
                        "id": "3752C146DA030B5C88AD517E091C3F89"
                      },
                      "pushName": "Fer { }",
                      "status": "DELIVERY_ACK",
                      "message": {
                        "conversation": "#delivery",
                        "messageContextInfo": {
                          "deviceListMetadata": {
                            "senderKeyHash": "AIsnnJFxgbU0aw==",
                            "senderTimestamp": "1735059880",
                            "recipientKeyHash": "k0Xl4YiL2dI3rQ==",
                            "recipientTimestamp": "1735866203"
                          },
                          "deviceListMetadataVersion": 2,
                          "messageSecret": "cBEwDxgnw3mQkKpzPSKGViNVsBMl/EiIsBOxB4b4AAM="
                        }
                      },
                      "messageType": "conversation",
                      "messageTimestamp": 1735867672,
                      "instanceId": "4c1fcb45-7cf3-4498-b57f-4bf1599328f7",
                      "source": "android"
                    },
                    "destination": "https://n8n.innovasoftpro.dev/webhook/qeva",
                    "date_time": "2025-01-02T22:27:53.105Z",
                    "sender": "5492254596618@s.whatsapp.net",
                    "server_url": "https://evo.innovasoftpro.dev",
                    "apikey": "454444F88F77-4A37-B753-FFAAB4664C16"
                  },
                  "webhookUrl": "https://n8n.innovasoftpro.dev/webhook/qeva",
                  "executionMode": "production"
                }
              }
            ]
          },
          "versionId": "8339759d-d254-4eb8-b6c0-d273657c4cb7",
          "triggerCount": 1,
          "tags": []
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-05-12T00:23:01.806Z",
      "updatedAt": "2025-05-12T00:23:01.806Z",
      "id": "TOc8kDo3nDqdkZWT",
      "name": "backup"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-05-12T01:07:36.210Z",
  "versionId": "f7bac008-1632-4dce-8796-fe0104e3da41"
}