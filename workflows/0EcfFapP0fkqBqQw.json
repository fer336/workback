{
  "active": false,
  "connections": {
    "QR": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "From Me2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type1": {
      "main": [
        [
          {
            "node": "Encolado de msg",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Encolado de msg",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ubicacion": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "V",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calcular_total": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Pocho": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "promociones": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete1": {
      "main": [
        [
          {
            "node": "msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [],
        [],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nombre1": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Delete1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Pocho",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "insertar_pedido": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "promociones1": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "buscar_productos": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "buscar_comida": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "nombre": {
      "ai_tool": [
        [
          {
            "node": "Pocho",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "msg": {
      "main": [
        [
          {
            "node": "Pocho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Cliente": {
      "main": [
        [
          {
            "node": "Variables globales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Encolado de msg": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Variables globales": {
      "main": [
        [
          {
            "node": "Message Type1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Pocho",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "V": {
      "main": [
        [
          {
            "node": "From Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis2": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Validar Cliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis5": {
      "main": [
        [
          {
            "node": "Texto4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis7": {
      "main": [
        [
          {
            "node": "Redis6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "Redis7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis6": {
      "main": [
        [
          {
            "node": "Texto5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Texto4": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Redis5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Texto5": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "1,2s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-29T07:13:23.046Z",
  "id": "0EcfFapP0fkqBqQw",
  "isArchived": false,
  "meta": null,
  "name": "DESPENSA - MASTER",
  "nodes": [
    {
      "parameters": {
        "name": "qr_pagos",
        "description": "Llamaras a esta herramienta cuando el usuario qiuera pagar por QR",
        "workflowId": {
          "__rl": true,
          "value": "tdm8dLqaR7idL6Hm",
          "mode": "list",
          "cachedResultName": "DESPENSA - QR"
        },
        "fields": {
          "values": [
            {
              "name": "telefono",
              "stringValue": "={{ $('Variables globales').first().json.msg.telefono }}"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"banco\":\"Modo\"\n}"
      },
      "id": "08cdb941-1f9c-44d7-9b9d-9ac544c4c176",
      "name": "QR",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        3280,
        1180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "94746291-c0f3-44f3-b635-1fe696d7d74e",
              "leftValue": "={{ $('Webhook').item.json.body.messages[0].from_me }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "76e53913-1238-44db-8201-6bf99b0a99a4",
      "name": "From Me2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1240,
        1060
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0cb14635-2673-408e-86db-ce9e0373674b",
                    "leftValue": "={{ $('Variables globales').item.json.msg.type }}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Variables globales').item.json.msg.type }}",
                    "rightValue": "voice",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9d6039bf-d7d0-489c-8f18-691901f06a47"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "60065893-74f7-4b64-bc1a-d891202efa78",
                    "leftValue": "={{ $('Variables globales').item.json.msg.type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3f726e15-8674-47a2-a924-8a181db57e0a",
                    "leftValue": "={{ $('Variables globales').item.json.msg.type }}",
                    "rightValue": "action",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "reaccion"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "69ad25f9-c335-489b-9301-b3f4075020d8",
                    "leftValue": "={{ $('Variables globales').item.json.msg.type }}",
                    "rightValue": "location",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "locaciton"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dda5054b-9566-4520-90df-d0bbe8c20460",
                    "leftValue": "={{ $('Variables globales').item.json.msg.type }}",
                    "rightValue": "=list_reply",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "e5f46f1c-992d-4bf3-bd48-cfb4fc5ed26f",
      "name": "Message Type1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        520,
        1040
      ]
    },
    {
      "parameters": {
        "name": "ubicacion",
        "description": "llamaras a esta herramienta cuando el usuario quiera saber la ubicacion ",
        "workflowId": {
          "__rl": true,
          "value": "XoB1Q17cG94Zf3s0",
          "mode": "list",
          "cachedResultName": "DESPENSA - Ubicacion"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "Telefono": "={{ $('Variables globales').first().json.msg.telefono }}"
          },
          "matchingColumns": [
            "Telefono"
          ],
          "schema": [
            {
              "id": "Telefono",
              "displayName": "Telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        3520,
        1180
      ],
      "id": "96c2a2da-65c7-4def-a677-7d6a49db7ce5",
      "name": "ubicacion"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "lodepocho",
        "options": {}
      },
      "id": "b3908ec9-c01a-44fb-9c04-a5db335e3dec",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1880,
        1060
      ],
      "webhookId": "3ba6ce2e-1b02-4b06-8edd-9c60afb2db89"
    },
    {
      "parameters": {},
      "id": "28658542-cd7a-49d7-8194-4a0a0adb38da",
      "name": "calcular_total",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        3640,
        1180
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message_completo }}",
        "options": {
          "systemMessage": "=# SYSTEM PROMPT: Pocho - Asistente de Ventas para \"Lo de Pocho\"\n\n## 1. PERFIL\n- **Nombre:** Pocho (Delivery Pocho).\n- **Rol:** Asistente virtual de \"Lo de Pocho\", almacén y servicio de comidas en Neuquén 2098, Mar del Plata.\n- **Objetivo Principal:** Procesar pedidos tanto de productos de almacén como de comidas preparadas, de manera eficiente y clara.\n- **Estilo de Comunicación:** Práctico, directo, amable y con lenguaje coloquial argentino. Usa respuestas cortas.\n- **Contexto Clave:**\n    - **Fecha de Hoy:** {{ $now.format('yyyy-MM-dd') }}\n    - **Monto Mínimo para Delivery:** $30.000 ARS.\n    - **Doble Propuesta:** Almacén completo + Comidas preparadas (empanadas, tartas, sándwiches, guisos).\n- **Sistema de Numeración:** Todos los productos se muestran numerados del 1 al 15 para facilitar pedidos por número.\n- **Gestión de Pedidos:** Genera códigos únicos para cada pedido confirmado que sirven para seguimiento, retiro y reclamos.\n\n## 2. REGLAS MAESTRAS (NO ROMPER NUNCA)\n1.  **TODO ES UNA HERRAMIENTA:** CUALQUIER consulta sobre productos, precios, stock, promociones, cálculo de total, o datos de clientes DEBE ser resuelta usando una de las herramientas disponibles. No respondas de memoria NUNCA.\n2.  **PROHIBIDO MEMORIZAR PRODUCTOS:** Para CUALQUIER pregunta del usuario sobre un producto (ej: \"¿tenés coca?\", \"¿cuánto sale el jamón?\"), usa SIEMPRE la herramienta `buscar_productos`.\n3.  **EL CLIENTE PRIMERO:** Siempre trata al cliente por su nombre real una vez que lo obtengas con `getClientes`. No pidas datos que ya tienes. Si no tienes nombre/email, usa `insert_name_mail` para guardarlos.\n4.  **CONFIRMAR ANTES DE ACTUAR:** Nunca asumas.\n    - No asumas que una pregunta es una compra; espera la confirmación.\n    - Antes de mostrar promociones, pregunta si el usuario quiere verlas.\n    - Antes de finalizar el pedido, muestra el resumen completo y espera un \"sí\" explícito.\n5.  **CÓDIGOS INTERNOS PROHIBIDOS:** Nunca muestres al usuario códigos de productos o promociones (ej: `promo_XXXX`, `cod_XXXX`). Muestra solo nombres y precios.\n6.  **MÉTODOS DE PAGO:** Durante el cierre del pedido, SIEMPRE preguntar cómo quiere abonar (transferencia, QR o efectivo). Para consultas sobre comprobantes o problemas con pagos, dirigir con Anto al +5492234245220.\n7.  **PRECIOS SIN DECIMALES:** NUNCA mostrar centavos. Todos los precios deben estar redondeados (ej: $2.800, NO $2.800,50).\n8.  **MENSAJES DE AUDIO = TEXTO:** Procesa los mensajes de audio exactamente igual que los de texto. No hagas referencia a que fue un audio.\n9.  **UBICACIÓN PARA DELIVERY:** Si el cliente quiere delivery, DEBE compartir su ubicación DESPUÉS de elegir esta opción durante el cierre del pedido.\n10. **LÍMITE DE PRODUCTOS:** SIEMPRE mostrar máximo 15 productos por respuesta para no saturar la pantalla. Si hay más, ofrecer: \"📋 *Hay más opciones. ¿Querés ver más productos?*\"\n11. **RESPUESTA QR OBLIGATORIA:** Cuando ejecutes `qr_pagos()`, responder ÚNICAMENTE \"QR_ENVIADO\" sin ningún texto adicional, emoji o mensaje.\n12. **CÓDIGO DE PEDIDO OBLIGATORIO:** Al confirmar un pedido con `insertar_pedido()`, SIEMPRE mostrar el código generado de forma destacada para que el cliente lo guarde.\n\n## 3. HERRAMIENTAS\n- `buscar_productos(query: string)`: **USO OBLIGATORIO.** Busca uno o varios productos en la base de datos a partir del texto del usuario.\n- `buscar_comida()`: Busca las promociones de comida (se usa solo si el usuario pregunta por \"promos de Anto\" o comidas).\n- `calcular_total()`: Calcula el total del carrito de compras actual.\n- `verificar_elegibilidad_envio()`: Verifica si el total del pedido alcanza los $30.000 para el envío.\n- `verificar_cobertura_zona(ubicacion: string)`: Verifica si la ubicación compartida está dentro de la zona de delivery.\n- `qr_pagos(billetera: string)`: Genera un QR de pago. **IMPORTANTE:** Cuando ejecutes esta herramienta, responde ÚNICAMENTE con el texto \"QR_ENVIADO\" sin agregar nada más.\n- `insertar_pedido()`: Guarda el pedido confirmado en la base de datos y genera el código de seguimiento. Devuelve un código único del pedido.\n- `promo_productos()`: Muestra las promociones generales del almacén.\n- `verificar_pedido_existente()`: Revisa si el cliente ya tiene un pedido activo antes de crear uno nuevo.\n- `getClientes()`: Obtiene los datos (nombre, teléfono) del cliente actual desde la base de datos.\n- `insert_name_mail(nombre: string, email: string)`: Actualiza o inserta el nombre y/o email del cliente.\n\n**NOTA:** Los datos bancarios para transferencias deben ser obtenidos de la configuración del sistema o proporcionados por el administrador.\n\n## 4. WORKFLOW PRINCIPAL (PASO A PASO)\n\n### Paso 1: Bienvenida\n- Saluda al usuario con el mensaje de bienvenida predefinido.\n- **Mensaje de Bienvenida:**\n  > Buen día! 👋 Te comunicaste con Delivery Pocho\n  >\n  > 📍 **Almacén y Comidas** - Bolívar y Neuquén\n  > ⏰ Abiertos hoy de 7am a 21.30hs\n  >\n  > **¿QUÉ NECESITÁS HOY?**\n  > \n  > 🍔 **COMIDAS LISTAS** \n  > • Empanadas, tartas, sándwiches\n  > • Guisos y platos del día\n  > • Promos para el almuerzo\n  >\n  > 🛒 **ALMACÉN**\n  > • Bebidas, fiambres, lácteos\n  > • Productos de limpieza\n  > • Todo para tu despensa\n  >\n  > **Podés escribir 📝 o mandar audio 🎤**\n  > \n  > Preguntame lo que necesites! Por ejemplo:\n  > • *\"qué tenés para almorzar?\"*\n  > • *\"mostrame las empanadas\"*\n  > • *\"necesito coca y galletitas\"*\n  > • *\"300g de jamón\"*\n  > • *\"qué promos tenés?\"*\n  >\n  > **🚚 Hacemos envíos** (pedido mínimo $30.000)\n  > **🏪 O podés retirar** en el local\n  >\n  > ¿Con qué te ayudo? 😊\n\n### Paso 2: Análisis y Búsqueda de Productos\n1.  El usuario envía un mensaje con su pedido o consulta.\n2.  **ANÁLISIS DE INTENCIÓN:**\n    - **Si pregunta por comidas/almuerzo/comer** (ej: \"qué tenés para almorzar?\", \"algo para comer\", \"mostrame las comidas\"):\n      - Ejecuta directamente `buscar_comida()`\n      - Muestra las opciones de comidas preparadas\n    - **Si menciona productos específicos del almacén** (ej: \"coca cola\", \"papel higiénico\", \"300g de jamón\"):\n      - Ejecuta `buscar_productos()` con el mensaje completo\n    - **Si dice \"promos\" o \"promociones\"** sin especificar:\n      - Pregunta: \"¿Las de comidas? 🍔\"\n3.  No dividas la consulta. No pidas que repita los productos uno por uno. Analiza todo el texto de una sola vez.\n\n### Paso 3: Presentación de Productos y Armado de Carrito\n1.  **Si se encontraron productos:** \n    - **LÍMITE:** Mostrar máximo 15 productos más relevantes\n    - **NUMERACIÓN:** Siempre numerar del 1 al 15 para facilitar el pedido\n    - Si hay más de 15, agregar al final: \"📋 *Hay más opciones. ¿Querés ver más productos?*\"\n    - Usar el formato ramificado correcto según si hay categorías o no\n    - **CON CATEGORÍAS:** No repetir el nombre de la categoría en cada producto\n    - **MARCAS:** Si el producto tiene marca, SIEMPRE entre paréntesis\n    > **Ejemplo con categorías:**\n    > ¡Claro! Te encontré esto:\n    > \n    > 🛒 EMPANADAS\n    > └─ 1. 🥩 Carne\n    >       💵 **$1.300**\n    > └─ 2. 🌿 Humita\n    >       💵 **$1.300**\n    > └─ 3. 🍗 Pollo\n    >       💵 **$1.300**\n    >\n    > ¿Te anoto algo? Decime qué querés por número o nombre 😉\n    \n    > **Ejemplo sin categorías:**\n    > ¡Perfecto! Acá está lo que encontré:\n    > \n    > 🛒 CATÁLOGO\n    > └─ 1. 🥤 Coca Cola 2.25L (Coca Cola)\n    >       💵 **$2.800**\n    > └─ 2. 🥩 Paleta x Kg (Paladini)\n    >       💵 **$7.500**\n    >\n    > Podés pedirme por número (ej: \"dame el 1\") o por nombre 📝\n2.  **Si un producto no se encontró:** Ofrece una alternativa si la hay.\n3.  **Pedidos por gramos (fiambres, quesos):**\n    - Si el usuario pide \"300g de paleta\", calcula el subtotal estimado (ej: 0.3 kg * $7500/kg = $2250).\n    - **Ejemplo de respuesta (incluir marca si la tiene):**\n      > Perfecto, anoté:\n      > \n      > 📦 TU PEDIDO\n      > └─ 🥤 2x Coca Cola 2.25L (Coca Cola)\n      >       💵 **$5.600**\n      > └─ 🥩 300g Paleta Sandwich (Paladini)\n      >       💵 **$2.250**\n      >\n      > ¿Querés agregar algo más o cerramos el pedido?\n\n### Paso 4: Proceso de Cierre del Pedido\nCuando el usuario indica que quiere finalizar (\"eso es todo\", \"cerramos\", \"listo\").\n\n1.  **Verificar Pedido Activo:** Ejecuta `verificar_pedido_existente()`.\n    - Si devuelve un pedido activo, pregunta antes de continuar:\n      > Veo que ya tenés un pedido en curso. ¿Querés armar uno nuevo? Para cancelar el anterior, tenés que escribirle a Anto al +5492234245220.\n\n2.  **Confirmar Datos del Cliente:** Ejecuta `getClientes()`.\n    - **Muestra los datos obtenidos** para que el usuario los valide.\n      > Genial. Para cerrar, confirmame si tus datos son correctos:\n      > - **Nombre:** [nombre registrado]\n      > - **Teléfono:** [número registrado]\n      >\n      > Respondé \"sí\" para continuar, o \"no\" para corregirlos.\n    - Si el usuario responde \"no\", pide los datos correctos y usa `insert_name_mail` para actualizarlos.\n\n3.  **Modalidad de Entrega (DESPUÉS de confirmar datos):**\n    - Primero ejecutar `calcular_total()` para obtener el monto del pedido\n    - Una vez confirmados los datos, preguntar:\n      > ¿Cómo querés recibir tu pedido?\n      > \n      > 📍 **DELIVERY** - Te lo llevamos (mínimo $30.000)\n      > 🏪 **RETIRO** - Pasás por el local\n      >\n      > Decime \"delivery\" o \"retiro\"\n    \n    - **Si elige DELIVERY:**\n      - Primero verificar el monto con `verificar_elegibilidad_envio()`\n      - Si NO alcanza el mínimo:\n        > Tu pedido es de $[monto]. Para delivery necesitás llegar a $30.000 (te faltan $[diferencia])\n        > \n        > ¿Querés agregar algo más o preferís retirarlo por el local?\n      - Si SÍ alcanza el mínimo:\n        > Perfecto! Para enviártelo necesito que **compartas tu ubicación** 📍\n        > \n        > (En WhatsApp: tocá el clip 📎 → Ubicación → Enviar tu ubicación actual)\n      - Esperar a que comparta ubicación y ejecutar `verificar_cobertura_zona()`\n    \n    - **Si elige RETIRO:**\n      - Continuar al siguiente paso (método de pago)\n\n4.  **Método de Pago (OBLIGATORIO - Preguntar SIEMPRE):**\n    - Una vez definida la modalidad de entrega, preguntar:\n      > ¿Cómo preferís abonar? 💳\n      > \n      > 📱 **TRANSFERENCIA** - Te paso los datos\n      > 🔲 **QR** - Mercado Pago o Modo\n      > 💵 **EFECTIVO** - Al recibir el pedido\n      >\n      > Decime \"transferencia\", \"QR\" o \"efectivo\"\n    \n    - **Guardar la respuesta** para incluirla en el resumen final\n    - **Si elige TRANSFERENCIA:** Responder que le pasarás los datos después de confirmar\n    - **Si elige QR:** Responder que le enviarás el QR después de confirmar  \n    - **Si elige EFECTIVO:** Confirmar que pagará al momento de la entrega/retiro\n\n5.  **Mostrar Resumen Final (OBLIGATORIO):**\n    - Una vez definida la modalidad de entrega y método de pago, presenta el detalle completo:\n      > **📝 RESUMEN DE TU PEDIDO:**\n      > \n      > 📦 DETALLE\n      > └─ 🥤 2x Coca Cola 2.25L (Coca Cola)\n      >       💵 **$5.600**\n      > └─ 🥩 300g Paleta Sandwich (Paladini)\n      >       💵 **$2.250**\n      >\n      > **━━━━━━━━━━━━━━━━━**\n      > 💰 **TOTAL: $7.850**\n      > **━━━━━━━━━━━━━━━━━**\n      >\n      > **Tus datos:**\n      > - Nombre: [nombre registrado]\n      > - Teléfono: [número registrado]\n      > - Entrega: [Delivery a (dirección) / Retiro en local]\n      > - Pago: [Transferencia / QR / Efectivo]\n      >\n      > ¿Está todo correcto? **Respondé \"sí\" para confirmar el pedido o \"no\" para modificar algo.**\n\n6.  **Confirmación Final y Código de Pedido:**\n    - **SÓLO si el usuario responde \"sí\"**, ejecuta `insertar_pedido()`.\n    - **Mostrar mensaje de éxito VISTOSO con el código:**\n      > ✅ **¡PEDIDO CONFIRMADO!** ✅\n      >\n      > **━━━━━━━━━━━━━━━━━**\n      > 🎉 **¡Gracias por tu compra!** 🎉\n      > **━━━━━━━━━━━━━━━━━**\n      >\n      > 📋 **CÓDIGO DE PEDIDO:**\n      > # **[CÓDIGO_GENERADO]**\n      >\n      > 💡 **Guardá este código para:**\n      > • Consultar el estado\n      > • Retirar tu pedido\n      > • Cualquier reclamo\n      >\n      > [Si eligió TRANSFERENCIA]:\n      > 💳 **DATOS PARA TRANSFERIR:**\n      > • Alias: [Antofiginillull]\n      > • Titular: [Antonella Figinillull]\n      >\n      > [Si eligió QR]:\n      > \n      > [Ejecutar qr_pagos() según corresponda]\n      >\n      > [Si eligió EFECTIVO]:\n      > 💵 **Pagás en efectivo al recibir/retirar**\n      >\n      > [Si es delivery]:\n      > 🚚 **Te lo llevamos en aproximadamente 45-60 minutos**\n      >\n      > [Si es retiro]:\n      > 🏪 **Ya podés pasar a retirarlo por Bolívar y Neuquén**\n      >\n      > 📞 **¿Algún problema?** \n      > Escribile a Anto: https://wa.me/5492234245220\n      >\n      > ¡Que lo disfrutes! 😊\n\n## 5. CASOS ESPECIALES\n\n### A. Consultas sobre Comidas/Almuerzo\n- **Si el usuario pregunta por comidas para almorzar/comer:**\n  - Palabras clave: \"almorzar\", \"almuerzo\", \"comer\", \"comidas\", \"platos\", \"menú\"\n  - Ejecuta directamente `buscar_comida()` y muestra las opciones\n  - **Ejemplo de respuesta:**\n    > ¡Mirá lo que tengo para vos! 😋\n    > \n    > 🛒 EMPANADAS\n    > └─ 1. 🥩 Carne - 💵 **$1.300**    >       \n    > └─ 2. 🧀 JyQ - 💵 **$1.300**\n    >       \n    > \n    > 🛒 SÁNDWICHES  \n    > └─ 3. 🥪 Milanesa Completo 💵 **$3.000**\n    >       \n    >\n    > ¿Qué te gustaría pedir? 🍽️\n\n- **Si el usuario pregunta por \"promos\" sin especificar:**\n  1. Pregunta de forma casual:\n     > ¿Las de comidas? 🍔\n  2. **Si confirma que sí**, ejecuta `buscar_comida()`\n  3. **Si dice que no**, ejecuta `promo_productos()` para mostrar promos del almacén\n\n- **Si menciona directamente \"promos de Anto\", \"celu de Anto\":**\n  - Ejecuta directamente `buscar_comida()` sin preguntar\n\n### B. Respuestas a Temas No Relacionados\n- Si el usuario pregunta por algo fuera de tu alcance:\n  > Disculpame 🙏, solo te puedo ayudar con productos del almacén, precios, envíos y pagos. ¿Querés que busquemos algo para tu compra? 🛒\n\n### C. Manejo de Ubicación para Delivery\n- **Durante el proceso de cierre, cuando el usuario eligió delivery:**\n  1. Esperar a que comparta su ubicación\n  2. Ejecuta `verificar_cobertura_zona(ubicacion)` para verificar si llegamos\n  3. **Si SÍ llegamos:**\n     > ¡Genial! 🎉 Llegamos a tu zona. Tu pedido será enviado a:\n     > 📍 [Dirección detectada]\n     > \n     > [Continuar con el resumen final]\n  4. **Si NO llegamos:**\n     > Uy, disculpá 😔 Por ahora no llegamos a esa zona.\n     > \n     > Podés pasar a retirar tu pedido por el local en Bolívar y Neuquén\n     > \n     > ¿Preferís retirarlo vos? Respondé \"sí\" para cambiar a retiro.\n\n### D. Manejo de Pagos con QR\n- **Cuando el usuario solicita pagar o pide el QR:**\n  1. Ejecuta `qr_pagos(billetera)` con el tipo de billetera solicitada\n  2. **RESPUESTA OBLIGATORIA:** Responder ÚNICAMENTE con el texto:\n     > QR_ENVIADO\n  3. **NO agregar ningún mensaje adicional, emoji o explicación**\n  4. **Ejemplos de solicitudes de pago:**\n     - \"quiero pagar\"\n     - \"pasame el qr\"\n     - \"cómo te pago?\"\n     - \"mandame el qr de mercadopago\"\n\n### E. Ubicación Compartida Fuera del Flujo\n- **Si el usuario comparte ubicación sin haber cerrado el pedido:**\n  > Gracias por compartir tu ubicación! 📍\n  > \n  > La voy a guardar para cuando cerremos el pedido.\n  > \n  > ¿Qué productos querés agregar? 🛒\n\n### F. Consultas por Categorías del Almacén\n- **Si el usuario pregunta por categorías generales:**\n  - \"qué tenés de limpieza\"\n  - \"mostrame las bebidas\"\n  - \"productos de fiambrería\"\n  - \"qué hay en lácteos\"\n  \n  Ejecutar `buscar_productos()` con la categoría mencionada y mostrar:\n  > Acá te muestro lo que tengo en [categoría] 🛒\n  > \n  > [Productos numerados con formato estándar]\n  >\n  > ¿Qué te anoto? Podés pedirme por número o nombre 📝\n\n## 6. ESTILO Y TONO DE RESPUESTA\n- **Sé Rápido y Práctico:** Evita frases largas o introducciones innecesarias. Ve al punto.\n- **Usa Español Argentino Coloquial:** Usa \"vos\" en lugar de \"tú\". Frases como \"¿Te anoto algo?\", \"¿Necesitás algo más?\". Evita \"che\", \"viste\" o jerga muy específica.\n- **Emojis Funcionales:** Úsalos con moderación para guiar la vista y añadir claridad (🛒,📍,⏰,😉,🙏), no para decorar.\n- **PRECIOS SIN DECIMALES:** SIEMPRE mostrar precios redondeados sin centavos. Ejemplos:\n    - ✅ BIEN: $2.800, $1.500, $750\n    - ❌ MAL: $2.800,50 - $1.499,99 - $750,25\n- **PEDIDOS POR NÚMERO:** Cuando el usuario pida por número, interpretar correctamente:\n    - \"dame el 1\" = 1 unidad del producto #1\n    - \"quiero 2 del 3\" = 2 unidades del producto #3\n    - \"el 1, el 4 y tres del 7\" = 1 del #1, 1 del #4 y 3 del #7\n- **Frases Guía:** Integra naturalmente frases como:\n    - \"Ya me fijo y te digo qué encontré.\"\n    - \"Podés pedirme por número o por nombre.\"\n    - \"¿Qué te gustaría para almorzar?\"\n    - \"Tengo empanadas, tartas y sándwiches listos.\"\n- **ACORTAR NOMBRES LARGOS:** Si un producto tiene nombre muy largo, abreviarlo inteligentemente:\n    - Quitar palabras redundantes (botella, paquete, bolsa)\n    - Usar abreviaturas comunes (chico→chico, grande→grande)\n    - Priorizar: tipo de producto + cantidad/tamaño + marca\n    - Ejemplos:\n      - \"Fideos Tallarines Don Vicente Paquete 500g\" → \"Tallarines 500g (Don Vicente)\"\n      - \"Yerba Mate Amanda Selección Especial 1kg\" → \"Yerba Amanda 1kg (Amanda)\"\n      - \"Papel Higiénico Elite Triple Hoja 4 rollos\" → \"Papel Hig. x4 (Elite)\"\n\n## 7. FORMATO DE PRODUCTOS RAMIFICADO (IMPORTANTE)\n**SIEMPRE que muestres productos, usa el formato ramificado con marca y precio con emoji:**\n\n### Reglas del formato:\n- **LÍMITE MÁXIMO: 15 productos por respuesta**\n  - Si hay más de 15 resultados, mostrar los más relevantes primero\n  - Al final agregar: \"📋 *Hay más opciones. ¿Querés ver más productos?*\"\n- **NUMERACIÓN OBLIGATORIA:** Cada producto debe tener un número para facilitar el pedido\n- Usar └─ para cada producto\n- Formato: └─ [número]. [emoji] [nombre] (marca si tiene)\n- Emoji relevante al inicio de cada producto\n- **IMPORTANTE: Nombres de productos máximo 25 caracteres**\n  - Si es muy largo, abreviar inteligentemente\n  - **SI HAY TÍTULO DE CATEGORÍA, NO REPETIRLO EN CADA PRODUCTO**\n    - Ejemplo: Si el título dice \"🛒 EMPANADAS\", los productos serán:\n      ```\n      └─ 1. 🥩 Carne\n            💵 **$1.300**\n      └─ 2. 🌿 Humita\n            💵 **$1.300**\n      ```\n    - NO escribir \"Empanada de Carne\" si ya dice \"EMPANADAS\" arriba\n  - Técnicas de abreviación:\n    - Quitar descripciones largas\n    - Mantener lo esencial: sabor/tipo principal\n    - Usar abreviaturas conocidas (JyQ=Jamón y Queso, C/=con)\n- **MARCA ENTRE PARÉNTESIS:** Si el producto tiene marca, SIEMPRE ponerla entre paréntesis\n- Si NO hay marca, omitir los paréntesis\n- Precio en línea siguiente con indentación, emoji 💵 y precio en **negrita**\n- **CRÍTICO: NUNCA mostrar decimales/centavos en los precios**\n  - ✅ CORRECTO: $2.800, $1.500, $750\n  - ❌ INCORRECTO: $2.800,50 - $1.499,99 - $750,25\n  - Si el precio tiene decimales, SIEMPRE redondear\n- Punto como separador de miles\n\n### Formato correcto para productos sueltos:\n```\n🛒 CATÁLOGO\n└─ 1. 🥤 Coca Cola 2.25L (Coca Cola)\n      💵 **$2.800**\n└─ 2. 🧀 Queso Cremoso x Kg (La Paulina)\n      💵 **$4.900**\n└─ 3. 🥖 Pan lactal (Fargo)\n      💵 **$1.950**\n└─ 4. 💧 Agua Mineral 2L\n      💵 **$1.200**\n```\n\n### Formato cuando hay categorías (NO REPETIR la categoría en cada producto):\n```\n🛒 EMPANADAS\n└─ 1. 🥩 Carne\n      💵 **$1.300**\n└─ 2. 🌿 Humita\n      💵 **$1.300**\n└─ 3. 🍗 Pollo\n      💵 **$1.300**\n└─ 4. 🧀 JyQ\n      💵 **$1.300**\n└─ 5. 🌶️ Matambre\n      💵 **$1.300**\n\n📋 *Hay más opciones. ¿Querés ver más productos?*\n```\n\n### Para el carrito confirmado:\n```\n📦 TU PEDIDO\n└─ 🥤 2x Coca Cola 2.25L (Coca Cola)\n      💵 **$5.600**\n└─ 🧀 300g Queso Cremoso (La Paulina)\n      💵 **$1.470**\n```\n\n### Respuesta del usuario por número:\nSi el usuario dice: \"Dame el 1, el 3 y dos del 4\"\nEl sistema debe entender que quiere:\n- 1 unidad del producto #1\n- 1 unidad del producto #3  \n- 2 unidades del producto #4\n\n### Emojis sugeridos por categoría:\n- Bebidas: 🥤🧃💧🍺\n- Lácteos: 🥛🧀🧈🍶\n- Fiambres: 🥩🥓🍖\n- Panificados: 🥖🍞🥐\n- Dulces: 🍫🍪🍬🍯\n- Limpieza: 🧽🧴✨\n- Snacks: 🥨🍿🥜\n- Conservas: 🥫🫙\n- Pastas/Arroz: 🍝🍚\n- Comidas preparadas: 🍲🥘🍛\n- Empanadas: 🥟🫔\n- Tartas: 🥧🍕\n- Sándwiches: 🥪🍔\n- Ensaladas: 🥗🥙\n\n**Tips importantes:**\n- Si hay marca: siempre entre paréntesis después del nombre\n- Si NO hay marca: omitir paréntesis\n- Precio SIEMPRE con emoji 💵 y en **negrita**\n- Usar indentación (6 espacios) para alinear los precios\n- **Mantener nombres cortos para que entren en una línea de WhatsApp**\n\n### Ejemplos de productos bien abreviados:\n**Para productos sueltos (SIEMPRE con marca entre paréntesis si la tiene):**\n- ❌ \"Leche Entera Larga Vida La Serenísima Sachet 1L\" \n- ✅ \"Leche Entera 1L (La Serenísima)\"\n\n- ❌ \"Detergente Líquido para Ropa Skip Intelligent 3L\"\n- ✅ \"Detergente 3L (Skip)\"\n\n- ❌ \"Agua Mineral Sin Gas Villa del Sur 2L\"\n- ✅ \"Agua Mineral 2L (Villa del Sur)\"\n\n**Cuando hay título de categoría (NO repetir la palabra):**\n- Si el título dice \"🛒 EMPANADAS\":\n  - ❌ \"Empanada de Carne\"\n  - ✅ \"Carne\"\n  \n- Si el título dice \"🛒 TARTAS\":\n  - ❌ \"Tarta de Jamón y Queso\"\n  - ✅ \"JyQ\"\n  \n- Si el título dice \"🛒 SANDWICHES\":\n  - ❌ \"Sándwich de Milanesa con Tomate y Lechuga\"\n  - ✅ \"Milanesa Completo\"\n\n**IMPORTANTE:** \n- SIEMPRE numerar del 1 al 15\n- SI tiene marca, SIEMPRE entre paréntesis\n- Máximo 15 productos por respuesta\n- Si hay más resultados, agregar al final: \"📋 *Hay más opciones. ¿Querés ver más productos?*\"\n- Los nombres deben caber en una línea de WhatsApp (máx 25 caracteres)\n- El usuario puede pedir por número: \"dame el 1 y el 3\" o \"quiero 2 del número 5\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        3260,
        900
      ],
      "id": "68eaa367-a9e9-4ae7-a7ee-d5319c164e27",
      "name": "Pocho"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": "={{1}}"
            },
            {
              "name": "body",
              "value": "={{ $json.text.replace(/\\n/g,'\\n').replace(/\\\"/g,'\\'') }}"
            },
            {
              "name": "to",
              "value": "={{ $('Variables globales').first().json.msg.telefono }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4720,
        1080
      ],
      "id": "2706235f-d605-4c6a-a10d-c522efc6679f",
      "name": "Texto"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "fPuzUHak5Qv9RB8I",
          "mode": "list",
          "cachedResultName": "DESPENSA - verificar_elegibilidad_envio"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "location": "={{ $json.msg.location }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "direccion",
              "displayName": "direccion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1100,
        880
      ],
      "id": "b9c72979-5440-487c-8557-d250026eb6a6",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "name": "promo_productos",
        "description": "Llama a esta herramienta siempre que un usuario quiera ver las promociones de productos",
        "workflowId": {
          "__rl": true,
          "value": "HAtUjKa7vn5tm7K1",
          "mode": "list",
          "cachedResultName": "DESPENSA - Promociones_productos"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "Telefono": "={{ $('Variables globales').first().json.msg.telefono }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "descripcion",
              "displayName": "descripcion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "Telefono",
              "displayName": "Telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "server",
              "displayName": "server",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "apikey",
              "displayName": "apikey",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "instance",
              "displayName": "instance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        4020,
        1180
      ],
      "id": "7ff66d72-5565-43be-b1ee-cb33e366944e",
      "name": "promociones"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Variables globales').first().json.msg.telefono }}"
      },
      "id": "882b17da-a0b9-4aef-b168-6d55b2888c62",
      "name": "Delete1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1720,
        1180
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.trim().includes(\"QR_ENVIADO\") }}",
                    "rightValue": "qr_enviado",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "159113e0-5106-46b9-a8b6-470e8b1b6c01"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Qr enviado"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "21f1d592-4504-443b-b25d-661708cd86bc",
                    "leftValue": "={{ $json.output.trim().includes(\"LISTA_ENVIADA\") }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Lista enviada"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3920,
        760
      ],
      "id": "d89ef227-1e19-4ae2-88e0-82e343995724",
      "name": "Switch"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pc1g3m0ih934pz9",
        "table": "mtxmanzpy3a6oz8",
        "returnAll": true,
        "options": {
          "where": "=(Telefono,eq,{{ $('Variables globales').first().json.msg.telefono }})"
        }
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        4200,
        1180
      ],
      "id": "3ffd22c8-541e-4bcc-ae17-06840710720e",
      "name": "Nombre1"
    },
    {
      "parameters": {
        "jsCode": "// Este código SIEMPRE devuelve un array de objetos como requiere el sistema\nfunction formatearProducto() {\n  try {\n    // Obtener los valores de las variables\n    const title = $('Webhook').first().json.body.messages[0].reply.list_reply.title;\n    const description = $('Webhook').first().json.body.messages[0].reply.list_reply.description;\n    \n    // DETECTAR SI ES COMIDA (por emoji o palabras clave)\n    const esComida = title.includes('🥟') || title.includes('🍖') || title.includes('🥬') || \n                     title.includes('🍝') || title.includes('🍕') || title.includes('🍗') || \n                     title.includes('🥩') || title.includes('🥧') || title.includes('🍲') ||\n                     title.includes('🥪') || title.includes('🍔') || title.includes('🥤') ||\n                     title.includes('☕') || title.includes('🍮') || title.includes('🍽️');\n    \n    if (esComida) {\n      // FORMATO PARA COMIDAS\n      // Extraer precio del título (formato: \"🥟 Empanada de carne - $1200\")\n      let precio = \"\";\n      const precioTitleMatch = title.match(/\\$\\s*([\\d,\\.]+)/);\n      if (precioTitleMatch && precioTitleMatch[1]) {\n        precio = precioTitleMatch[1];\n      }\n      \n      // Extraer nombre de la comida (quitar emoji y precio)\n      let nombreComida = title.replace(/[\\u{1F300}-\\u{1F9FF}]/gu, '').replace(/\\s*-\\s*\\$[\\d,\\.]+.*/, '').trim();\n      \n      const mensajeFormateado = `\n🍽️ *${nombreComida}*\n💰 Precio: *$${precio}*\n📝 ${description}\n\n¿Cuántas porciones querés?`;\n      \n      return mensajeFormateado;\n      \n    } else {\n      // FORMATO ORIGINAL PARA PRODUCTOS (sin modificar)\n      // Extraer los componentes individuales de la descripción\n      // Precio\n      let precio = \"\";\n      const precioMatch = description.match(/Precio:\\s*\\*\\$?([\\d,\\.]+)/);\n      if (precioMatch && precioMatch[1]) {\n        precio = precioMatch[1];\n      }\n      \n      // Código\n      let codigo = \"\";\n      const codigoMatch = description.match(/Código:\\s*(\\w+)/);\n      if (codigoMatch && codigoMatch[1]) {\n        codigo = codigoMatch[1];\n      }\n      \n      // Disponibilidad\n      let disponibilidad = \"🔴 Sin stock\";\n      if (description.includes(\"Disponible\")) {\n        disponibilidad = \"🟢 Disponible\";\n      }\n      \n      // Construir el mensaje en el formato deseado\n      const mensajeFormateado = `\n. ${title}\n.🔥 Precio: *$${precio}*\n.🆔 Código: ${codigo}\n.📦 Stock: ${disponibilidad}\n`;\n      \n      return mensajeFormateado;\n    }\n    \n  } catch (error) {\n    console.error(\"Error al formatear producto:\", error);\n    return \"Error al procesar producto\";\n  }\n}\n\n// IMPORTANTE: Este es el retorno que necesitas - SIEMPRE usar array de objetos\nreturn [\n  { \n    message_completo: formatearProducto() \n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        1180
      ],
      "id": "dec61a16-8102-4d92-b5a0-cf92fcde9aea",
      "name": "Code"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=agente_pocho:{{ $('Variables globales').first().json.msg.telefono }}",
        "sessionTTL": 3600,
        "contextWindowLength": 9
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        2840,
        1220
      ],
      "id": "70632cca-f12f-455c-80af-ed607271491d",
      "name": "Redis Chat Memory"
    },
    {
      "parameters": {
        "name": "insertar_pedido",
        "description": "llamaras a esta herramienta cuando el pedido este confirmado",
        "workflowId": {
          "__rl": true,
          "value": "MA1amyL5ScIQzNJb",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "telefono",
              "stringValue": "={{ $('Variables globales').first().json.msg.telefono }}"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "\n  {\n    \"Nombre\": \"Juan Pérez\",\n    \"Productos\": [\n      {\n            \"Detalle\": \"Productos: Coca cola pack\",\n       \"Cantidad\": \"2\" ,\n      \"precio\": \"$300\"       \n    }],   \n    \"Total\":\"$1700\",\n    \"Telefono\": \"555-1234\",\n    \"Direccion\": \"Av. Principal #123 \",\n    \"Metodo de pago\": \"QR, TRANSCFERENCIA, OTRO\",\n    \"Retiro\": \"Local o domicilio\",\n    \"correo\":\"fercassera@gmail.com\",\n    \"Estado\": \"Pagado \",\n    \"Codigo pedido\":\"codigo generado\"\n  }\n"
      },
      "id": "f20268c6-d334-4220-b518-6f038827fe23",
      "name": "insertar_pedido",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        3040,
        1180
      ]
    },
    {
      "parameters": {
        "name": "promo_bancaria",
        "description": "Llama a esta herramienta siempre que el usuario quiera saber las promociones bancarias",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "yOh5hvWd7551O1Ez",
          "cachedResultName": "DESPENSA - Promociones"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        3160,
        1180
      ],
      "id": "fcc4f5f6-1f70-4b7e-895b-f2039dc5853a",
      "name": "promociones1"
    },
    {
      "parameters": {
        "name": "buscar_productos",
        "description": "Llama a esta herramienta para saber sobre un producto o comidas",
        "workflowId": {
          "__rl": true,
          "value": "4bACFIaEnJooL6W4",
          "mode": "list",
          "cachedResultName": "DESPENSA - Buscar productos"
        },
        "fields": {
          "values": [
            {
              "name": "Telefono",
              "stringValue": "={{ $('Variables globales').first().json.msg.telefono }}"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n\t\"Descripcion\": \"azucar\"\n}"
      },
      "id": "d63759ff-2b09-483b-a6bf-5e844bf24ebd",
      "name": "buscar_productos",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        3400,
        1180
      ]
    },
    {
      "parameters": {
        "name": "buscar_comida",
        "description": "Llamaras a esta herramienta cuando el cliente quiera ver comidas",
        "workflowId": {
          "__rl": true,
          "value": "95iu7FwWHLs11Vkc",
          "mode": "list",
          "cachedResultName": "DESPENSA - Comidas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "Telefono": "={{ $('Variables globales').first().json.msg.telefono }}",
            "descripcion": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('descripcion', `traeras lo que te pida el cliente `, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "descripcion",
              "displayName": "descripcion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "Telefono",
              "displayName": "Telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        3880,
        1180
      ],
      "id": "eb1c9644-5814-4b2f-8e31-781bafa6ac35",
      "name": "buscar_comida"
    },
    {
      "parameters": {
        "name": "insert_name_mail",
        "description": "Llamaras a esta herramienta cuando tengas sus datos ",
        "workflowId": {
          "__rl": true,
          "value": "MuBTjZBk3QgLNPG5",
          "mode": "list",
          "cachedResultName": "DESPENSA - Nombre real"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "nombre": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('nombre', `Guardaras el nombre real del usuario`, 'string') }}",
            "telefono": "={{ $('Variables globales').first().json.msg.telefono }}",
            "correo": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('correo', `envia el correo`, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "nombre",
              "displayName": "nombre",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "Id",
              "displayName": "Id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "correo",
              "displayName": "correo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        3760,
        1180
      ],
      "id": "b9fea2c7-3d02-4d39-a52b-d0ffc54905fe",
      "name": "nombre"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52cc775a-1114-46b3-9b00-bc2a6900638e",
              "name": "message_completo",
              "value": "={{ $json?.message_completo || $json?.message_completo || $json?.text?.join(\"\\n\") || $json?.response || $json.response }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2960,
        900
      ],
      "id": "a7b6ab5b-5d50-45de-bb34-0648d91fc1d0",
      "name": "msg"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "o8xV7KjMjwGmMY54",
          "mode": "list",
          "cachedResultName": "SUB TAREA - OBTENER NOMBRE O INSERTAR"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "numero": "={{ $('V').first().json.msg.telefono }}",
            "servidor_db": "https://db.innovasoftpro.dev",
            "idTabla": "mtxmanzpy3a6oz8",
            "token": "8swibk167yA8yLIM6pwCwuTBsnup15m4dFJjMDag",
            "nombre_columna": "Telefono",
            "pushname": "={{ $('V').first().json.msg.nombre }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "servidor_db",
              "displayName": "servidor_db",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "idTabla",
              "displayName": "idTabla",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "token",
              "displayName": "token",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "numero",
              "displayName": "numero",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "nombre_columna",
              "displayName": "nombre_columna",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "pushname",
              "displayName": "pushname",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "servidor_evo",
              "displayName": "servidor_evo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "id_mensaje",
              "displayName": "id_mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -380,
        1080
      ],
      "id": "c490388d-159b-415d-bf29-2273ddb8886e",
      "name": "Validar Cliente"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "nJ8oQiqiXN62qgkS",
          "mode": "list",
          "cachedResultName": "SUB TAREA - ENLOCAR MSG"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1100,
        520
      ],
      "id": "a24145ea-49a7-48c2-934b-bbd0e56456d5",
      "name": "Encolado de msg"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "timestamp"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1540,
        520
      ],
      "id": "2b82ddc1-b93a-4efc-81da-058e994849d9",
      "name": "Sort"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "text",
              "renameField": true,
              "outputFieldName": "text"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1840,
        520
      ],
      "id": "8b5855ab-8db7-4f70-91ce-1eee8a4d4bf3",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "79a702ff-5f8c-4814-bddf-5e3acb5a5f2e",
              "name": "msg",
              "value": "={{ JSON.stringify($('V').first().json.msg)}}",
              "type": "object"
            },
            {
              "id": "9337176e-e568-4efa-8c05-3bdb12ecfb61",
              "name": "list[0].Id",
              "value": "={{ JSON.stringify($json.list[0].Id) }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "283dc5c4-e232-463f-8785-ab966adfe145",
      "name": "Variables globales",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        1000
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-05-20",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2560,
        1200
      ],
      "id": "460ef171-6370-4e08-b694-59aff67ce34f",
      "name": "Google Gemini Chat Model"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f9ecf2fc-da2c-4f44-897a-5dc0a2f2f379",
              "name": "msg.telefono",
              "value": "={{ $json.body.messages[0].chat_id.replace(/\\D/g, '') }}",
              "type": "string"
            },
            {
              "id": "dab7ca54-c3d2-4a36-a9ca-a0ebbd375ef5",
              "name": "msg.nombre",
              "value": "={{ $json.body.messages[0].chat_name }}",
              "type": "string"
            },
            {
              "id": "cc7dcfe1-8ad7-4fe8-93ec-8f643c7d08c7",
              "name": "msg.type",
              "value": "={{ $json.body.messages[0].type }}",
              "type": "string"
            },
            {
              "id": "a3d07914-3c39-47d8-a122-9c1f6062c940",
              "name": "msg.ListaResponse",
              "value": "={{ $('Webhook').item?.json?.body?.data?.message?.listResponseMessage?.title || \"\" }}\n{{ $('Webhook').item?.json?.body?.data?.message?.listResponseMessage?.description || \"\" }}",
              "type": "string"
            },
            {
              "id": "81612acf-1b66-4c8e-82e4-ce8c77b31334",
              "name": "msg.content",
              "value": "={{ $json?.body?.messages[0]?.text?.body || $json?.body?.messages[0]?.voice?.link || $json?.body?.messages[0]?.link_preview.url ||  $json.body.messages[0].voice.id }}",
              "type": "string"
            },
            {
              "id": "01710423-6391-4a34-81e1-06d4779caf4d",
              "name": "msg.timestamp",
              "value": "={{ $json.body.messages[0].timestamp.toDateTime('s').toLocal().toISO() }}",
              "type": "string"
            },
            {
              "id": "2dfc64f4-b222-4ea7-b095-fdd96d9fcb95",
              "name": "msg.idmsg",
              "value": "={{ $json.body.messages[0].id }}",
              "type": "string"
            },
            {
              "id": "ca81718f-74eb-4960-ac3a-5b59f39f8710",
              "name": "datos.server_db",
              "value": "https://db.innovasoftpro.dev",
              "type": "string"
            },
            {
              "id": "be83160a-e151-4f62-bfde-590af142ae74",
              "name": "db.table_clientes",
              "value": "mwk4ui7lirmxc8h",
              "type": "string"
            },
            {
              "id": "c85ab512-ca17-401b-b025-4b6fc11ac818",
              "name": "db.token_db",
              "value": "BAWLISa1QL05FMwlWzJCpo9ONDaZ8_dXO0OULjhB",
              "type": "string"
            },
            {
              "id": "74ee121e-f109-4425-9b1e-ff7b6c49ae45",
              "name": "datos.tabla",
              "value": "mwk4ui7lirmxc8h",
              "type": "string"
            },
            {
              "id": "82426625-5ed5-49a9-abb1-d4ed246fddf2",
              "name": "msg.row_id_fecha",
              "value": "={{ $json.body.messages[0].reply.list_reply.id }}",
              "type": "string"
            },
            {
              "id": "6fedaf9c-efe8-46e5-bb61-b42525ddafa1",
              "name": "grupo",
              "value": "={{ $json.body.messages[0].chat_id.endsWith('@g.us') }}",
              "type": "boolean"
            },
            {
              "id": "7f846767-8866-43e5-845a-d1feda60451c",
              "name": "datos.token",
              "value": "B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410",
              "type": "string"
            },
            {
              "id": "865ae94f-3e98-4b1b-943c-fafa6c059e45",
              "name": "msg.titulo_categoria",
              "value": "={{ $json?.body?.messages[0]?.context?.quoted_content?.header || \"\"}}",
              "type": "string"
            },
            {
              "id": "f71f1502-02e3-4de1-a62a-232537d8f402",
              "name": "datos.server_whapi",
              "value": "https://gate.whapi.cloud",
              "type": "string"
            },
            {
              "id": "2ccc2ae6-79a4-4998-8ef8-681fbb4876cc",
              "name": "msg.eventId",
              "value": "={{ $json.body.messages[0].context.quoted_id }}",
              "type": "string"
            },
            {
              "id": "47fcf50c-9216-4f7f-b5f4-b6d25b049891",
              "name": "",
              "value": "",
              "type": "string"
            },
            {
              "id": "95001dea-1bf9-41f7-b41f-4a5bd23719cf",
              "name": "msg.location.latitude",
              "value": "={{ $json.body.messages[0].location.latitude }}",
              "type": "number"
            },
            {
              "id": "1a6f4720-d9db-4093-9d7e-2fa585ad07bc",
              "name": "msg.location.longitude",
              "value": "={{ $json.body.messages[0].location.longitude }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "e21227b0-dd66-4534-b04c-fb8264bf2179",
      "name": "V",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1500,
        1060
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "estado",
        "key": "=bot:{{ $json.msg.telefono }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1060,
        1180
      ],
      "id": "f0e9051c-7a89-444c-ac34-10608af9b572",
      "name": "Redis2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a96a483c-e241-46d6-a5c0-6d5a315c6ca5",
              "leftValue": "={{ $json.estado }}",
              "rightValue": "off",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -740,
        1360
      ],
      "id": "2189a9f0-68de-49f7-9300-4869b139a54a",
      "name": "If2"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=bot:{{ $json.msg.telefono }}",
        "value": "off",
        "expire": true,
        "ttl": 360
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -660,
        220
      ],
      "id": "0da4dfba-61d5-4f12-a17b-725ca9ce8b83",
      "name": "Redis5"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=bot:{{ $json.msg.telefono }}",
        "value": "on"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -460,
        440
      ],
      "id": "d7cde57b-d444-4bd2-a0cb-e05d1d77e76b",
      "name": "Redis7"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c39920c3-e5a7-48d6-b1ed-31b94ae55381",
              "leftValue": "={{ $json.msg.content.toLowerCase() }}",
              "rightValue": "on",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -680,
        600
      ],
      "id": "69f5be28-2608-4bf2-b277-abc82e4fef16",
      "name": "If6"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=bot:{{ $json.msg.telefono }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -240,
        620
      ],
      "id": "48ed9af3-fc27-47e3-b361-d35c2c36befa",
      "name": "Redis6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": "={{1}}"
            },
            {
              "name": "body",
              "value": "=_Hola 👋 Te paso con una de las chicas del equipo de Pocho_ 💁‍♀️✨"
            },
            {
              "name": "to",
              "value": "={{ $json.msg.telefono }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -340,
        80
      ],
      "id": "bddf346d-a718-432f-a99f-0d722a0cc7b3",
      "name": "Texto4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7c646201-9638-4381-ba78-8b2ede680b4d",
              "leftValue": "={{ $('Webhook').item.json.body.messages[0].from }}",
              "rightValue": "5492235246842",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "60e15f5b-bbc9-47ea-a160-5df35f39a4a9",
              "leftValue": "={{ $('Webhook').item.json.body.messages[0].text.body.toLowerCase() === 'off' }}",
              "rightValue": "={{pausar}}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -920,
        360
      ],
      "id": "2bde0de3-62b1-4043-bc55-ce3d081592d2",
      "name": "If"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://gate.whapi.cloud/messages/{{ $('V').item.json.msg.idmsg }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        180,
        620
      ],
      "id": "c2d0ca4b-e1c2-4b90-82c9-561bd5d31f85",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://gate.whapi.cloud/messages/{{ $('V').item.json.msg.idmsg }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -40,
        0
      ],
      "id": "1bf4cbec-7fd6-4098-a768-802179657996",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": "={{1}}"
            },
            {
              "name": "body",
              "value": "=_Hola de nuevo, sigo yo la conversacion_ 🤖"
            },
            {
              "name": "to",
              "value": "={{ $json.msg.telefono }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -20,
        460
      ],
      "id": "1f753818-5155-4239-9739-7039ec638b83",
      "name": "Texto5"
    },
    {
      "parameters": {
        "jsCode": "// --- Funciones de procesamiento de texto ---\n\n// Función para procesar el texto sin dividirlo\nfunction processText(textInput) {\n  // Asegúrate de que textInput sea un string o pueda ser convertido\n  let text = textInput;\n\n  // Si la entrada no es un string\n  if (typeof text !== 'string') {\n    // Si es null o undefined, simplemente devolvemos un string vacío\n    if (text === null || text === undefined) {\n      return '';\n    }\n\n    // Si es un objeto, intentamos encontrar campos comunes que contengan texto\n    if (typeof text === 'object') {\n      if (text.text) {\n        text = text.text;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.type === 'text' && text.text) {\n        text = text.text;\n      } else if (text.output) { // Intentamos extraer de un campo 'output'\n          // Si output es un string, lo usamos\n          if (typeof text.output === 'string') {\n              text = text.output;\n          } else { // Si output es un objeto o array, intentamos extraer de ahí\n              const extracted = extractTextContent(text.output); // Usamos la función de extracción\n              if (extracted) {\n                  text = extracted;\n              } else {\n                   // Si no pudimos extraer, intentamos convertir todo el objeto a string\n                   try {\n                       text = JSON.stringify(text);\n                   } catch (e) {\n                       console.error(\"No se pudo serializar el objeto a string:\", e);\n                       return ''; // Si falla la serialización, devolvemos vacío\n                   }\n              }\n          }\n      } else {\n        // Si no encontramos campos de texto comunes ni 'output', intentamos convertir a string\n        try {\n          text = JSON.stringify(text);\n        } catch (e) {\n           console.error(\"No se pudo serializar el objeto a string:\", e);\n           return ''; // Si falla la serialización, devolvemos vacío\n        }\n      }\n    } else { // Si no es string, objeto, null o undefined, devolvemos vacío\n       console.warn(\"Entrada a processText no es string, objeto, null o undefined:\", typeof text);\n       return '';\n    }\n  }\n\n  // Si después de los intentos no tenemos un string válido, devolvemos vacío\n  if (typeof text !== 'string' || text.trim() === '') {\n      return '';\n  }\n\n  // Ahora que tenemos un string, procesamos el formato\n  const processedText = text\n    .replace(/\\*\\*(.+?)\\*\\*/g, '*$1*') // **texto** -> *texto*\n    .replace(/###\\s*/g, '')         // Elimina encabezados ###\n    .replace(/[¡¿!]/g, '')         // Elimina signos de exclamación e interrogación iniciales y finales\n    .replace(/\\n{3,}/g, '\\n\\n')    // Elimina líneas vacías múltiples\n    .trim();                        // Elimina espacios al inicio y final\n\n  return processedText;\n}\n\n// Función para extraer texto de diferentes estructuras de datos\nfunction extractTextContent(data) {\n  // Si la data es null o undefined, retornamos null inmediatamente\n  if (data === null || data === undefined) {\n    return null;\n  }\n\n  // Si es un string, lo retornamos directamente\n  if (typeof data === 'string') {\n    return data;\n  }\n\n  // Si es un array\n  if (Array.isArray(data)) {\n    // Iteramos sobre el array e intentamos extraer texto de cada elemento\n    for (const item of data) {\n       const extracted = extractTextContent(item); // Llamada recursiva para elementos del array\n       if (extracted) {\n           return extracted; // Devolvemos el primer texto que encontramos\n       }\n    }\n    return null; // Si no encontramos texto en ningún elemento del array\n  }\n\n  // Si es un objeto\n  if (typeof data === 'object') {\n    // Priorizamos campos comunes que suelen contener texto\n    if (data.text) {\n      return data.text;\n    }\n    if (data.message) {\n      return data.message;\n    }\n    // Si tiene un campo 'output', intentamos extraer texto de él (puede ser string, array u objeto)\n    if (data.output !== undefined && data.output !== null) {\n         const extracted = extractTextContent(data.output); // Llamada recursiva para el campo output\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'response', intentamos extraer texto de él\n     if (data.response !== undefined && data.response !== null) {\n         const extracted = extractTextContent(data.response); // Llamada recursiva para el campo response\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'json', intentamos extraer texto de él\n     if (data.json !== undefined && data.json !== null) {\n         const extracted = extractTextContent(data.json); // Llamada recursiva para el campo json\n         if (extracted) {\n             return extracted;\n         }\n    }\n    // Si no encontramos campos de texto comunes ni estructuras anidadas esperadas,\n    // intentamos convertir el objeto completo a string como último recurso\n     try {\n         return JSON.stringify(data);\n     } catch (e) {\n         console.error(\"No se pudo serializar el objeto a string en extractTextContent:\", e);\n         return null; // Si falla la serialización\n     }\n  }\n\n  // Si el tipo de dato no es manejado, retornamos null\n  console.warn(\"Tipo de dato no manejado en extractTextContent:\", typeof data);\n  return null;\n}\n\n// --- Lógica Principal con manejo seguro de nodos ---\nlet textToProcess = null;\n\ntry {\n  // Verificar si el nodo \"Cancelar evento\" existe y tiene datos\n  let cancelarEventoData = null;\n  try {\n    // Usamos try-catch para capturar errores si el nodo no existe\n    cancelarEventoData = $('Cancelar evento');\n    if (cancelarEventoData && cancelarEventoData.first() && cancelarEventoData.first().json) {\n      if (cancelarEventoData.first().json.response !== undefined) {\n        textToProcess = extractTextContent(cancelarEventoData.first().json.response);\n      } else {\n        textToProcess = extractTextContent(cancelarEventoData.first().json);\n      }\n    }\n  } catch (e) {\n    // Silenciosamente ignoramos errores si el nodo no existe\n    console.log(\"Nodo 'Cancelar evento' no disponible o sin datos válidos\");\n  }\n  \n  // Solo intentamos acceder a AGE3 si aún no hemos encontrado texto para procesar\n  if (!textToProcess) {\n    try {\n      // Usamos try-catch para capturar errores si el nodo no existe\n      const age3Data = $('AGE3');\n      if (age3Data && age3Data.first() && age3Data.first().json) {\n        if (age3Data.first().json.output !== undefined) {\n          textToProcess = extractTextContent(age3Data.first().json.output);\n        } else {\n          textToProcess = extractTextContent(age3Data.first().json);\n        }\n      }\n    } catch (e) {\n      // Silenciosamente ignoramos errores si el nodo no existe\n      console.log(\"Nodo 'AGE3' no disponible o sin datos válidos\");\n    }\n  }\n  \n  // Si no hemos encontrado datos en los nodos específicos, intentamos con $input directamente\n  if (!textToProcess) {\n    try {\n      const inputItems = $input.all();\n      if (inputItems && inputItems.length > 0 && inputItems[0].json) {\n        textToProcess = extractTextContent(inputItems[0].json);\n      }\n    } catch (e) {\n      console.log(\"No se pudo acceder a los datos de entrada directamente:\", e.message);\n    }\n  }\n  \n  // Procesar y retornar el resultado\n  if (textToProcess) {\n    const processedText = processText(textToProcess);\n    // Devolvemos el texto procesado como un solo mensaje\n    return [{json: {text: processedText}}];\n  } else {\n    // Si no se pudo obtener ni procesar texto, devolvemos un string vacío\n    return [{json: {text: ''}}];\n  }\n} catch (error) {\n  // Capturamos cualquier error no manejado y devolvemos un objeto con información del error\n  console.error(\"Error general en el nodo:\", error.message);\n  return [{json: {text: '', error: error.message}}];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4280,
        980
      ],
      "id": "8f6eaf88-f563-4e41-8784-a00f4cd40a4d",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// --- Funciones de procesamiento de texto ---\n\n// Función para procesar el texto y dividirlo inteligentemente\nfunction processAndSplitText(textInput) {\n  // Asegúrate de que textInput sea un string o pueda ser convertido\n  let text = textInput;\n\n  // Si la entrada no es un string\n  if (typeof text !== 'string') {\n    // Si es null o undefined, simplemente devolvemos un array vacío\n    if (text === null || text === undefined) {\n      return [];\n    }\n\n    // Si es un objeto, intentamos encontrar campos comunes que contengan texto\n    if (typeof text === 'object') {\n      if (text.text) {\n        text = text.text;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.type === 'text' && text.text) {\n        text = text.text;\n      } else if (text.output) { // Intentamos extraer de un campo 'output'\n          // Si output es un string, lo usamos\n          if (typeof text.output === 'string') {\n              text = text.output;\n          } else { // Si output es un objeto o array, intentamos extraer de ahí\n              const extracted = extractTextContent(text.output); // Usamos la función de extracción\n              if (extracted) {\n                  text = extracted;\n              } else {\n                   // Si no pudimos extraer, intentamos convertir todo el objeto a string\n                   try {\n                       text = JSON.stringify(text);\n                   } catch (e) {\n                       console.error(\"No se pudo serializar el objeto a string:\", e);\n                       return []; // Si falla la serialización, devolvemos vacío\n                   }\n              }\n          }\n      } else {\n        // Si no encontramos campos de texto comunes ni 'output', intentamos convertir a string\n        try {\n          text = JSON.stringify(text);\n        } catch (e) {\n           console.error(\"No se pudo serializar el objeto a string:\", e);\n           return []; // Si falla la serialización, devolvemos vacío\n        }\n      }\n    } else { // Si no es string, objeto, null o undefined, devolvemos vacío\n       console.warn(\"Entrada a processAndSplitText no es string, objeto, null o undefined:\", typeof text);\n       return [];\n    }\n  }\n\n  // Si después de los intentos no tenemos un string válido, devolvemos vacío\n  if (typeof text !== 'string' || text.trim() === '') {\n      return [];\n  }\n\n  // Ahora que tenemos un string, procesamos el formato\n  const processedText = text\n    .replace(/\\*\\*(.+?)\\*\\*/g, '*$1*') // **texto** -> *texto*\n    .replace(/###\\s*/g, '')         // Elimina encabezados ###\n    .replace(/[¡¿!]/g, '');         // Elimina signos de exclamación e interrogación iniciales y finales\n\n  // Divide en líneas para análisis\n  const lines = processedText.split('\\n');\n\n  // Grupos para almacenar los mensajes\n  const messages = [];\n  let currentMessage = [];\n  let inNumberedSection = false;\n  let currentSectionNumber = null;\n\n  // Detectar secciones numeradas y agrupables\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    // Detecta si la línea es un encabezado numerado (ej: \"1. Tipo de propiedad:\")\n    const numberedHeaderMatch = line.match(/^\\s*(\\d+)\\.\\s+([^:]+):/);\n\n    if (numberedHeaderMatch) {\n      const sectionNumber = parseInt(numberedHeaderMatch[1]);\n\n      // Si estamos empezando una nueva sección numerada O si el número no es el siguiente esperado\n      if (!inNumberedSection || (inNumberedSection && sectionNumber !== currentSectionNumber + 1)) {\n         // Si tenemos contenido previo, guardamos como mensaje separado\n         if (currentMessage.length > 0) {\n             messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n             currentMessage = [];\n         }\n         inNumberedSection = true;\n      }\n      currentSectionNumber = sectionNumber; // Actualizamos el número de sección actual\n       currentMessage.push(line); // Agregamos la línea al mensaje actual\n\n    } else if (line.trim() === '') { // Línea vacía\n        // Una línea vacía puede terminar una sección si hay contenido previo\n        if (currentMessage.length > 0) {\n             // Si no estamos en una sección numerada, una línea vacía termina el mensaje actual\n             if (!inNumberedSection) {\n                 messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n                 currentMessage = [];\n             } else {\n                 // Si estamos en una sección numerada, una línea vacía se agrega al mensaje actual,\n                 // podría terminar la sección si hay otra línea vacía o fin de texto después.\n                 currentMessage.push(line);\n             }\n        }\n         // Si currentMessage está vacío, una línea vacía consecutiva no hace nada\n\n    } else { // Línea con contenido que no es un encabezado numerado\n        currentMessage.push(line);\n        inNumberedSection = false; // Salimos de la sección numerada si el contenido no sigue el patrón\n    }\n  }\n\n  // Agregar el último mensaje si queda algo\n  if (currentMessage.length > 0) {\n    messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n  }\n\n  // Filtrar mensajes vacíos y limpiar líneas vacías extra\n  return messages\n    .filter(msg => msg.length > 0) // Filtrar cadenas vacías después del trim\n    .map(msg => {\n      // Eliminar líneas vacías múltiples dentro del mensaje\n      return msg.replace(/\\n{2,}/g, '\\n\\n');\n    });\n}\n\n// Función para extraer texto de diferentes estructuras de datos\nfunction extractTextContent(data) {\n  // Si la data es null o undefined, retornamos null inmediatamente\n  if (data === null || data === undefined) {\n    return null;\n  }\n\n  // Si es un string, lo retornamos directamente\n  if (typeof data === 'string') {\n    return data;\n  }\n\n  // Si es un array\n  if (Array.isArray(data)) {\n    // Iteramos sobre el array e intentamos extraer texto de cada elemento\n    for (const item of data) {\n       const extracted = extractTextContent(item); // Llamada recursiva para elementos del array\n       if (extracted) {\n           return extracted; // Devolvemos el primer texto que encontramos\n       }\n    }\n    return null; // Si no encontramos texto en ningún elemento del array\n  }\n\n  // Si es un objeto\n  if (typeof data === 'object') {\n    // Priorizamos campos comunes que suelen contener texto\n    if (data.text) {\n      return data.text;\n    }\n    if (data.message) {\n      return data.message;\n    }\n    // Si tiene un campo 'output', intentamos extraer texto de él (puede ser string, array u objeto)\n    if (data.output !== undefined && data.output !== null) {\n         const extracted = extractTextContent(data.output); // Llamada recursiva para el campo output\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'response', intentamos extraer texto de él\n     if (data.response !== undefined && data.response !== null) {\n         const extracted = extractTextContent(data.response); // Llamada recursiva para el campo response\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'json', intentamos extraer texto de él\n     if (data.json !== undefined && data.json !== null) {\n         const extracted = extractTextContent(data.json); // Llamada recursiva para el campo json\n         if (extracted) {\n             return extracted;\n         }\n    }\n    // Si no encontramos campos de texto comunes ni estructuras anidadas esperadas,\n    // intentamos convertir el objeto completo a string como último recurso\n     try {\n         return JSON.stringify(data);\n     } catch (e) {\n         console.error(\"No se pudo serializar el objeto a string en extractTextContent:\", e);\n         return null; // Si falla la serialización\n     }\n  }\n\n  // Si el tipo de dato no es manejado, retornamos null\n  console.warn(\"Tipo de dato no manejado en extractTextContent:\", typeof data);\n  return null;\n}\n\n// --- Lógica Principal con manejo seguro de nodos ---\nlet textToProcess = null;\n\ntry {\n  // Verificar si el nodo \"Cancelar evento\" existe y tiene datos\n  let cancelarEventoData = null;\n  try {\n    // Usamos try-catch para capturar errores si el nodo no existe\n    cancelarEventoData = $('Cancelar evento');\n    if (cancelarEventoData && cancelarEventoData.first() && cancelarEventoData.first().json) {\n      if (cancelarEventoData.first().json.response !== undefined) {\n        textToProcess = extractTextContent(cancelarEventoData.first().json.response);\n      } else {\n        textToProcess = extractTextContent(cancelarEventoData.first().json);\n      }\n    }\n  } catch (e) {\n    // Silenciosamente ignoramos errores si el nodo no existe\n    console.log(\"Nodo 'Cancelar evento' no disponible o sin datos válidos\");\n  }\n  \n  // Solo intentamos acceder a AGE3 si aún no hemos encontrado texto para procesar\n  if (!textToProcess) {\n    try {\n      // Usamos try-catch para capturar errores si el nodo no existe\n      const age3Data = $('AGE3');\n      if (age3Data && age3Data.first() && age3Data.first().json) {\n        if (age3Data.first().json.output !== undefined) {\n          textToProcess = extractTextContent(age3Data.first().json.output);\n        } else {\n          textToProcess = extractTextContent(age3Data.first().json);\n        }\n      }\n    } catch (e) {\n      // Silenciosamente ignoramos errores si el nodo no existe\n      console.log(\"Nodo 'AGE3' no disponible o sin datos válidos\");\n    }\n  }\n  \n  // Si no hemos encontrado datos en los nodos específicos, intentamos con $input directamente\n  if (!textToProcess) {\n    try {\n      const inputItems = $input.all();\n      if (inputItems && inputItems.length > 0 && inputItems[0].json) {\n        textToProcess = extractTextContent(inputItems[0].json);\n      }\n    } catch (e) {\n      console.log(\"No se pudo acceder a los datos de entrada directamente:\", e.message);\n    }\n  }\n  \n  // Procesar y retornar el resultado\n  if (textToProcess) {\n    const textArray = processAndSplitText(textToProcess);\n    // Devolvemos un array con un objeto que contiene el array de texto\n    return [{json: {text: textArray}}];\n  } else {\n    // Si no se pudo obtener ni procesar texto, devolvemos un array vacío\n    return [{json: {text: []}}];\n  }\n} catch (error) {\n  // Capturamos cualquier error no manejado y devolvemos un objeto con información del error\n  console.error(\"Error general en el nodo:\", error.message);\n  return [{json: {text: [], error: error.message}}];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3740,
        1600
      ],
      "id": "05bad08c-bead-4f17-9df3-0688696ad345",
      "name": "Separa datos",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer Qo7qoYEVIKvRppohj25MEaHl1dPwskEv"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": "={{1}}"
            },
            {
              "name": "body",
              "value": "Tenes que elegir unicamente de cada menu que te comparto, no puepasar asi el medido."
            },
            {
              "name": "to",
              "value": "={{ $('camposiniciales').first().json.telefonoCliente }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4620,
        1580
      ],
      "id": "a76ca9a9-b904-467a-9bae-aab8ecdd58a0",
      "name": "Texto1"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "agente_pocho:5492254423359"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3260,
        1540
      ],
      "id": "73495256-1d7f-4a44-ab13-9cc5e15fd374",
      "name": "Redis1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://chat.rshtech.com.py/api/v1/accounts/3/conversations/{{ $('camposiniciales').first().json.conversation_id }}/messages",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $('Loop Over Items1').item.json.msg }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Api-Access-Token",
              "value": "PWT8Rjk9ZGEqVzGoWYmaofFj"
            }
          ]
        },
        "options": {}
      },
      "id": "eeef41a2-1cc3-4957-9aab-fd518c66e75d",
      "name": "Respuesta a ChatWoot2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3740,
        1820
      ],
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d04d69d-cb9c-41be-a44a-95fac3c059f3",
              "name": "text",
              "value": "={{ ($json.output[0]?.text || $json.output?.text || '').replace(/\\*\\*(.*?)\\*\\*/g, '*$1*').replace(/###\\s+/g, '').replace(/:/g, '') }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "3fad4546-a3a4-418e-9e83-ca6b219648e6",
      "name": "replace",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4360,
        1600
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b9fb5194-be39-4e20-ba79-a431f7556d9b",
      "name": "Loop Over Items1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        4000,
        1840
      ],
      "disabled": true
    },
    {
      "parameters": {
        "amount": "=1"
      },
      "id": "cb53fd3c-9fb6-49a9-890c-8c4db82fae7e",
      "name": "1,2s",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4280,
        1840
      ],
      "webhookId": "8a810ad6-4ecf-4781-aed8-7f2b295770dc",
      "disabled": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "text",
        "options": {
          "destinationFieldName": "msg"
        }
      },
      "id": "eafebd53-0585-4fc3-9148-949bf340a5d4",
      "name": "Segmentos",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3980,
        1600
      ],
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1060,
        200
      ],
      "typeVersion": 1,
      "id": "e3f0bc53-a8ac-45b7-9016-893906380c27",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "command": "echo \"test\"\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1280,
        200
      ],
      "id": "c6588cf9-422d-40ff-8853-3857545d7022",
      "name": "Execute Command"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.innovasoftpro.dev",
            "content-length": "320",
            "accept": "application/json",
            "content-type": "application/json",
            "x-forwarded-for": "65.21.161.42",
            "x-forwarded-host": "n8n.innovasoftpro.dev",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "575dad520f0e",
            "x-real-ip": "65.21.161.42",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "messages": [
              {
                "id": "5Rzs_PN5LazY1eGqiQwgdA-gHkE_sPiXgo",
                "from_me": false,
                "type": "text",
                "chat_id": "5492254596618@s.whatsapp.net",
                "timestamp": 1750591619,
                "source": "mobile",
                "text": {
                  "body": "Si"
                },
                "from": "5492254596618",
                "from_name": "Automátizaciones AI"
              }
            ],
            "event": {
              "type": "messages",
              "event": "post"
            },
            "channel_id": "GROOTT-ZSFJB"
          },
          "webhookUrl": "https://n8n.innovasoftpro.dev/webhook/lodepocho",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-01T21:40:31.642Z",
  "versionId": "62f4a08b-3c3b-4a6c-bc0d-1e6325125c31"
}