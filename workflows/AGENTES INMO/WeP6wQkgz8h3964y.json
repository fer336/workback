{
  "active": false,
  "connections": {
    "Calendario": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener eventos": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Obtener eventos",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response null Codigo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getForCode": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Datos de la propiedad",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Success1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcula fecha": {
      "main": [
        [
          {
            "node": "Propietario azul",
            "type": "main",
            "index": 0
          },
          {
            "node": "Agente inmobiliario rojo",
            "type": "main",
            "index": 0
          },
          {
            "node": "Cliente violeta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "getForCode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "verificador": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limpia fecha": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "verificador",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        [
          {
            "node": "Calcular Recordatorios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "NocoDB2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NocoDB3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Datos de la propiedad": {
      "main": [
        [
          {
            "node": "Calcula fecha",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cliente violeta": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Propietario azul": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Agente inmobiliario rojo": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB1": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Limpia fecha",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcular Recordatorios": {
      "main": [
        [
          {
            "node": "NocoDB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB2": {
      "main": [
        [
          {
            "node": "NocoDB4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB3": {
      "main": [
        [
          {
            "node": "Insert event id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB4": {
      "main": [
        [
          {
            "node": "actualizar evento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-19T13:21:24.791Z",
  "id": "WeP6wQkgz8h3964y",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "AGENTE INMO - Agendar_cita",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "numero_cliente",
              "type": "any"
            },
            {
              "name": "Fecha_cita",
              "type": "any"
            },
            {
              "name": "Nombre"
            },
            {
              "name": "Evento"
            },
            {
              "name": "correo_electronico",
              "type": "any"
            },
            {
              "name": "nombre_inmobiliaria"
            },
            {
              "name": "idMensaje"
            },
            {
              "name": "Id_cliente_db"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -3020,
        -560
      ],
      "id": "f8832bdf-6990-44c3-892a-4fe2812aaeef",
      "name": "Calendario"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Codigo_propiedad",
        "key": "=propiedades_historial_analisis",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2800,
        -560
      ],
      "id": "a0b60582-4a37-4771-a774-f79b4a0ece4c",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "004dfd8dfad8cab59884aa5afbe99b4943ba96c971d4eb480405c7595b8160b1@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Francisco"
        },
        "returnAll": true,
        "timeMax": "={{ $now.plus({ week: 2 }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -2140,
        -660
      ],
      "id": "6577b176-2582-4c7d-beff-b5bd7b14e523",
      "name": "Obtener eventos",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "248CSUaxOr8MEWUN",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c358838a-4034-4100-a5cd-e89f533161b0",
              "leftValue": "={{ $json.ultimoCodigo }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2360,
        -560
      ],
      "id": "d4113959-30d1-4acd-a3b1-0852ab674e1a",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ef619c87-8996-4278-805f-187d5e1e672a",
              "name": "response",
              "value": "Codigo propiedad vacio",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2140,
        -400
      ],
      "id": "c7a1b1f3-6e09-4f5a-8cf0-0b0cd2b3eb31",
      "name": "Response null Codigo"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el código de propiedad que queremos buscar\nconst codigoPropiedad = $('Code').first().json.ultimoCodigo;\n\n// Procesar todos los eventos de entrada\nconst events = $input.all();\n\n// Para debugging\nconsole.log(\"Número total de eventos a procesar:\", events.length);\nconsole.log(\"Código de propiedad a buscar:\", codigoPropiedad);\n\n// Arrays para almacenar los eventos filtrados\nconst eventosVerdes = [];\nconst eventosRojos = [];\n\n// Mapa para almacenar las relaciones entre ubicaciones y códigos\n// Esto nos ayudará a relacionar eventos rojos con códigos de propiedad\nconst relacionUbicacionCodigo = new Map();\n\n// PASO 1: Escanear eventos verdes para recopilar relaciones ubicación->código\nconsole.log(\"\\n=== FASE 1: ESCANEO DE UBICACIONES Y CÓDIGOS ===\");\nevents.forEach(item => {\n  const event = item.json;\n  \n  // Ignorar objetos que son solo timezone\n  if (event.start === \"America/Argentina/Buenos_Aires\" && \n      event.end === \"America/Argentina/Buenos_Aires\") {\n    return;\n  }\n  \n  // Detectar eventos verdes con \"Codigo:XXX\"\n  if ((event.colorId === \"10\" || event.colorId === 10) && \n      event.summary && \n      event.summary.includes(\"Codigo:\") && \n      event.location) {\n    \n    // Extraer el código de la propiedad\n    const codigoMatch = event.summary.match(/Codigo:([A-Za-z0-9-_]+)/i);\n    if (codigoMatch) {\n      const codigo = codigoMatch[1];\n      // Guardar la relación ubicación -> código\n      relacionUbicacionCodigo.set(event.location, codigo);\n      console.log(`Ubicación ${event.location} asociada con código ${codigo}`);\n    }\n  }\n});\n\n// PASO 2: Procesar todos los eventos\nconsole.log(\"\\n=== FASE 2: PROCESAMIENTO DE EVENTOS ===\");\nevents.forEach(item => {\n  const event = item.json;\n  \n  // Ignorar objetos que son solo timezone\n  if (event.start === \"America/Argentina/Buenos_Aires\" && \n      event.end === \"America/Argentina/Buenos_Aires\") {\n    return;\n  }\n  \n  // CASO 1: Eventos verdes (colorId=2)\n  if (event.colorId === \"10\" || event.colorId === 10) {\n    // Extraer código directamente del summary\n    let codigoEvento = null;\n    const codigoMatch = event.summary && event.summary.match(/Codigo:([A-Za-z0-9-_]+)/i);\n    \n    if (codigoMatch) {\n      codigoEvento = codigoMatch[1];\n    }\n    \n    // Verificar si el código coincide con el buscado\n    if (codigoEvento === codigoPropiedad) {\n      console.log(`Evento VERDE con código coincidente: ${event.summary}`);\n      eventosVerdes.push({\n        ...event,\n        tipo: \"verde\"\n      });\n    }\n  }\n  // CASO 2: Eventos rojos (colorId=11)\n  else if (event.colorId === \"11\" || event.colorId === 11) {\n    // Para eventos rojos, verificar:\n    // 1. Si tiene un formato \"Direccion: XXX\" y la ubicación coincide con un código conocido\n    // 2. O si contiene directamente el código de propiedad\n    \n    let coincideRojo = false;\n    \n    // Verificar si su ubicación está asociada con el código buscado\n    if (event.location && relacionUbicacionCodigo.has(event.location)) {\n      const codigoAsociado = relacionUbicacionCodigo.get(event.location);\n      if (codigoAsociado === codigoPropiedad) {\n        coincideRojo = true;\n        console.log(`Evento ROJO coincide por ubicación ${event.location}`);\n      }\n    }\n    \n    // También verificar si el summary contiene el código directamente\n    if (event.summary && event.summary.includes(codigoPropiedad)) {\n      coincideRojo = true;\n      console.log(`Evento ROJO coincide por mención directa del código`);\n    }\n    \n    if (coincideRojo) {\n      eventosRojos.push({\n        ...event,\n        tipo: \"rojo\"\n      });\n    }\n  }\n});\n\n// Si no encontramos eventos, hacer una segunda pasada más flexible\nif (eventosVerdes.length === 0 && eventosRojos.length === 0) {\n  console.log(\"\\n=== NO SE ENCONTRARON EVENTOS EXACTOS, BUSCANDO POR UBICACIÓN ===\");\n  \n  // Si hay eventos rojos pero no se relacionaron correctamente,\n  // intentar buscar por coincidencia exacta de ubicación\n  const eventosVerdesBuscados = events.filter(item => {\n    const event = item.json;\n    return (event.colorId === \"10\" || event.colorId === 10) && \n           event.summary && \n           event.summary.includes(`Codigo:${codigoPropiedad}`);\n  }).map(item => item.json);\n  \n  // Si encontramos eventos verdes con el código buscado...\n  if (eventosVerdesBuscados.length > 0) {\n    console.log(`Encontrados ${eventosVerdesBuscados.length} eventos verdes con el código buscado`);\n    \n    // Extraer las ubicaciones de estos eventos verdes\n    const ubicacionesBuscadas = eventosVerdesBuscados\n      .filter(event => event.location)\n      .map(event => event.location);\n    \n    console.log(\"Ubicaciones asociadas al código:\", ubicacionesBuscadas);\n    \n    // Buscar eventos rojos con estas ubicaciones\n    events.forEach(item => {\n      const event = item.json;\n      \n      // Verificar si es un evento rojo con ubicación coincidente\n      if ((event.colorId === \"11\" || event.colorId === 11) && \n          event.location && \n          ubicacionesBuscadas.includes(event.location)) {\n        \n        console.log(`Evento ROJO coincide por ubicación (segunda pasada): ${event.summary}`);\n        eventosRojos.push({\n          ...event,\n          tipo: \"rojo\"\n        });\n      }\n    });\n    \n    // Añadir los eventos verdes encontrados\n    eventosVerdesBuscados.forEach(event => {\n      eventosVerdes.push({\n        ...event,\n        tipo: \"verde\"\n      });\n    });\n  }\n}\n\n// Si todavía no encontramos eventos, mostrar todos los eventos coloreados\nif (eventosVerdes.length === 0 && eventosRojos.length === 0) {\n  console.log(\"\\n=== ÚLTIMO RECURSO: DEVOLVIENDO TODOS LOS EVENTOS COLOREADOS ===\");\n  \n  // Capturar todos los eventos verdes (colorId=10)\n  events.forEach(item => {\n    const event = item.json;\n    \n    // Ignorar objetos timezone\n    if (event.start === \"America/Argentina/Buenos_Aires\" && \n        event.end === \"America/Argentina/Buenos_Aires\") {\n      return;\n    }\n    \n    if (event.colorId === \"10\" || event.colorId === 10) {\n      eventosVerdes.push({\n        ...event,\n        tipo: \"verde\"\n      });\n    }\n    else if (event.colorId === \"11\" || event.colorId === 11) {\n      eventosRojos.push({\n        ...event,\n        tipo: \"rojo\"\n      });\n    }\n  });\n}\n\n// Registrar el resultado final\nconsole.log(`\\nResultado final: ${eventosVerdes.length} eventos verdes y ${eventosRojos.length} eventos rojos para el código ${codigoPropiedad}`);\n\n// Devolver eventos encontrados\nreturn [{\n  json: {\n    codigo: codigoPropiedad,\n    eventosVerdes: eventosVerdes,\n    eventosRojos: eventosRojos,\n    totalEventos: eventosVerdes.length + eventosRojos.length\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1700,
        -660
      ],
      "id": "e062fcaa-7da7-4c9a-a720-cdad728bf552",
      "name": "getForCode"
    },
    {
      "parameters": {
        "jsCode": "// Código para obtener el último código de propiedad\n// Obtenemos todos los ítems de Redis\nconst redisItems =$input.first().json.Codigo_propiedad ;\n\n// Verificamos si existe la propiedad y es un array\nif (!Array.isArray(redisItems)) {\n  console.log(\"Error: No se encontró un array de códigos de propiedad\");\n  return $input.all();\n}\n\n// Obtenemos el último elemento del array\nconst ultimoCodigo = redisItems[redisItems.length - 1];\nconsole.log(\"Último código de propiedad:\", ultimoCodigo);\n\n// Añadimos el último código a todos los ítems de entrada\nconst items = $input.all();\nfor (const item of items) {\n  item.json.ultimoCodigo = ultimoCodigo;\n}\n\n// Devolvemos los ítems con el nuevo campo\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2580,
        -560
      ],
      "id": "2310ca3c-9fba-4713-80a9-ce66c1e5bad9",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b6f87eba-894b-45bd-a4a1-9e1c8e34aba6",
              "leftValue": "={{ $json.disponible }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1040,
        -660
      ],
      "id": "56ee1482-9d3d-4b7f-94f9-88c935b68166",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// 1. Obtener los datos\nconst datosCalendario = $('Calendario').first().json;\n\n// Obtener datos de la propiedad (Google Sheets)\nconst datosPropiedad = $('Datos de la propiedad').first().json;\n\n// Verificar que existen los datos necesarios en getForCode\nlet eventosVerdes = null;\ntry {\n  // Intentar obtener el primer evento verde\n  const getForCodeResult = $('getForCode').first().json;\n  if (getForCodeResult && getForCodeResult.eventosVerdes && getForCodeResult.eventosVerdes.length > 0) {\n    eventosVerdes = getForCodeResult.eventosVerdes[0];\n  } else {\n    console.log(\"No se encontraron eventos verdes\");\n  }\n} catch (error) {\n  console.log(\"Error al obtener eventos verdes:\", error);\n}\n\n// 2. Extraer variables con valores predeterminados para evitar errores\nconst nombreCliente = datosCalendario?.Nombre || \"\";\nconst telefono = datosCalendario?.numero_cliente || \"\";\nconst nombreInmobiliaria = datosCalendario?.nombre_inmobiliaria || \"\";\nconst tipoPropiedad = datosCalendario?.Tipo || \"\";\n\n// Usar valores predeterminados si eventosVerdes es null o sus propiedades no existen\nconst ubicacion = eventosVerdes?.location || \"Dirección no especificada\";\nconst idInput = eventosVerdes?.id || \"\";\nconst idEvento = eventosVerdes?.id || \"\";\nconst summary = eventosVerdes?.summary || \"\";\n\n// 3. Obtener tiempo dinámico desde Google Sheets\n// Convertir el valor de tiempo a minutos\nlet tiempoVisitaMinutos = 30; // Valor por defecto\n\nif (datosPropiedad?.Tiempo) {\n  const tiempoTexto = datosPropiedad.Tiempo.toString().toLowerCase();\n  \n  // Extraer número del texto (ej: \"1hs\" -> 1, \"30mins\" -> 30)\n  const numeroMatch = tiempoTexto.match(/\\d+/);\n  \n  if (numeroMatch) {\n    const numero = parseInt(numeroMatch[0]);\n    \n    // Determinar si son horas o minutos\n    if (tiempoTexto.includes('h') || tiempoTexto.includes('hora')) {\n      tiempoVisitaMinutos = numero * 60; // Convertir horas a minutos\n    } else if (tiempoTexto.includes('min')) {\n      tiempoVisitaMinutos = numero;\n    } else {\n      // Si no especifica unidad, asumir que son minutos\n      tiempoVisitaMinutos = numero;\n    }\n  }\n}\n\nconsole.log(`Tiempo de visita configurado: ${tiempoVisitaMinutos} minutos`);\n\n// 4. CORRECCIÓN: Verificar ambas versiones de la fecha\n// Buscar fecha_cita o Fecha_cita (con mayúscula)\nconst fechaCitaOriginal = datosCalendario?.fecha_cita || datosCalendario?.Fecha_cita;\n\nif (!fechaCitaOriginal) {\n  console.log(\"Datos disponibles en calendario:\", Object.keys(datosCalendario || {}));\n  return [{\n    json: {\n      error: \"No se proporcionó una fecha de cita válida\",\n      datosDisponibles: Object.keys(datosCalendario || {}),\n      fechaEncontrada: fechaCitaOriginal\n    }\n  }];\n}\n\nconsole.log(\"Fecha original recibida:\", fechaCitaOriginal);\n\n// 5. MEJORA: Manejo más robusto del parseo de fecha\nlet fechaInicio;\n\ntry {\n  // Si viene en formato ISO completo\n  if (fechaCitaOriginal.includes('T') && fechaCitaOriginal.includes('-')) {\n    // Parseo mejorado para manejar diferentes formatos\n    const [fechaParte, horaParteCompleta] = fechaCitaOriginal.split('T');\n    \n    // Obtener solo la parte de hora sin zona horaria\n    let horaParte;\n    if (horaParteCompleta.includes('-')) {\n      horaParte = horaParteCompleta.split('-')[0];\n    } else if (horaParteCompleta.includes('+')) {\n      horaParte = horaParteCompleta.split('+')[0];\n    } else {\n      horaParte = horaParteCompleta;\n    }\n    \n    // Crear la fecha base\n    const [anio, mes, dia] = fechaParte.split('-').map(Number);\n    const [hora, minutos, segundos = 0] = horaParte.split(':').map(Number);\n    \n    fechaInicio = new Date(anio, mes - 1, dia, hora, minutos, segundos || 0);\n  } \n  // Si viene en otro formato, intentar parseo directo\n  else {\n    fechaInicio = new Date(fechaCitaOriginal);\n  }\n  \n  // Verificar que la fecha es válida\n  if (isNaN(fechaInicio.getTime())) {\n    throw new Error(\"Fecha inválida después del parseo\");\n  }\n  \n} catch (error) {\n  console.log(\"Error al parsear fecha:\", error);\n  return [{\n    json: {\n      error: \"Error al procesar la fecha proporcionada\",\n      fechaOriginal: fechaCitaOriginal,\n      errorDetalle: error.message\n    }\n  }];\n}\n\nconsole.log(\"Fecha de inicio parseada:\", fechaInicio);\n\n// 6. Sumar el tiempo dinámico de la visita\nconst fechaFin = new Date(fechaInicio.getTime() + tiempoVisitaMinutos * 60000);\n\nconsole.log(\"Fecha de fin calculada:\", fechaFin);\n\n// 7. Formatear fecha mejorado\nconst formatDate = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const hour = String(date.getHours()).padStart(2, '0');\n  const minute = String(date.getMinutes()).padStart(2, '0');\n  const second = String(date.getSeconds()).padStart(2, '0');\n  \n  return `${year}-${month}-${day}T${hour}:${minute}:${second}.000-03:00`;\n};\n\nconst fechaInicioFormateada = formatDate(fechaInicio);\nconst fechaFinFormateada = formatDate(fechaFin);\n\nconsole.log(\"Fecha inicio formateada:\", fechaInicioFormateada);\nconsole.log(\"Fecha fin formateada:\", fechaFinFormateada);\n\n// 8. Crear el objeto de salida\nreturn [{\n  json: {\n    idInput,\n    idEvento,\n    colorId: \"10\",\n    summary: `Dirección: ${ubicacion} - Interesado: ${nombreCliente}${nombreInmobiliaria ? ' - ' + nombreInmobiliaria : ''}`,\n    description: ubicacion,\n    tipoPropiedad,\n    nombreCliente,\n    telefono,\n    nombreInmobiliaria,\n    fechaInicio: fechaInicioFormateada,\n    fechaFin: fechaFinFormateada,\n    tiempoVisita: `${tiempoVisitaMinutos} minutos`,\n    // Debug info\n    fechaOriginalRecibida: fechaCitaOriginal,\n    fechaInicioCalculada: fechaInicio.toString(),\n    fechaFinCalculada: fechaFin.toString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -600,
        -760
      ],
      "id": "0f599010-4717-4fab-8541-1ce9b78e01d5",
      "name": "Calcula fecha"
    },
    {
      "parameters": {
        "fieldToSplitOut": "summary, start, end, location, colorId, id, description",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1920,
        -660
      ],
      "id": "ca3ccbdf-786c-46a5-985d-b90613b81e5f",
      "name": "Split Out2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "=ya existe una fecha",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "033ce52a-e02a-4571-88ee-75530c3adc8c",
      "name": "Success1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -820,
        -300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtener TODOS los eventos rojos y la fecha que está intentando reservar\nlet eventosRojosData = $input.first().json.eventosRojos;\nconst fechaCitaUsuario = $('Calendario').first().json.Fecha_cita\n\nconsole.log(\"=== VERIFICADOR DE DISPONIBILIDAD ===\");\nconsole.log(\"Fecha solicitada por el usuario:\", fechaCitaUsuario);\nconsole.log(\"Eventos rojos recibidos:\", JSON.stringify(eventosRojosData, null, 2));\n\n// Validar que tenemos datos\nif (!eventosRojosData) {\n    console.log(\"❌ No hay eventos rojos para verificar\");\n    return [{\n        json: {\n            disponible: true,\n            mensaje: \"✅ Horario disponible (no hay eventos para verificar).\",\n            debug: { razon: \"eventosRojosData está vacío o undefined\" }\n        }\n    }];\n}\n\nif (!fechaCitaUsuario) {\n    console.log(\"❌ No se proporcionó fecha de cita\");\n    return [{\n        json: {\n            disponible: false,\n            mensaje: \"🚫 Error: No se proporcionó fecha de cita.\",\n            debug: { razon: \"fechaCitaUsuario está vacío o undefined\" }\n        }\n    }];\n}\n\n// Parsear la fecha de la cita del usuario (formato: 2025-05-30T12:00:00-03:00)\nconst fechaCitaDate = new Date(fechaCitaUsuario);\nif (isNaN(fechaCitaDate.getTime())) {\n    console.log(\"❌ Fecha de cita inválida:\", fechaCitaUsuario);\n    return [{\n        json: {\n            disponible: false,\n            mensaje: \"🚫 Error: Fecha de cita inválida.\",\n            debug: { razon: \"No se pudo parsear fechaCitaUsuario\", fechaOriginal: fechaCitaUsuario }\n        }\n    }];\n}\n\nconsole.log(\"Fecha de cita original:\", fechaCitaUsuario);\nconsole.log(\"Fecha de cita parseada a UTC:\", fechaCitaDate.toISOString());\nconsole.log(\"Fecha de cita en timestamp:\", fechaCitaDate.getTime());\n\n// Normalizar los eventos a un array\nlet todosLosEventos = [];\nif (Array.isArray(eventosRojosData)) {\n    todosLosEventos = eventosRojosData;\n} else if (eventosRojosData && typeof eventosRojosData === 'object') {\n    todosLosEventos = [eventosRojosData];\n}\n\nconsole.log(`\\nTotal de eventos a analizar: ${todosLosEventos.length}`);\n\n// Variables para el análisis\nlet conflictoEncontrado = false;\nlet eventosAnalizados = 0;\nlet eventosRojosEncontrados = 0;\nlet eventosConConflicto = [];\nlet todosLosDetalles = [];\n\n// Analizar CADA evento\ntodosLosEventos.forEach((evento, index) => {\n    eventosAnalizados++;\n    \n    console.log(`\\n--- EVENTO ${index + 1} ---`);\n    \n    // Guardar detalles del evento para debug\n    const detalleEvento = {\n        index: index + 1,\n        colorId: evento.colorId,\n        tipo: evento.tipo,\n        summary: evento.summary || \"Sin título\",\n        start: evento.start,\n        end: evento.end,\n        esEventoRojo: false,\n        tieneConflictoTiempo: false,\n        razonDescarte: null\n    };\n    \n    // Verificar si es un evento rojo (sin filtrar por color aún)\n    const tipo = evento.tipo;\n    const esRojo = tipo === \"rojo\" || tipo === \"Rojo\" || String(tipo).toLowerCase() === \"rojo\";\n    \n    console.log(`Tipo del evento: \"${tipo}\" -> ¿Es rojo? ${esRojo}`);\n    \n    if (!esRojo) {\n        detalleEvento.razonDescarte = `Tipo \"${tipo}\" no es \"rojo\"`;\n        console.log(`❌ Descartado: ${detalleEvento.razonDescarte}`);\n        todosLosDetalles.push(detalleEvento);\n        return; // Siguiente evento\n    }\n    \n    // Es un evento rojo\n    eventosRojosEncontrados++;\n    detalleEvento.esEventoRojo = true;\n    \n    console.log(\"✅ Es un evento ROJO, verificando horarios...\");\n    console.log(\"Detalles del evento:\", JSON.stringify(evento, null, 2));\n    \n    // Obtener fechas del evento\n    let fechaEventoInicio, fechaEventoFin;\n    \n    // Intentar múltiples formatos de fecha\n    if (evento.start && evento.start.dateTime) {\n        fechaEventoInicio = new Date(evento.start.dateTime);\n        console.log(\"Fecha inicio desde start.dateTime:\", evento.start.dateTime);\n    } else if (evento.start && typeof evento.start === 'string') {\n        fechaEventoInicio = new Date(evento.start);\n        console.log(\"Fecha inicio desde start (string):\", evento.start);\n    } else if (evento.start && evento.start.date) {\n        fechaEventoInicio = new Date(evento.start.date);\n        console.log(\"Fecha inicio desde start.date:\", evento.start.date);\n    }\n    \n    if (evento.end && evento.end.dateTime) {\n        fechaEventoFin = new Date(evento.end.dateTime);\n        console.log(\"Fecha fin desde end.dateTime:\", evento.end.dateTime);\n    } else if (evento.end && typeof evento.end === 'string') {\n        fechaEventoFin = new Date(evento.end);\n        console.log(\"Fecha fin desde end (string):\", evento.end);\n    } else if (evento.end && evento.end.date) {\n        fechaEventoFin = new Date(evento.end.date);\n        console.log(\"Fecha fin desde end.date:\", evento.end.date);\n    }\n    \n    // Validar que se pudieron obtener las fechas\n    if (!fechaEventoInicio || isNaN(fechaEventoInicio.getTime())) {\n        detalleEvento.razonDescarte = \"No se pudo parsear fecha de inicio\";\n        console.log(`❌ ${detalleEvento.razonDescarte}`);\n        todosLosDetalles.push(detalleEvento);\n        return;\n    }\n    \n    if (!fechaEventoFin || isNaN(fechaEventoFin.getTime())) {\n        detalleEvento.razonDescarte = \"No se pudo parsear fecha de fin\";\n        console.log(`❌ ${detalleEvento.razonDescarte}`);\n        todosLosDetalles.push(detalleEvento);\n        return;\n    }\n    \n    // Guardar fechas parseadas en el detalle\n    detalleEvento.fechaInicioParsed = fechaEventoInicio.toISOString();\n    detalleEvento.fechaFinParsed = fechaEventoFin.toISOString();\n    \n    console.log(`Evento inicia: ${fechaEventoInicio.toISOString()} (timestamp: ${fechaEventoInicio.getTime()})`);\n    console.log(`Evento termina: ${fechaEventoFin.toISOString()} (timestamp: ${fechaEventoFin.getTime()})`);\n    console.log(`Cita solicitada: ${fechaCitaDate.toISOString()} (timestamp: ${fechaCitaDate.getTime()})`);\n    \n    // Verificar superposición de tiempo con comparación de timestamps para mayor precisión\n    // La cita conflicta si:\n    // 1. La cita está dentro del rango del evento existente\n    // 2. La cita empieza exactamente cuando empieza el evento\n    \n    const timestampCita = fechaCitaDate.getTime();\n    const timestampEventoInicio = fechaEventoInicio.getTime();\n    const timestampEventoFin = fechaEventoFin.getTime();\n    \n    const citaDentroDelEvento = timestampCita >= timestampEventoInicio && timestampCita < timestampEventoFin;\n    const citaEsMismaHoraInicio = timestampCita === timestampEventoInicio;\n    \n    console.log(`¿Cita dentro del evento? ${citaDentroDelEvento} (${timestampCita} >= ${timestampEventoInicio} && ${timestampCita} < ${timestampEventoFin})`);\n    console.log(`¿Cita es misma hora de inicio? ${citaEsMismaHoraInicio} (${timestampCita} === ${timestampEventoInicio})`);\n    \n    const hayConflicto = citaDentroDelEvento || citaEsMismaHoraInicio;\n    detalleEvento.tieneConflictoTiempo = hayConflicto;\n    \n    if (hayConflicto) {\n        console.log(\"🚨 ¡CONFLICTO DETECTADO!\");\n        conflictoEncontrado = true;\n        eventosConConflicto.push({\n            evento: index + 1,\n            summary: evento.summary || \"Sin título\",\n            tipo: evento.tipo,\n            colorId: evento.colorId,\n            inicioEvento: fechaEventoInicio.toISOString(),\n            finEvento: fechaEventoFin.toISOString(),\n            citaSolicitada: fechaCitaDate.toISOString()\n        });\n    } else {\n        console.log(\"✅ No hay conflicto de tiempo\");\n    }\n    \n    todosLosDetalles.push(detalleEvento);\n});\n\n// Resultado final\nconst disponible = !conflictoEncontrado;\n\nconsole.log(\"\\n=== RESUMEN FINAL ===\");\nconsole.log(`Eventos analizados: ${eventosAnalizados}`);\nconsole.log(`Eventos rojos encontrados: ${eventosRojosEncontrados}`);\nconsole.log(`Conflictos detectados: ${eventosConConflicto.length}`);\nconsole.log(`Resultado: ${disponible ? \"DISPONIBLE\" : \"NO DISPONIBLE\"}`);\n\nif (eventosConConflicto.length > 0) {\n    console.log(\"Detalles de conflictos:\");\n    eventosConConflicto.forEach(conflicto => {\n        console.log(`- Evento \"${conflicto.summary}\" del ${conflicto.inicioEvento} al ${conflicto.finEvento}`);\n    });\n}\n\nreturn [{\n    json: {\n        disponible: disponible,\n        mensaje: disponible \n            ? \"✅ Horario disponible, se puede agendar.\"\n            : `🚫 El horario ya está ocupado por ${eventosConConflicto.length} evento(s). Elegí otra fecha.`,\n        debug: {\n            fechaCitaSolicitada: fechaCitaDate.toISOString(),\n            totalEventosAnalizados: eventosAnalizados,\n            eventosRojosEncontrados: eventosRojosEncontrados,\n            conflictosDetectados: eventosConConflicto.length,\n            detallesConflictos: eventosConConflicto,\n            todosLosEventosAnalizados: todosLosDetalles\n        }\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1260,
        -660
      ],
      "id": "daec7129-5083-4ba2-b889-5c6e2f068533",
      "name": "verificador"
    },
    {
      "parameters": {
        "sendTo": "={{ $('Calendario').first().json.correo_electronico }}",
        "subject": "=Visita a la propiedad: {{ $json.direccion }}",
        "message": "=<!DOCTYPE html>\n<html lang=\"es\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Confirmación de Visita Agendada</title>\n<style>\n    /* Estilos generales para el cuerpo del correo */\n    body {\n        margin: 0;\n        padding: 0;\n        font-family: Arial, sans-serif;\n        background-color: #f4f4f4;\n    }\n    /* Contenedor principal */\n    .email-container {\n        max-width: 600px;\n        margin: 20px auto;\n        background-color: #ffffff;\n        border: 1px solid #dddddd;\n        overflow: hidden; /* Para contener bordes redondeados si se añaden */\n    }\n    /* Cabecera */\n    .header {\n        background-color: #0056b3; /* Azul corporativo, puedes cambiarlo */\n        color: #ffffff;\n        padding: 20px;\n        text-align: center;\n    }\n    .header h1 {\n        margin: 0;\n        font-size: 24px;\n    }\n    /* Contenido principal */\n    .content {\n        padding: 30px;\n        font-size: 16px;\n        line-height: 1.6;\n        color: #333333;\n    }\n    .content p {\n        margin-bottom: 20px;\n    }\n    /* Tabla de detalles */\n    .details-table {\n        width: 100%;\n        border-collapse: collapse; /* Une los bordes de las celdas */\n        margin-bottom: 20px;\n    }\n    .details-table th, .details-table td {\n        border: 1px solid #dddddd;\n        padding: 12px;\n        text-align: left;\n        font-size: 14px;\n    }\n    .details-table th {\n        background-color: #f8f8f8; /* Fondo claro para las cabeceras */\n        width: 120px; /* Ancho fijo para etiquetas */\n        font-weight: bold;\n        color: #555555;\n    }\n    .details-table td {\n        color: #555555;\n    }\n    /* Información del agente */\n    .agent-info {\n        margin-top: 20px;\n        padding: 15px;\n        background-color: #eef7ff; /* Fondo sutil para destacar */\n        border-left: 4px solid #0056b3; /* Línea decorativa */\n    }\n    .agent-info strong {\n        color: #333333;\n    }\n    /* Pie de página */\n    .footer {\n        background-color: #f4f4f4;\n        color: #888888;\n        text-align: center;\n        padding: 20px;\n        font-size: 12px;\n    }\n    .footer a {\n        color: #0056b3;\n        text-decoration: none;\n    }\n</style>\n</head>\n<body>\n    <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#f4f4f4\">\n        <tr>\n            <td align=\"center\">\n                <table class=\"email-container\" width=\"600\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 600px; margin: 20px auto; background-color: #ffffff; border: 1px solid #dddddd;\">\n                    <tr>\n                        <td class=\"header\" style=\"background-color: #0056b3; color: #ffffff; padding: 20px; text-align: center;\">\n                            <h1 style=\"margin: 0; font-size: 24px; font-family: Arial, sans-serif;\">Confirmación de Visita</h1>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td class=\"content\" style=\"padding: 30px; font-size: 16px; line-height: 1.6; color: #333333; font-family: Arial, sans-serif;\">\n                            <p>Hola <strong>{{ $('Calendario').first().json.Nombre }}</strong>,</p>\n                            <p>¡Buenas noticias! Confirmamos que tu visita a la propiedad ha sido agendada con éxito. A continuación, encontrarás todos los detalles:</p>\n\n                            <table class=\"details-table\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse: collapse; margin-bottom: 20px; width: 100%;\">\n                                <tr>\n                                    <th style=\"border: 1px solid #dddddd; padding: 12px; text-align: left; font-size: 14px; background-color: #f8f8f8; width: 120px; font-weight: bold; color: #555555; font-family: Arial, sans-serif;\">Fecha:</th>\n                                    <td style=\"border: 1px solid #dddddd; padding: 12px; text-align: left; font-size: 14px; color: #555555; font-family: Arial, sans-serif;\">{{ $json.dia_semana }} {{ $json.fecha }}</td>\n                                </tr>\n                                <tr>\n                                    <th style=\"border: 1px solid #dddddd; padding: 12px; text-align: left; font-size: 14px; background-color: #f8f8f8; width: 120px; font-weight: bold; color: #555555; font-family: Arial, sans-serif;\">Hora:</th>\n                                    <td style=\"border: 1px solid #dddddd; padding: 12px; text-align: left; font-size: 14px; color: #555555; font-family: Arial, sans-serif;\">{{ $json.hora }}</td>\n                                </tr>\n                                <tr>\n                                    <th style=\"border: 1px solid #dddddd; padding: 12px; text-align: left; font-size: 14px; background-color: #f8f8f8; width: 120px; font-weight: bold; color: #555555; font-family: Arial, sans-serif; vertical-align: top;\">Dirección:</th>\n                                    <td style=\"border: 1px solid #dddddd; padding: 12px; text-align: left; font-size: 14px; color: #555555; font-family: Arial, sans-serif;\">\n                                        {{ $json.direccion }}\n                                        </td>\n                                </tr>\n                            </table>\n\n                            <div class=\"agent-info\" style=\"margin-top: 20px; padding: 15px; background-color: #eef7ff; border-left: 4px solid #0056b3;\">\n                                <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\"><strong>Tu agente asignado para esta visita es:</strong></p>\n                                <p style=\"margin-bottom: 5px; font-family: Arial, sans-serif;\"><strong style=\"color: #333333;\">Nombre:</strong>Francisco</p>\n                                <p style=\"margin-bottom: 5px; font-family: Arial, sans-serif;\"><strong style=\"color: #333333;\">Teléfono:</strong>5491140841598</p>\n                                <p style=\"margin-bottom: 15px; font-family: Arial, sans-serif;\"><strong style=\"color: #333333;\">Email:</strong>francisco@realstateiq.com</p>\n                                <p style=\"margin-bottom: 0; font-family: Arial, sans-serif; font-size: 14px; color: #555555;\">Por favor, no dudes en contactar a Francisco si tienes alguna consulta previa o necesitas realizar algún cambio.</p>\n                            </div>\n\n                            <p style=\"margin-top: 30px;\">Te recomendamos llegar unos minutos antes de la hora programada. ¡Esperamos que la propiedad sea de tu agrado!</p>\n                            <p>Saludos cordiales,<br>El equipo de <strong>RealState IQ</strong></p>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td class=\"footer\" style=\"background-color: #f4f4f4; color: #888888; text-align: center; padding: 20px; font-size: 12px; font-family: Arial, sans-serif;\">\n                            <p style=\"margin: 0;\">[Nombre de tu Inmobiliaria] | [Dirección de la Oficina] | [Teléfono General]</p>\n                            <p style=\"margin: 5px 0 0 0;\">\n                                <a href=\"https://donweb.com/es-int/\" style=\"color: #0056b3; text-decoration: none;\">Visita nuestro sitio web</a>\n                                </p>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</html>",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "8164b6e9-0661-4934-ae03-657b51f316a5",
      "name": "Gmail",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        280,
        -660
      ],
      "webhookId": "f8eebafe-721f-448a-8ae9-4c7d9301d1ba",
      "credentials": {
        "gmailOAuth2": {
          "id": "6zOcYXVP3tGHKFoB",
          "name": "Qeva Solutions"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Verificar qué datos están disponibles\nconsole.log(\"Input completo:\", JSON.stringify($input.first().json, null, 2));\n\n// Obtener datos del Calendario (que sí están disponibles)\nconst fechaCalendario = $('Calendario').first()?.json?.Fecha_cita;\nconst nombreCalendario = $('Calendario').first()?.json?.Nombre;\nconst numeroCliente = $('Calendario').first()?.json?.numero_cliente;\n\nconsole.log(\"Fecha calendario original:\", fechaCalendario);\n\n// Verificar si existe row_id_fecha en alguna parte\nlet fechaOriginalInput = null;\n\n// Intentar diferentes rutas donde podría estar row_id_fecha\ntry {\n  // Opción 1: Directamente en el input\n  fechaOriginalInput = $input.first()?.json?.row_id_fecha;\n  \n  // Opción 2: En msg\n  if (!fechaOriginalInput) {\n    fechaOriginalInput = $input.first()?.json?.msg?.row_id_fecha;\n  }\n  \n  // Opción 3: Buscar en otros nodos conectados\n  if (!fechaOriginalInput && $('If1').first()) {\n    fechaOriginalInput = $('If1').first()?.json?.row_id_fecha;\n  }\n  \n  // Opción 4: Buscar en verificador\n  if (!fechaOriginalInput && $('verificador').first()) {\n    fechaOriginalInput = $('verificador').first()?.json?.row_id_fecha;\n  }\n  \n} catch (error) {\n  console.log(\"Error buscando row_id_fecha:\", error);\n}\n\n// FUNCIÓN CORREGIDA: Limpiar fecha manteniendo zona horaria local\nfunction limpiarFechaInput(fechaString) {\n  if (!fechaString || typeof fechaString !== 'string') {\n    return null;\n  }\n  \n  console.log(\"Procesando fecha string:\", fechaString);\n  \n  // Buscar el patrón de fecha ISO en el string (YYYY-MM-DDTHH:MM)\n  const match = fechaString.match(/(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2})/);\n  \n  if (match) {\n    const fechaISO = match[1];\n    console.log(\"Fecha ISO extraída:\", fechaISO);\n    \n    // CORRECCIÓN: Tratar la fecha como hora local (sin conversión UTC)\n    // Agregar los segundos para completar el formato\n    const fechaCompleta = fechaISO + \":00\";\n    \n    // Crear fecha interpretándola como hora local de Argentina\n    // NO usar new Date() directamente porque convierte a UTC\n    const [fechaParte, horaParte] = fechaISO.split('T');\n    const [año, mes, dia] = fechaParte.split('-').map(Number);\n    const [hora, minutos] = horaParte.split(':').map(Number);\n    \n    // Crear fecha en hora local (Argentina)\n    const fechaLocal = new Date(año, mes - 1, dia, hora, minutos, 0);\n    \n    // Formatear de vuelta a ISO pero manteniendo la hora local\n    const fechaCorregida = fechaLocal.getFullYear() + '-' + \n      String(fechaLocal.getMonth() + 1).padStart(2, '0') + '-' + \n      String(fechaLocal.getDate()).padStart(2, '0') + 'T' + \n      String(fechaLocal.getHours()).padStart(2, '0') + ':' + \n      String(fechaLocal.getMinutes()).padStart(2, '0');\n    \n    console.log(\"Fecha corregida (hora local):\", fechaCorregida);\n    \n    return fechaCorregida;\n  }\n  \n  return null;\n}\n\n// FUNCIÓN ADICIONAL: Procesar fecha del calendario también\nfunction procesarFechaCalendario(fechaCalendario) {\n  if (!fechaCalendario) return null;\n  \n  console.log(\"Procesando fecha calendario:\", fechaCalendario);\n  \n  // Si ya viene en formato correcto, verificar que no tenga offset\n  if (typeof fechaCalendario === 'string' && fechaCalendario.includes('T')) {\n    // Remover cualquier información de zona horaria (Z, +XX:XX, -XX:XX)\n    const fechaSinZona = fechaCalendario.replace(/[Z]|[+-]\\d{2}:\\d{2}$/g, '');\n    console.log(\"Fecha calendario sin zona:\", fechaSinZona);\n    \n    // Extraer solo YYYY-MM-DDTHH:MM\n    const match = fechaSinZona.match(/(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2})/);\n    return match ? match[1] : null;\n  }\n  \n  return fechaCalendario;\n}\n\n// Limpiar las fechas\nconst fechaLimpiaInput = limpiarFechaInput(fechaOriginalInput);\nconst fechaLimpiaCalendario = procesarFechaCalendario(fechaCalendario);\nconst eventoInput = \"cancelar\";\n\n// Log de verificación\nconsole.log(\"=== RESUMEN DE FECHAS ===\");\nconsole.log(\"Fecha original calendario:\", fechaCalendario);\nconsole.log(\"Fecha limpia calendario:\", fechaLimpiaCalendario);\nconsole.log(\"Fecha original input:\", fechaOriginalInput);\nconsole.log(\"Fecha limpia input:\", fechaLimpiaInput);\n\n// Retornar resultado\nreturn [{\n  json: {\n    // Datos del calendario (CORREGIDOS)\n    fecha_calendario: fechaLimpiaCalendario, // Usar la fecha corregida\n    nombre_calendario: nombreCalendario,\n    numero_cliente: numeroCliente,\n    \n    // Datos del input (si existen)\n    fecha_original_input: fechaOriginalInput,\n    fecha_limpia_input: fechaLimpiaInput,\n    evento_input: eventoInput,\n    \n    // Status y debug\n    row_id_fecha_encontrado: !!fechaOriginalInput,\n    \n    // Para debug - mantener originales\n    fecha_calendario_original: fechaCalendario,\n    \n    // Usar la mejor fecha disponible\n    fecha_final: fechaLimpiaInput || fechaLimpiaCalendario\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        60,
        -660
      ],
      "id": "b201e50f-ebc5-4cc3-9416-fc4980ddbb59",
      "name": "Limpia fecha"
    },
    {
      "parameters": {
        "fieldToSplitOut": "eventosVerdes, eventosRojos",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1480,
        -660
      ],
      "id": "d5f03c51-a01e-48a5-ad68-30d679124d68",
      "name": "Split Out",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "04ba47e5-a15b-4db9-a9f7-fdad3dc6013d",
              "leftValue": "={{ $json.Id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        940,
        -660
      ],
      "id": "e481df27-f88c-408a-99a5-47f1d177e2c5",
      "name": "If2"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vxULMw6IdEF03hfs2a-svqJUTEuSWbW5wVUQkk88eU4",
          "mode": "list",
          "cachedResultName": "Cliente:00_urls_francisco",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vxULMw6IdEF03hfs2a-svqJUTEuSWbW5wVUQkk88eU4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Hoja 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vxULMw6IdEF03hfs2a-svqJUTEuSWbW5wVUQkk88eU4/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "CODIGO",
              "lookupValue": "={{ $('Code').first().json.ultimoCodigo }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -820,
        -760
      ],
      "id": "e30607f9-993d-4c67-9650-38b8ea951534",
      "name": "Datos de la propiedad",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "lRj57XPEqOXW9kOd",
          "name": "Qeva Solutions Sheet"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "004dfd8dfad8cab59884aa5afbe99b4943ba96c971d4eb480405c7595b8160b1@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Francisco"
        },
        "start": "={{ $json.fechaInicio }}",
        "end": "={{ $json.fechaFin }}",
        "useDefaultReminders": false,
        "additionalFields": {
          "attendees": [
            "={{ $('Calendario').first().json.correo_electronico }}"
          ],
          "color": "3",
          "description": "=Telefono: https://wa.me/{{ $json.telefono }}\nCodigo propiedad: {{ $('getForCode').first().json.codigo }}",
          "location": "={{ $json.description }}",
          "showMeAs": "opaque",
          "summary": "=Direccion: {{ $json.description }} - Interesado: {{ $json.nombreCliente }} - {{ $json.nombreInmobiliaria }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -380,
        -560
      ],
      "id": "c4691b9b-71ca-49a2-a8f2-7c0e9125fa7e",
      "name": "Cliente violeta",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "248CSUaxOr8MEWUN",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "004dfd8dfad8cab59884aa5afbe99b4943ba96c971d4eb480405c7595b8160b1@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Francisco"
        },
        "start": "={{ $json.fechaInicio }}",
        "end": "={{ $json.fechaFin }}",
        "useDefaultReminders": false,
        "additionalFields": {
          "attendees": [
            "={{ $('Datos de la propiedad').item.json.MailPropietario }}"
          ],
          "color": "=7",
          "description": "=",
          "location": "={{ $json.description }}",
          "showMeAs": "opaque",
          "summary": "=Agente inmobiliario: {{ $('Datos de la propiedad').item.json[\"Agente inmobiliario\"] }}\nInmobiliaria: {{ $('Datos de la propiedad').item.json[\"Nombre inmobiliaria\"] }}\n"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -380,
        -760
      ],
      "id": "a45d84e9-941a-47f7-8459-666b71d21ecb",
      "name": "Propietario azul",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "248CSUaxOr8MEWUN",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "004dfd8dfad8cab59884aa5afbe99b4943ba96c971d4eb480405c7595b8160b1@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Francisco"
        },
        "start": "={{ $json.fechaInicio }}",
        "end": "={{ $json.fechaFin }}",
        "useDefaultReminders": false,
        "additionalFields": {
          "attendees": [
            "={{ $('Datos de la propiedad').item.json.MailAgente }}"
          ],
          "color": "=11",
          "description": "=",
          "location": "={{ $json.description }}",
          "showMeAs": "opaque",
          "summary": "=Interesado:{{ $json.nombreCliente }}\nTeléfono:{{ $('Calendario').first().json.numero_cliente }}\nCódigo:{{ $('getForCode').first().json.codigo }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -380,
        -960
      ],
      "id": "c89b803d-d206-4fef-a638-b39ee576ee59",
      "name": "Agente inmobiliario rojo",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "248CSUaxOr8MEWUN",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "projectId": "p4sjkkdf4pdtyvh",
        "table": "mqjswve4r6jiqxv",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Fecha_cita",
              "fieldValue": "={{ $('Calcular Recordatorios').item.json.fecha_cita }}"
            },
            {
              "fieldName": "Propiedad",
              "fieldValue": "={{ $('Limpia fecha').item.json.direccion }}"
            },
            {
              "fieldName": "recordatorio_24h",
              "fieldValue": "={{ $('Calcular Recordatorios').item.json.recordatorio_24h }}"
            },
            {
              "fieldName": "recordatorio_24h_enviado",
              "fieldValue": "no enviado"
            },
            {
              "fieldName": "recordatorio_1h",
              "fieldValue": "={{ $('Calcular Recordatorios').item.json.recordatorio_1h }}"
            },
            {
              "fieldName": "recordatorio_1h_enviado",
              "fieldValue": "no enviado"
            },
            {
              "fieldName": "eventid",
              "fieldValue": "={{ $('Calcular Recordatorios').item.json.event_id }}"
            },
            {
              "fieldName": "Id",
              "fieldValue": "={{ $json.Id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        1160,
        -760
      ],
      "id": "b7dac21d-4ce4-4e21-836c-22f93912cd15",
      "name": "NocoDB2",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "p4sjkkdf4pdtyvh",
        "table": "mqjswve4r6jiqxv",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Fecha_cita",
              "fieldValue": "={{ $('Calcular Recordatorios').item.json.fecha_cita }}"
            },
            {
              "fieldName": "Propiedad",
              "fieldValue": "={{ $('Limpia fecha').item.json.direccion }}"
            },
            {
              "fieldName": "recordatorio_24h",
              "fieldValue": "={{ $('Calcular Recordatorios').item.json.recordatorio_24h }}"
            },
            {
              "fieldName": "recordatorio_24h_enviado",
              "fieldValue": "no enviado"
            },
            {
              "fieldName": "recordatorio_1h",
              "fieldValue": "={{ $('Calcular Recordatorios').item.json.recordatorio_1h }}"
            },
            {
              "fieldName": "recordatorio_1h_enviado",
              "fieldValue": "no enviado"
            },
            {
              "fieldName": "eventid",
              "fieldValue": "={{ $('Calcular Recordatorios').item.json.event_id }}"
            },
            {
              "fieldName": "Clientes_id",
              "fieldValue": "={{ $('Calendario').first().json.Id_cliente_db }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        1160,
        -560
      ],
      "id": "44b609ff-63ff-4f18-9fdd-3c2f70cc8228",
      "name": "NocoDB3",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "p4sjkkdf4pdtyvh",
        "table": "mqjswve4r6jiqxv",
        "returnAll": true,
        "options": {
          "where": "=(Clientes_id,eq,{{ $('Calendario').first().json.Id_cliente_db }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        720,
        -660
      ],
      "id": "2951bbda-f9dd-4bc7-b7e7-356c059aea97",
      "name": "NocoDB1",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -160,
        -760
      ],
      "id": "6ff256a5-49a6-4c83-b9d0-ab819afb3083",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "// Este código toma una fecha de cita y calcula cuándo deben enviarse los recordatorios\n// Obtener la fecha de cita del input\nconst fechaCita = $('Limpia fecha').first().json.fecha_calendario;\nconst eventId = $('Merge1').first().json.id; // Viene del merge\n\nconsole.log(`Fecha original obtenida: ${fechaCita}`);\n\n// Función para parsear fecha manteniendo la hora original\nfunction parsearFechaOriginal(fechaISO) {\n  if (!fechaISO) return null;\n  \n  // Si la fecha ya tiene formato ISO, la parseamos directamente\n  // pero ajustamos para zona horaria de Argentina\n  const match = fechaISO.match(/(\\d{4}-\\d{2}-\\d{2})T(\\d{2}):(\\d{2})/);\n  if (match) {\n    const anio = match[1];\n    const hora = match[2];\n    const minutos = match[3];\n    \n    // Crear fecha interpretándola como hora de Argentina\n    // Para esto, necesitamos ajustar por la diferencia horaria\n    const fechaBase = new Date(fechaISO);\n    \n    // Obtener offset de Argentina (-3 UTC)\n    const offsetArgentina = -3; // Argentina es UTC-3\n    const offsetLocal = fechaBase.getTimezoneOffset() / 60; // Offset local en horas\n    \n    // Calcular diferencia y ajustar\n    const diferencia = offsetArgentina - (-offsetLocal);\n    \n    const fechaAjustada = new Date(fechaBase);\n    fechaAjustada.setHours(fechaAjustada.getHours() + diferencia);\n    \n    return fechaAjustada;\n  }\n  \n  return new Date(fechaISO);\n}\n\n// ALTERNATIVA MÁS SIMPLE: Usar la fecha tal como viene y solo ajustar cálculos\nfunction crearFechaDirecta(fechaISO) {\n  // Parsear directamente la fecha ISO\n  return new Date(fechaISO);\n}\n\n// Crear objetos Date para poder manipular las fechas\nconst citaDate = crearFechaDirecta(fechaCita);\n\n// Calcular momento para recordatorio de 24 horas (1 día antes, misma hora)\nconst recordatorio24hDate = new Date(citaDate);\nrecordatorio24hDate.setDate(recordatorio24hDate.getDate() - 1);\n\n// Calcular momento para recordatorio de 1 hora (misma fecha, 1 hora antes)\nconst recordatorio1hDate = new Date(citaDate);\nrecordatorio1hDate.setHours(recordatorio1hDate.getHours() - 1);\n\n// Función para formatear fechas en formato YYYY-MM-DDTHH:MM\nfunction formatearFechaSimplificada(fecha) {\n  // Obtener componentes de la fecha\n  const year = fecha.getFullYear();\n  const month = String(fecha.getMonth() + 1).padStart(2, '0');\n  const day = String(fecha.getDate()).padStart(2, '0');\n  const hours = String(fecha.getHours()).padStart(2, '0');\n  const minutes = String(fecha.getMinutes()).padStart(2, '0');\n  \n  // Construir el string con formato YYYY-MM-DDTHH:MM\n  return `${year}-${month}-${day}T${hours}:${minutes}`;\n}\n\n// Formatear las fechas al formato simplificado\nconst fechaCitaFormateada = formatearFechaSimplificada(citaDate);\nconst recordatorio24h = formatearFechaSimplificada(recordatorio24hDate);\nconst recordatorio1h = formatearFechaSimplificada(recordatorio1hDate);\n\n// Log para verificar los cálculos\nconsole.log(`Fecha de cita original: ${fechaCita}`);\nconsole.log(`Fecha de cita como Date: ${citaDate}`);\nconsole.log(`Fecha de cita formateada: ${fechaCitaFormateada}`);\nconsole.log(`Momento para recordatorio 24h: ${recordatorio24h}`);\nconsole.log(`Momento para recordatorio 1h: ${recordatorio1h}`);\n\n// Verificar si las horas son correctas\nconst horaOriginal = citaDate.getHours();\nconst hora24h = recordatorio24hDate.getHours();\nconst hora1h = recordatorio1hDate.getHours();\n\nconsole.log(`Hora original: ${horaOriginal}, Hora 24h: ${hora24h}, Hora 1h: ${hora1h}`);\n\n// Retornar los resultados\nreturn {\n  json: {\n    event_id: eventId,\n    fecha_cita: fechaCitaFormateada,\n    recordatorio_24h: recordatorio24h,\n    recordatorio_1h: recordatorio1h,\n    // Debug info\n    fecha_original_input: fechaCita,\n    hora_original: horaOriginal,\n    hora_24h_recordatorio: hora24h,\n    hora_1h_recordatorio: hora1h\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        -660
      ],
      "id": "e048dd66-1dcf-4873-a001-b66b9874ba84",
      "name": "Calcular Recordatorios"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "p4sjkkdf4pdtyvh",
        "table": "m5s5wgl9ag0m4sb",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "eventid_cliente",
              "fieldValue": "={{ $('Cliente violeta').first().json.id }}"
            },
            {
              "fieldName": "eventid_propietario",
              "fieldValue": "={{ $('Propietario azul').first().json.id }}"
            },
            {
              "fieldName": "eventid_agente",
              "fieldValue": "={{ $('Agente inmobiliario rojo').first().json.id }}"
            },
            {
              "fieldName": "Citas_id",
              "fieldValue": "={{ $json.Id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        1380,
        -560
      ],
      "id": "a1bd3f21-dd74-4836-92dc-e1461999300d",
      "name": "Insert event id",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "p4sjkkdf4pdtyvh",
        "table": "m5s5wgl9ag0m4sb",
        "returnAll": true,
        "options": {
          "where": "=(Citas,eq,{{ $json.Fecha_cita }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        1380,
        -760
      ],
      "id": "082be6a4-fd0c-4ba1-b73c-853bf12daa16",
      "name": "NocoDB4",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "projectId": "p4sjkkdf4pdtyvh",
        "table": "m5s5wgl9ag0m4sb",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "eventid_cliente",
              "fieldValue": "={{ $('Cliente violeta').first().json.id }}"
            },
            {
              "fieldName": "eventid_propietario",
              "fieldValue": "={{ $('Propietario azul').first().json.id }}"
            },
            {
              "fieldName": "eventid_agente",
              "fieldValue": "={{ $('Agente inmobiliario rojo').first().json.id }}"
            },
            {
              "fieldName": "Id",
              "fieldValue": "={{ $json.Id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        1600,
        -760
      ],
      "id": "6c816f5a-84e0-44f0-8695-3cfbe5519c54",
      "name": "actualizar evento",
      "credentials": {
        "nocoDbApiToken": {
          "id": "CawnXo6TfhLoivTw",
          "name": "NocoDB Token account"
        }
      }
    }
  ],
  "pinData": {
    "Calendario": [
      {
        "json": {
          "numero_cliente": "5492254423359",
          "Fecha_cita": "2025-06-06T08:00:00.000-03:00",
          "Nombre": "Fernando",
          "Evento": "agendar",
          "correo_electronico": "casserafernando@gmail.com",
          "nombre_inmobiliaria": "",
          "idMensaje": "UxtAQmHgdSg1eRXklkv1Xg-gNcE_sPfuT8",
          "Id_cliente_db": 19
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Argentina/Buenos_Aires",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "2kOn0Oz7c2uvczPK"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-03-23T17:49:20.946Z",
      "updatedAt": "2025-03-23T17:49:20.946Z",
      "id": "UdWAGpsQzroykED6",
      "name": "AGENTES INMO"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-05-30T14:02:51.778Z",
  "versionId": "ae7c0e35-7c73-45f1-b085-9dcff4077a8c"
}