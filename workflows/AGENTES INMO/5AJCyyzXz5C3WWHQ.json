{
  "active": false,
  "connections": {
    "Calendario": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response null Codigo1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lista": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getForCode": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "getForCode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Success2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Lista",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Datos de la propiedad",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Datos de la propiedad1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar1": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lista1": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "getForCode2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Success4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Lista1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getForCode2": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Datos de la propiedad1": {
      "main": [
        [
          {
            "node": "Google Calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Datos de la propiedad": {
      "main": [
        [
          {
            "node": "Google Calendar1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Success1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "Success3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-29T19:14:29.563Z",
  "id": "5AJCyyzXz5C3WWHQ",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "AGENTE INMO - Consultar_fechas_disponibles",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "Evento"
            },
            {
              "name": "numero_telefono"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -3180,
        440
      ],
      "id": "6e4f3631-32d6-4a84-a3a3-404bc5d1312a",
      "name": "Calendario"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Codigo_propiedad",
        "key": "=propiedades_historial_analisis",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2960,
        440
      ],
      "id": "db279666-f2af-4220-943f-335f44a78abc",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c358838a-4034-4100-a5cd-e89f533161b0",
              "leftValue": "={{ $json.ultimoCodigo }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2520,
        440
      ],
      "id": "3ff701f4-a965-4679-a55b-899ceded888b",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ef619c87-8996-4278-805f-187d5e1e672a",
              "name": "response",
              "value": "Codigo propiedad vacio",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2320,
        700
      ],
      "id": "b7e17bdc-0386-4846-a29f-c7424c903213",
      "name": "Response null Codigo1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "004dfd8dfad8cab59884aa5afbe99b4943ba96c971d4eb480405c7595b8160b1@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Francisco"
        },
        "returnAll": true,
        "timeMax": "={{ $now.plus({ week: 2 }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -1680,
        880
      ],
      "id": "305f5c1a-e231-4f10-983e-d3054fd5250b",
      "name": "Google Calendar",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "248CSUaxOr8MEWUN",
          "name": "Google Calendar account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "=true",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "bc06c8aa-a328-446d-8949-60271387df59",
      "name": "Success1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -480,
        980
      ]
    },
    {
      "parameters": {
        "jsCode": "// Función para formatear el rango de hora correctamente\nfunction formatearRangoHora(horaInicio, horaFin) {\n  const inicioMatch = horaInicio.match(/^(\\d+):(\\d+)/);\n  const finMatch = horaFin.match(/^(\\d+):(\\d+)/);\n  \n  const horaInicioFormateada = inicioMatch ? `${inicioMatch[1]}:${inicioMatch[2]}` : horaInicio;\n  const horaFinFormateada = finMatch ? `${finMatch[1]}:${finMatch[2]}` : horaFin;\n  \n  return `${horaInicioFormateada} a ${horaFinFormateada}`;\n}\n\n// Función para crear fecha en formato ISO con timezone de Argentina\nfunction crearFechaISO(anio, mes, dia, hora) {\n  // Parsear la hora (formato \"HH:MM\")\n  const [horas, minutos] = hora.split(':').map(Number);\n  \n  // Crear fecha en timezone de Argentina\n  const fecha = new Date(anio, mes - 1, dia, horas, minutos, 0);\n  \n  // Formatear en ISO simple sin prefijos\n  const year = fecha.getFullYear();\n  const month = String(fecha.getMonth() + 1).padStart(2, '0');\n  const day = String(fecha.getDate()).padStart(2, '0');\n  const hour = String(fecha.getHours()).padStart(2, '0');\n  const minute = String(fecha.getMinutes()).padStart(2, '0');\n  \n  // Retornar formato ISO limpio\n  return `${year}-${month}-${day}T${hour}:${minute}:00.000-03:00`;\n}// Obtener los datos del nodo anterior\nconst datos = $input.first()?.json?.resultados || [];\nconsole.log(\"DEBUG - Datos recibidos:\", JSON.stringify(datos).substring(0, 200) + \"...\");\n\n// Teléfono del cliente dinámico - obtener de nodo Calendario\nlet remoteJid = \"\";\ntry {\n  const numeroTelefono = $('Calendario').first().json.numero_telefono;\n  remoteJid = numeroTelefono || \"\";\n  console.log(\"DEBUG - Número obtenido del nodo Calendario:\", numeroTelefono);\n} catch (error) {\n  console.log(\"ERROR - No se pudo obtener numero_telefono:\", error.message);\n  remoteJid = \"\"; // Número vacío por defecto\n}\n\n// Verificar si tenemos datos\nif (!datos || !datos.length) {\n  console.log(\"DEBUG - No hay datos disponibles\");\n  \n  const mensajeSinFechas = {\n    to: remoteJid,\n    type: \"text\",\n    text: `📅🕒 *AGENDA DIGITAL* 🕒📅\\n\\n━━━━━━━━━━━━━━━━━━━━\\n\\n📆 *Información de Horarios*\\n\\nActualmente no hay fechas disponibles.\\n\\nPor favor, intenta nuevamente más tarde. 🙏\\n\\n━━━━━━━━━━━━━━━━━━━━`\n  };\n  \n  console.log(\"DEBUG - Enviando mensaje sin fechas a:\", remoteJid);\n  return [{ json: mensajeSinFechas }];\n}\n\n// Función para obtener el emoji estacional según el mes (hemisferio sur)\nfunction getEmojiEstacional(mes) {\n  if (mes >= 3 && mes <= 5) return \"🍂\"; // Otoño\n  if (mes >= 6 && mes <= 8) return \"❄️\"; // Invierno\n  if (mes >= 9 && mes <= 11) return \"🌸\"; // Primavera\n  return \"☀️\"; // Verano\n}\n\n// Nombres de los meses\nconst nombresMeses = {\n  1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril',\n  5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto',\n  9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'\n};\n\n// Nombres de los días de la semana\nconst nombresDias = {\n  0: 'Domingo', 1: 'Lunes', 2: 'Martes', 3: 'Miércoles',\n  4: 'Jueves', 5: 'Viernes', 6: 'Sábado'\n};\n\n// Extraer fecha de una cadena ISO\nfunction extraerFechaYHora(isoString) {\n  if (!isoString) return null;\n  \n  const match = isoString.match(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2})/);\n  if (match) {\n    const fechaCompleta = new Date(`${match[1]}-${match[2]}-${match[3]}T${match[4]}:${match[5]}:00`);\n    const diaSemana = nombresDias[fechaCompleta.getDay()];\n    \n    return {\n      anio: parseInt(match[1], 10),\n      mes: parseInt(match[2], 10),\n      dia: parseInt(match[3], 10),\n      hora: `${match[4]}:${match[5]}`,\n      fechaCompleta: fechaCompleta,\n      diaSemana: diaSemana\n    };\n  }\n  return null;\n}\n\n// Función para crear fecha en formato ISO con timezone de Argentina\nfunction crearFechaISO(anio, mes, dia, hora) {\n  // Parsear la hora (formato \"HH:MM\")\n  const [horas, minutos] = hora.split(':').map(Number);\n  \n  // Crear fecha en timezone de Argentina (UTC-3)\n  const fecha = new Date(anio, mes - 1, dia, horas, minutos, 0);\n  \n  // Convertir a ISO con timezone de Argentina (-03:00)\n  const offsetArgentina = -3; // UTC-3\n  const fechaUTC = new Date(fecha.getTime() - (offsetArgentina * 60 * 60 * 1000));\n  \n  // Formatear manualmente para incluir el timezone\n  const year = fecha.getFullYear();\n  const month = String(fecha.getMonth() + 1).padStart(2, '0');\n  const day = String(fecha.getDate()).padStart(2, '0');\n  const hour = String(fecha.getHours()).padStart(2, '0');\n  const minute = String(fecha.getMinutes()).padStart(2, '0');\n  const second = String(fecha.getSeconds()).padStart(2, '0');\n  \n  return `${year}-${month}-${day}T${hour}:${minute}:${second}.000-03:00`;\n}\n\n// Obtener la fecha y hora actual\nconst ahora = new Date();\nconsole.log(`DEBUG - Fecha actual: ${ahora.toISOString()}`);\n\n// Agrupar horarios por mes (igual que categorías en el primer código)\nconst mesesAgrupados = {};\n\n// Procesar los horarios disponibles de todos los eventos\ndatos.forEach(evento => {\n  if (!evento.horariosDisponibles || !evento.horariosDisponibles.length) return;\n  \n  evento.horariosDisponibles.forEach(horario => {\n    try {\n      const fechaHorario = new Date(horario.inicio);\n      \n      console.log(`DEBUG - Evaluando horario: ${horario.inicio}`);\n      \n      // Verificar si la fecha ya pasó\n      if (fechaHorario <= ahora) {\n        console.log(`DEBUG - FILTRADA: Fecha ya pasó`);\n        return;\n      }\n      \n      const fechaInicio = extraerFechaYHora(horario.inicio);\n      if (!fechaInicio) {\n        console.log(`DEBUG - Error al extraer fecha y hora de: ${horario.inicio}`);\n        return;\n      }\n      \n      const mes = fechaInicio.mes;\n      const dia = fechaInicio.dia;\n      const nombreMes = nombresMeses[mes];\n      const diaSemana = fechaInicio.diaSemana;\n      \n      // Inicializar el grupo del mes si no existe (como categorías)\n      if (!mesesAgrupados[nombreMes]) mesesAgrupados[nombreMes] = [];\n\n      // Evitar duplicados\n      const yaExiste = mesesAgrupados[nombreMes].some(\n        e => e.dia === dia && e.horaInicio === horario.horaInicio\n      );\n      \n      if (!yaExiste) {\n        // Crear fecha ISO para el rowId\n        const fechaISO = crearFechaISO(fechaInicio.anio, fechaInicio.mes, fechaInicio.dia, horario.horaInicio);\n        \n        mesesAgrupados[nombreMes].push({\n          id: fechaISO, // El ID será la fecha en formato ISO\n          dia: dia,\n          horaInicio: horario.horaInicio,\n          horaFin: horario.horaFin,\n          mes: mes,\n          diaSemana: diaSemana,\n          resumen: evento.eventoPrincipal.resumen || \"\"\n        });\n      }\n    } catch (error) {\n      console.log(`ERROR procesando horario: ${error.message}`);\n    }\n  });\n});\n\n// Orden de meses (como orden de categorías en el primer código)\nconst ordenMeses = [\n  \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\n  \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n];\n\n// Filtro de búsqueda (igual que en el primer código)\nlet consultaUsuario = \"\";\ntry {\n  consultaUsuario = $('Workflow Input Trigger').first().json.query.Descripcion || \"\";\n} catch {\n  consultaUsuario = \"\";\n}\n\nif (consultaUsuario && consultaUsuario.trim() !== \"\") {\n  const mesesFiltrados = {};\n  let hayFechasFiltradas = false;\n\n  for (const mes in mesesAgrupados) {\n    if (mes.toLowerCase().includes(consultaUsuario.toLowerCase())) {\n      mesesFiltrados[mes] = mesesAgrupados[mes];\n      hayFechasFiltradas = true;\n    } else {\n      const filtrados = mesesAgrupados[mes].filter(f =>\n        f.diaSemana.toLowerCase().includes(consultaUsuario.toLowerCase()) ||\n        f.resumen.toLowerCase().includes(consultaUsuario.toLowerCase())\n      );\n      if (filtrados.length > 0) {\n        mesesFiltrados[mes] = filtrados;\n        hayFechasFiltradas = true;\n      }\n    }\n  }\n  if (hayFechasFiltradas) {\n    for (const key in mesesAgrupados) delete mesesAgrupados[key];\n    Object.assign(mesesAgrupados, mesesFiltrados);\n  }\n}\n\n// Ordenar meses (como categorías ordenadas)\nconst mesesOrdenados = Object.keys(mesesAgrupados).sort((a, b) => {\n  const idxA = ordenMeses.indexOf(a);\n  const idxB = ordenMeses.indexOf(b);\n  if (idxA !== -1 && idxB !== -1) return idxA - idxB;\n  if (idxA !== -1) return -1;\n  if (idxB !== -1) return 1;\n  return a.localeCompare(b);\n});\n\n// Crear sections (igual que en el primer código)\nconst sections = [];\n\nfor (const nombreMes of mesesOrdenados) {\n  const fechas = mesesAgrupados[nombreMes];\n  if (fechas.length === 0) continue;\n\n  // Ordenar fechas por día y hora (como productos por nombre)\n  fechas.sort((a, b) => {\n    if (a.dia !== b.dia) return a.dia - b.dia;\n    return a.horaInicio.localeCompare(b.horaInicio);\n  });\n\n  // Obtener emoji estacional para el mes\n  const emojiMes = getEmojiEstacional(fechas[0].mes);\n\n  // Crear rows exactamente como en las capturas\n  const rows = fechas.map(f => {\n    const horaFormateada = formatearRangoHora(f.horaInicio, f.horaFin);\n    \n    return {\n      id: f.id, // Este será el formato ISO: 2025-05-30T12:30:00.000-03:00\n      title: `🕒 ${f.dia} de ${nombreMes} : ${horaFormateada}`,\n      description: `${f.diaSemana}`\n    };\n  });\n\n  // Agregar section con formato exacto de las capturas\n  sections.push({\n    title: `${emojiMes} ${nombreMes}`,\n    rows\n  });\n}\n\n// Título del calendario (simple como en las capturas)\nconst tituloCita = \"📅 Fechas Disponibles\";\n\n// Objetos header, body, footer y action EXACTAMENTE como las capturas\nconst headerObj = {\n  text: tituloCita\n};\n\nconst bodyObj = {\n  text: `Seleccioná una fecha y hora para agendar tu visita\\n🕒 Cada visita tiene una duración de 30 minutos aprox.`\n};\n\nconst footerObj = {\n  text: \"\"\n};\n\nconst actionObj = {\n  list: {\n    sections: sections,\n    label: \"Seleccioná 👆\"\n  }\n};\n\n// Request body EXACTAMENTE igual al primer código\nconst requestBody = {\n  header: headerObj,\n  body: bodyObj,\n  footer: footerObj,\n  action: actionObj,\n  type: \"list\",\n  to: remoteJid\n};\n\nconsole.log(\"DEBUG - Número final para envío:\", remoteJid);\nconsole.log(\"DEBUG - Request body generado:\", JSON.stringify(requestBody, null, 2));\n\nreturn [{ json: requestBody }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -920,
        980
      ],
      "id": "ae9a13fb-b9b6-4237-ae12-338898fce69e",
      "name": "Lista"
    },
    {
      "parameters": {
        "jsCode": "// Código para obtener el último código de propiedad\n// Obtenemos todos los ítems de Redis\nconst redisItems =$input.first().json.Codigo_propiedad ;\n\n// Verificamos si existe la propiedad y es un array\nif (!Array.isArray(redisItems)) {\n  console.log(\"Error: No se encontró un array de códigos de propiedad\");\n  return $input.all();\n}\n\n// Obtenemos el último elemento del array\nconst ultimoCodigo = redisItems[redisItems.length - 1];\nconsole.log(\"Último código de propiedad:\", ultimoCodigo);\n\n// Añadimos el último código a todos los ítems de entrada\nconst items = $input.all();\nfor (const item of items) {\n  item.json.ultimoCodigo = ultimoCodigo;\n}\n\n// Devolvemos los ítems con el nuevo campo\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2740,
        440
      ],
      "id": "d714ca80-98fb-4845-8cb3-d7bf383ec8f1",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// 🚀 ANÁLISIS DEL CÓDIGO ORIGINAL Y MEJORAS\n\n// === LO QUE HACE EL CÓDIGO ACTUAL ===\n// 1. Busca eventos que contengan \"CODIGO:XXXXX\" en el summary\n// 2. Los trata como eventos disponibles (colorId 10)\n// 3. Divide cada evento en bloques de 30 minutos\n// 4. Devuelve los horarios disponibles\n\n// === CÓDIGO MEJORADO CON TIEMPO DINÁMICO ===\n\nconsole.log(\"=== GENERADOR DE HORARIOS DISPONIBLES ===\");\n\n// 🚀 Leer datos de entrada\nconst eventos = $input.all();\nconst codigoBusqueda = $('Code').first().json.ultimoCodigo?.toUpperCase();\nconst tiempoReserva = $('Datos de la propiedad1').first().json.Tiempo; // ⭐ NUEVA VARIABLE\n\nconsole.log(\"Código a buscar:\", codigoBusqueda);\nconsole.log(\"Tiempo de reserva original:\", tiempoReserva);\n\n// Validar datos de entrada\nif (!codigoBusqueda) {\n    console.log(\"❌ No se proporcionó código de búsqueda\");\n    return [{\n        json: {\n            error: true,\n            message: \"No se proporcionó código de búsqueda\"\n        }\n    }];\n}\n\nif (!tiempoReserva) {\n    console.log(\"❌ No se proporcionó tiempo de reserva\");\n    return [{\n        json: {\n            error: true,\n            message: \"No se proporcionó tiempo de reserva\"\n        }\n    }];\n}\n\n// 🚀 PARSEAR EL TIEMPO CORRECTAMENTE (ej: \"1hs\" = 60min, \"30min\" = 30min)\nconst parsearTiempo = (tiempoStr) => {\n    if (!tiempoStr || typeof tiempoStr !== 'string') {\n        return null;\n    }\n    \n    const tiempoLower = tiempoStr.toLowerCase().trim();\n    console.log(\"Parseando tiempo:\", tiempoLower);\n    \n    // Buscar patrones como \"1hs\", \"2hs\", \"30min\", \"45min\", etc.\n    if (tiempoLower.includes('hs') || tiempoLower.includes('hora')) {\n        // Extraer número de horas\n        const horasMatch = tiempoLower.match(/(\\d+(?:\\.\\d+)?)\\s*(?:hs|hora)/);\n        if (horasMatch) {\n            const horas = parseFloat(horasMatch[1]);\n            const minutos = horas * 60;\n            console.log(`${horas} horas = ${minutos} minutos`);\n            return minutos;\n        }\n    } else if (tiempoLower.includes('min')) {\n        // Extraer número de minutos\n        const minutosMatch = tiempoLower.match(/(\\d+(?:\\.\\d+)?)\\s*min/);\n        if (minutosMatch) {\n            const minutos = parseFloat(minutosMatch[1]);\n            console.log(`${minutos} minutos`);\n            return minutos;\n        }\n    } else {\n        // Intentar parsear como número directo (asumir minutos)\n        const numero = parseFloat(tiempoLower);\n        if (!isNaN(numero)) {\n            console.log(`Número directo: ${numero} (asumiendo minutos)`);\n            return numero;\n        }\n    }\n    \n    return null;\n};\n\nconst tiempoReservaMin = parsearTiempo(tiempoReserva);\n\nif (tiempoReservaMin === null || tiempoReservaMin <= 0) {\n    console.log(\"❌ No se pudo parsear el tiempo de reserva:\", tiempoReserva);\n    return [{\n        json: {\n            error: true,\n            message: `Formato de tiempo inválido: \"${tiempoReserva}\". Use formatos como \"1hs\", \"30min\", etc.`\n        }\n    }];\n}\n\nconsole.log(\"Tiempo de reserva convertido:\", tiempoReservaMin, \"minutos\");\n\n// ⭐ CONTAR EVENTOS ROJOS BASÁNDOSE EN colorId\nlet eventosRojosData = [];\nlet contadorEventosRojos = 0;\n\ntry {\n    console.log(\"\\n🔍 Analizando todos los eventos para encontrar eventos rojos (colorId = 11)...\");\n    \n    // Recorrer todos los eventos de entrada para encontrar los rojos\n    eventos.forEach((item, index) => {\n        const evento = item.json;\n        \n        // Verificar si es un evento rojo (colorId = 11)\n        const esEventoRojo = evento.colorId === 11 || evento.colorId === \"11\";\n        \n        console.log(`Evento ${index + 1}: colorId = ${evento.colorId}, ¿Es rojo? ${esEventoRojo}`);\n        \n        if (esEventoRojo) {\n            // Filtrar eventos que no tienen fechas válidas\n            const start = evento.start?.dateTime || evento.start?.date || evento.start;\n            const end = evento.end?.dateTime || evento.end?.date || evento.end;\n            \n            if (start && end && \n                start !== \"America/Argentina/Buenos_Aires\" && \n                end !== \"America/Argentina/Buenos_Aires\") {\n                \n                eventosRojosData.push(evento);\n                contadorEventosRojos++;\n                \n                console.log(`✅ Evento rojo válido encontrado: ${evento.summary || 'Sin título'}`);\n            } else {\n                console.log(`❌ Evento rojo descartado por fechas inválidas`);\n            }\n        }\n    });\n    \n    console.log(`📊 Total eventos rojos encontrados: ${contadorEventosRojos}`);\n    \n} catch (error) {\n    console.log(\"⚠️ Error al analizar eventos rojos:\", error.message);\n    eventosRojosData = [];\n    contadorEventosRojos = 0;\n}\n\nconsole.log(\"Eventos rojos encontrados:\", contadorEventosRojos);\nconsole.log(\"Datos de eventos rojos:\", eventosRojosData);\n\n// 🚀 Funciones auxiliares mejoradas\nconst extraerMinutos = (isoString) => {\n    if (!isoString) return null;\n    try {\n        console.log(\"Extrayendo minutos de:\", isoString);\n        \n        // PROBLEMA: JavaScript convierte automáticamente a timezone local\n        // Necesitamos extraer la hora directamente del string ISO\n        \n        // Buscar el patrón de hora en el string ISO: YYYY-MM-DDTHH:MM:SS\n        const horaMatch = isoString.match(/T(\\d{2}):(\\d{2}):(\\d{2})/);\n        \n        if (horaMatch) {\n            const horas = parseInt(horaMatch[1]);\n            const minutos = parseInt(horaMatch[2]);\n            const totalMinutos = horas * 60 + minutos;\n            \n            console.log(`Hora extraída directamente: ${horas}:${minutos.toString().padStart(2, '0')} = ${totalMinutos} minutos`);\n            return totalMinutos;\n        }\n        \n        // Fallback: usar Date object (puede tener problemas de timezone)\n        const fecha = new Date(isoString);\n        const totalMinutosFallback = fecha.getHours() * 60 + fecha.getMinutes();\n        console.log(`Fallback con Date object: ${fecha.getHours()}:${fecha.getMinutes()} = ${totalMinutosFallback} minutos`);\n        console.log(`Fecha completa: ${fecha.toString()}`);\n        \n        return totalMinutosFallback;\n    } catch (error) {\n        console.log(\"Error parseando fecha:\", isoString, error);\n        return null;\n    }\n};\n\nconst minutosAHora = (totalMinutos) => {\n    const horas = Math.floor(totalMinutos / 60);\n    const minutos = totalMinutos % 60;\n    return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`;\n};\n\nconst crearFechaISO = (fechaBase, horaStr) => {\n    try {\n        console.log(\"Creando fecha ISO con:\");\n        console.log(\"- fechaBase:\", fechaBase);\n        console.log(\"- horaStr:\", horaStr);\n        \n        // Extraer la parte de fecha (YYYY-MM-DD) y timezone del string original\n        const fechaMatch = fechaBase.match(/^(\\d{4}-\\d{2}-\\d{2})T.*?([-+]\\d{2}:\\d{2})$/);\n        \n        if (fechaMatch) {\n            const fechaParte = fechaMatch[1]; // 2025-05-30\n            const timezone = fechaMatch[2]; // -03:00\n            \n            // Crear nueva fecha manteniendo la timezone original\n            const nuevaFechaISO = `${fechaParte}T${horaStr}:00${timezone}`;\n            console.log(\"Nueva fecha ISO creada:\", nuevaFechaISO);\n            \n            return nuevaFechaISO;\n        }\n        \n        // Fallback: reemplazar solo la parte de hora\n        const fechaModificada = fechaBase.replace(/T\\d{2}:\\d{2}/, `T${horaStr}`);\n        console.log(\"Fecha modificada (fallback):\", fechaModificada);\n        \n        return fechaModificada;\n    } catch (error) {\n        console.log(\"Error creando fecha ISO:\", fechaBase, horaStr, error);\n        return fechaBase;\n    }\n};\n\n// 🚀 Recolectar eventos válidos\nconsole.log(\"\\n--- BUSCANDO EVENTOS ---\");\nconst eventosDisponibles = [];\n\nfor (const item of eventos) {\n    const ev = item.json;\n    const start = ev.start?.dateTime || ev.start?.date || ev.start;\n    const end = ev.end?.dateTime || ev.end?.date || ev.end;\n    \n    // Filtrar elementos que no tienen fecha válida\n    if (!start || !end || \n        start === \"America/Argentina/Buenos_Aires\" || \n        end === \"America/Argentina/Buenos_Aires\") {\n        console.log(\"⏭️ Saltando evento sin fechas válidas\");\n        continue;\n    }\n    \n    const summary = ev.summary || \"\";\n    \n    // Buscar si summary contiene \"Codigo:XXXXX\"\n    const summaryUpper = summary.toUpperCase();\n    const patronBusqueda = \"CODIGO:\" + codigoBusqueda;\n    const coincide = summaryUpper.includes(patronBusqueda);\n    \n    console.log(`📅 Evento: \"${summary}\"`);\n    console.log(`🔍 Buscando: \"${patronBusqueda}\"`);\n    console.log(`✅ ¿Coincide? ${coincide}`);\n    \n    if (coincide) {\n        // Validar que las fechas se puedan parsear\n        const fechaInicio = new Date(start);\n        const fechaFin = new Date(end);\n        \n        if (isNaN(fechaInicio.getTime()) || isNaN(fechaFin.getTime())) {\n            console.log(\"❌ Fechas inválidas en evento:\", start, end);\n            continue;\n        }\n        \n        eventosDisponibles.push({ \n            start, \n            end, \n            summary, \n            location: ev.location || \"\",\n            colorId: \"10\",\n            fechaInicioParsed: fechaInicio.toISOString(),\n            fechaFinParsed: fechaFin.toISOString()\n        });\n        \n        console.log(\"✅ Evento agregado a disponibles\");\n    }\n}\n\nconsole.log(`\\n📊 Total eventos disponibles encontrados: ${eventosDisponibles.length}`);\n\n// 🚀 Procesar eventos rojos (visitas agendadas) para exclusión\nconsole.log(\"\\n--- PROCESANDO EVENTOS ROJOS (OCUPADOS) ---\");\nconst bloquesOcupados = [];\n\n// Validar que hay eventos rojos para procesar\nif (contadorEventosRojos === 0) {\n    console.log(\"ℹ️ No hay eventos rojos (colorId = 11) para procesar. Todos los horarios estarán disponibles.\");\n} else {\n    console.log(`✅ ${contadorEventosRojos} eventos rojos encontrados, procesando exclusiones...`);\n\n    // Procesar cada evento rojo encontrado\n    eventosRojosData.forEach((eventoRojo, index) => {\n        console.log(`\\n🔴 Procesando evento rojo ${index + 1}:`);\n        console.log(\"ColorId:\", eventoRojo.colorId);\n        console.log(\"Summary:\", eventoRojo.summary || \"Sin título\");\n        console.log(\"Evento completo:\", JSON.stringify(eventoRojo, null, 2));\n        \n        // Extraer fechas del evento rojo\n        let fechaInicioRojo, fechaFinRojo;\n        \n        if (eventoRojo.start && eventoRojo.start.dateTime) {\n            fechaInicioRojo = eventoRojo.start.dateTime;\n        } else if (eventoRojo.start) {\n            fechaInicioRojo = eventoRojo.start;\n        }\n        \n        if (eventoRojo.end && eventoRojo.end.dateTime) {\n            fechaFinRojo = eventoRojo.end.dateTime;\n        } else if (eventoRojo.end) {\n            fechaFinRojo = eventoRojo.end;\n        }\n        \n        if (fechaInicioRojo && fechaFinRojo) {\n            const inicioMin = extraerMinutos(fechaInicioRojo);\n            const finMin = extraerMinutos(fechaFinRojo);\n            \n            if (inicioMin !== null && finMin !== null) {\n                // Extraer fecha base (YYYY-MM-DD) para comparar con eventos disponibles\n                const fechaBaseMatch = fechaInicioRojo.match(/^(\\d{4}-\\d{2}-\\d{2})/);\n                const fechaBase = fechaBaseMatch ? fechaBaseMatch[1] : null;\n                \n                const bloqueOcupado = {\n                    fechaBase: fechaBase,\n                    inicioMin: inicioMin,\n                    finMin: finMin,\n                    fechaInicioCompleta: fechaInicioRojo,\n                    fechaFinCompleta: fechaFinRojo,\n                    summary: eventoRojo.summary || \"Visita agendada\",\n                    colorId: eventoRojo.colorId\n                };\n                \n                bloquesOcupados.push(bloqueOcupado);\n                \n                console.log(`✅ Bloque ocupado: ${fechaBase} de ${minutosAHora(inicioMin)} a ${minutosAHora(finMin)} (${eventoRojo.summary || 'Sin título'})`);\n            } else {\n                console.log(\"❌ No se pudieron extraer minutos del evento rojo\");\n            }\n        } else {\n            console.log(\"❌ No se pudieron extraer fechas del evento rojo\");\n        }\n    });\n}\n\nconsole.log(`\\n📋 Total bloques ocupados: ${bloquesOcupados.length}`);\n\n// Función para verificar si un bloque está ocupado\nconst estaOcupado = (fechaBase, inicioMin, finMin) => {\n    return bloquesOcupados.some(ocupado => {\n        // Debe ser la misma fecha\n        if (ocupado.fechaBase !== fechaBase) return false;\n        \n        // Verificar superposición de tiempo:\n        // Un bloque está ocupado si hay ANY superposición con un evento rojo\n        const haySuperpocision = (\n            // El nuevo bloque empieza antes de que termine el ocupado Y\n            inicioMin < ocupado.finMin &&\n            // El nuevo bloque termina después de que empiece el ocupado\n            finMin > ocupado.inicioMin\n        );\n        \n        if (haySuperpocision) {\n            console.log(`❌ Bloque ${minutosAHora(inicioMin)}-${minutosAHora(finMin)} ocupado por: ${ocupado.summary}`);\n        }\n        \n        return haySuperpocision;\n    });\n};\n\n// 🚀 Si no hay eventos disponibles\nif (eventosDisponibles.length === 0) {\n    return [{\n        json: {\n            noMatchingEvents: true,\n            message: `No se encontraron eventos disponibles para el código: ${codigoBusqueda}`,\n            debug: {\n                codigoBuscado: codigoBusqueda,\n                patronBusqueda: \"CODIGO:\" + codigoBusqueda,\n                totalEventosAnalizados: eventos.length\n            }\n        }\n    }];\n}\n\n// 🚀 Procesar horarios disponibles con tiempo dinámico\nconsole.log(`\\n--- GENERANDO BLOQUES DE ${tiempoReservaMin} MINUTOS ---`);\n\nconst resultados = eventosDisponibles.map((evento, index) => {\n    console.log(`\\n🏗️ Procesando evento ${index + 1}: \"${evento.summary}\"`);\n    \n    const inicioEventoMin = extraerMinutos(evento.start);\n    const finEventoMin = extraerMinutos(evento.end);\n    \n    if (inicioEventoMin === null || finEventoMin === null) {\n        console.log(\"❌ No se pudieron extraer minutos del evento\");\n        return {\n            eventoPrincipal: {\n                resumen: evento.summary,\n                location: evento.location,\n                inicio: evento.start,\n                fin: evento.end,\n                colorId: \"10\",\n                error: \"No se pudieron procesar las horas\"\n            },\n            horariosDisponibles: []\n        };\n    }\n    \n    console.log(`⏰ Evento de ${minutosAHora(inicioEventoMin)} a ${minutosAHora(finEventoMin)}`);\n    console.log(`📏 Duración total: ${finEventoMin - inicioEventoMin} minutos`);\n    \n    // Crear bloques basados en el tiempo de reserva\n    const bloques = [];\n    let bloquesGenerados = 0;\n    let bloquesExcluidos = 0;\n    \n    // Extraer fecha base del evento para comparar con eventos rojos\n    const fechaBaseEvento = evento.start.match(/^(\\d{4}-\\d{2}-\\d{2})/);\n    const fechaBase = fechaBaseEvento ? fechaBaseEvento[1] : null;\n    \n    for (let m = inicioEventoMin; m + tiempoReservaMin <= finEventoMin; m += tiempoReservaMin) {\n        const horaInicio = minutosAHora(m);\n        const horaFin = minutosAHora(m + tiempoReservaMin);\n        \n        // ⭐ VERIFICAR SI ESTE BLOQUE ESTÁ OCUPADO\n        const bloqueOcupado = estaOcupado(fechaBase, m, m + tiempoReservaMin);\n        \n        if (bloqueOcupado) {\n            bloquesExcluidos++;\n            console.log(`  ❌ Bloque ${horaInicio} - ${horaFin} EXCLUIDO (ocupado)`);\n            continue; // Saltar este bloque\n        }\n        \n        const bloque = {\n            horaInicio: horaInicio,\n            horaFin: horaFin,\n            inicio: crearFechaISO(evento.start, horaInicio),\n            fin: crearFechaISO(evento.start, horaFin),\n            duracionMinutos: tiempoReservaMin\n        };\n        \n        bloques.push(bloque);\n        bloquesGenerados++;\n        \n        console.log(`  ✅ Bloque ${bloquesGenerados}: ${horaInicio} - ${horaFin} DISPONIBLE`);\n    }\n    \n    console.log(`✅ Total bloques disponibles: ${bloquesGenerados}`);\n    console.log(`❌ Total bloques excluidos: ${bloquesExcluidos}`);\n    \n    return {\n        eventoPrincipal: {\n            resumen: evento.summary,\n            location: evento.location,\n            inicio: evento.start,\n            fin: evento.end,\n            horaInicio: minutosAHora(inicioEventoMin),\n            horaFin: minutosAHora(finEventoMin),\n            colorId: \"10\",\n            duracionTotalMinutos: finEventoMin - inicioEventoMin,\n            tiempoReservaMinutos: tiempoReservaMin\n        },\n        horariosDisponibles: bloques,\n        estadisticas: {\n            totalBloques: bloquesGenerados,\n            bloquesExcluidos: bloquesExcluidos,\n            duracionBloque: tiempoReservaMin,\n            duracionEvento: finEventoMin - inicioEventoMin\n        }\n    };\n});\n\n// 🚀 Calcular estadísticas generales\nconst totalBloques = resultados.reduce((sum, resultado) => sum + resultado.horariosDisponibles.length, 0);\nconst totalExcluidos = resultados.reduce((sum, resultado) => sum + (resultado.estadisticas?.bloquesExcluidos || 0), 0);\n\nconsole.log(`\\n📈 RESUMEN FINAL:`);\nconsole.log(`- Eventos disponibles: ${eventosDisponibles.length}`);\nconsole.log(`- Total bloques de tiempo DISPONIBLES: ${totalBloques}`);\nconsole.log(`- Total bloques EXCLUIDOS (ocupados): ${totalExcluidos}`);\nconsole.log(`- Duración por bloque: ${tiempoReservaMin} minutos`);\nconsole.log(`- Eventos rojos (colorId=11) encontrados: ${contadorEventosRojos}`);\n\n// 🚀 Devolver la respuesta\nreturn [{\n    json: {\n        resultados: resultados,\n        resumen: {\n            codigoBuscado: codigoBusqueda,\n            tiempoReservaMinutos: tiempoReservaMin,\n            eventosEncontrados: eventosDisponibles.length,\n            totalBloquesDisponibles: totalBloques,\n            totalBloquesExcluidos: totalExcluidos,\n            eventosRojosEncontrados: contadorEventosRojos\n        }\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1320,
        880
      ],
      "id": "e8ad3a77-dca2-4e50-a840-1fbd4f3a5187",
      "name": "getForCode"
    },
    {
      "parameters": {
        "fieldToSplitOut": "summary, start, end, location, colorId, description, id",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1500,
        880
      ],
      "id": "5bdf6fd1-d1b3-42b4-8ca8-ffb7aaba17cb",
      "name": "Split Out"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b272870f-2db7-43e9-b82f-131ed3160b38",
              "leftValue": "={{ $json.message }}",
              "rightValue": "=No se encontraron eventos disponibles para la propiedad.",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1140,
        880
      ],
      "id": "f29796f5-987b-4b1b-a419-448eb760e7c8",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "=No hay evento cargados para esta propiedad",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "956ea19e-b07d-4eea-894c-0da963c65220",
      "name": "Success2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -920,
        780
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "435d1553-cd6c-4d79-85c9-bf9b09fef4fd",
              "leftValue": "={{ $('Calendario').item.json.Evento }}",
              "rightValue": "reagendar",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2260,
        360
      ],
      "id": "04879fbb-87a8-49dc-91e7-8235bc0b09b4",
      "name": "If2"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "004dfd8dfad8cab59884aa5afbe99b4943ba96c971d4eb480405c7595b8160b1@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Francisco"
        },
        "returnAll": true,
        "timeMax": "={{ $now.plus({ week: 2 }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -1680,
        -20
      ],
      "id": "9bbc5406-f79e-486e-96e7-037773d23987",
      "name": "Google Calendar1",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "248CSUaxOr8MEWUN",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "=true",
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "cefd55d1-7160-46e4-a9d1-aeaf63ee6c3e",
      "name": "Success3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -360,
        80
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del nodo anterior\nconst datos = $input.first()?.json?.resultados || [];\nconsole.log(\"DEBUG - Datos recibidos:\", JSON.stringify(datos).substring(0, 200) + \"...\");\n\n// Verificar si tenemos datos\nif (!datos || !datos.length) {\n  console.log(\"DEBUG - No hay datos disponibles\");\n  return [{\n    json: {\n      to: $('Calendario').first().json.numero_cliente || \"\",\n      type: \"text\",\n      text: \"No hay fechas disponibles para reprogramar la visita en este momento. Intentá más tarde.\"\n    },\n    pairedItem: 0\n  }];\n}\n\n// Función para obtener el emoji estacional según el mes (hemisferio sur)\nfunction getEmojiEstacional(mes) {\n  if (mes >= 3 && mes <= 5) return \"🍂\";\n  if (mes >= 6 && mes <= 8) return \"❄️\";\n  if (mes >= 9 && mes <= 11) return \"🌸\";\n  return \"☀️\";\n}\n\nconst nombresMeses = {\n  1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril',\n  5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto',\n  9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'\n};\nconst nombresDias = {\n  0: 'Domingo', 1: 'Lunes', 2: 'Martes', 3: 'Miércoles',\n  4: 'Jueves', 5: 'Viernes', 6: 'Sábado'\n};\n\nfunction extraerFechaYHora(isoString) {\n  if (!isoString) return null;\n  const match = isoString.match(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2})/);\n  if (match) {\n    const fechaCompleta = new Date(`${match[1]}-${match[2]}-${match[3]}T${match[4]}:${match[5]}:00`);\n    const diaSemana = nombresDias[fechaCompleta.getDay()];\n    return {\n      anio: parseInt(match[1], 10),\n      mes: parseInt(match[2], 10),\n      dia: parseInt(match[3], 10),\n      hora: `${match[4]}:${match[5]}`,\n      fechaCompleta: fechaCompleta,\n      diaSemana: diaSemana\n    };\n  }\n  return null;\n}\n\nfunction formatearRangoHora(horaInicio, horaFin) {\n  const inicioMatch = horaInicio.match(/^(\\d+):(\\d+)/);\n  const finMatch = horaFin.match(/^(\\d+):(\\d+)/);\n  const horaInicioFormateada = inicioMatch ? `${inicioMatch[1]}:${inicioMatch[2]}` : horaInicio;\n  const horaFinFormateada = finMatch ? `${finMatch[1]}:${finMatch[2]}` : horaFin;\n  return `${horaInicioFormateada} a ${horaFinFormateada}`;\n}\n\nconst ahora = new Date();\n\n// Agrupar horarios por mes, guardando el año real para el ISO\nconst mesesAgrupados = {};\ndatos.forEach(evento => {\n  if (!evento.horariosDisponibles || !evento.horariosDisponibles.length) return;\n  evento.horariosDisponibles.forEach(horario => {\n    try {\n      const fechaHorario = new Date(horario.inicio);\n      if (fechaHorario <= ahora) return;\n      const fechaInicio = extraerFechaYHora(horario.inicio);\n      if (!fechaInicio) return;\n      const mes = fechaInicio.mes;\n      const dia = fechaInicio.dia;\n      const anio = fechaInicio.anio; // <- AÑO REAL!\n      const nombreMes = nombresMeses[mes];\n      const diaSemana = fechaInicio.diaSemana;\n      if (!mesesAgrupados[nombreMes]) mesesAgrupados[nombreMes] = [];\n      const yaExiste = mesesAgrupados[nombreMes].some(\n        e => e.dia === dia && e.horaInicio === horario.horaInicio\n      );\n      if (!yaExiste) {\n        mesesAgrupados[nombreMes].push({\n          id: null, // Se define luego (ISO)\n          anio,\n          mes,\n          dia,\n          horaInicio: horario.horaInicio,\n          horaFin: horario.horaFin,\n          diaSemana,\n          resumen: evento.eventoPrincipal ? evento.eventoPrincipal.resumen : \"\"\n        });\n      }\n    } catch (error) {\n      console.log(`ERROR procesando horario: ${error.message}`);\n    }\n  });\n});\n\n// Crear sections en formato SendList WHAPI\nconst sections = [];\nconst ordenMeses = [\n  \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\n  \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n];\nconst mesesOrdenados = Object.keys(mesesAgrupados).sort((a, b) => {\n  const idxA = ordenMeses.indexOf(a);\n  const idxB = ordenMeses.indexOf(b);\n  if (idxA !== -1 && idxB !== -1) return idxA - idxB;\n  if (idxA !== -1) return -1;\n  if (idxB !== -1) return 1;\n  return a.localeCompare(b);\n});\nfor (const nombreMes of mesesOrdenados) {\n  const filas = mesesAgrupados[nombreMes];\n  if (filas.length === 0) continue;\n  const mes = filas[0].mes;\n  const emoji = getEmojiEstacional(mes);\n\n  filas.sort((a, b) => {\n    if (a.dia !== b.dia) return a.dia - b.dia;\n    return a.horaInicio.localeCompare(b.horaInicio);\n  });\n\n  const rows = filas.map(f => {\n    // Armar fecha ISO con año real\n    const mesIso = String(f.mes).padStart(2, '0');\n    const diaIso = String(f.dia).padStart(2, '0');\n    const horaIso = f.horaInicio.length === 5 ? f.horaInicio : f.horaInicio.padStart(5, '0');\n    const fechaIso = `${f.anio}-${mesIso}-${diaIso}T${horaIso}`; // Ej: 2025-05-29T15:42\n    return {\n      id: fechaIso, // row_id en formato ISO corto\n      title: `🕒 ${f.dia} de ${nombreMes} : ${formatearRangoHora(f.horaInicio, f.horaFin)}`,\n      description: `${f.diaSemana}`\n    };\n  });\n\n  if (rows.length > 0) {\n    sections.push({\n      title: `${emoji} ${nombreMes}`,\n      rows\n    });\n  }\n}\n\n// Obtener número de cliente desde otro nodo o poner uno por defecto\nconst remoteJid = $('Calendario').first().json.numero_cliente || \"\";\n\n// JSON final para enviar por WhatsApp (formato WHAPI SendList unificado)\nconst headerObj = {\n  text: \"📅 Fechas de Reprogramación\"\n};\nconst bodyObj = {\n  text: `Seleccioná una nueva fecha y hora para reprogramar tu visita.\\n🕒 Cada visita tiene una duración de 30 minutos aprox.`\n};\nconst footerObj = {\n  text: \"\"\n};\nconst actionObj = {\n  list: {\n    sections: sections,\n    label: \"Seleccioná 👆\"\n  }\n};\n\nconst requestBody = {\n  header: headerObj,\n  body: bodyObj,\n  footer: footerObj,\n  action: actionObj,\n  type: \"list\",\n  to: remoteJid\n};\n\n// Retornar el mensaje final en el formato que espera n8n\nreturn [{\n  json: requestBody,\n  pairedItem: 0\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        80
      ],
      "id": "2da1d5a4-b775-44f5-8130-195fee697e1b",
      "name": "Lista1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "summary, start, end, location, colorId, description, id",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1460,
        -20
      ],
      "id": "17ab3e84-17d0-4733-8ecb-879d58ae6930",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b272870f-2db7-43e9-b82f-131ed3160b38",
              "leftValue": "={{ $json.resultados[0].horariosDisponibles }}",
              "rightValue": "=",
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1020,
        -20
      ],
      "id": "15f7b69e-b6b4-4bb1-abba-cc52525be075",
      "name": "If3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "=No hay evento cargados para esta propiedad",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d5b2d7c9-db67-4315-9581-f35f93d32690",
      "name": "Success4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -800,
        -120
      ]
    },
    {
      "parameters": {
        "jsCode": "// 🚀 ANÁLISIS DEL CÓDIGO ORIGINAL Y MEJORAS\n\n// === LO QUE HACE EL CÓDIGO ACTUAL ===\n// 1. Busca eventos que contengan \"CODIGO:XXXXX\" en el summary\n// 2. Los trata como eventos disponibles (colorId 10)\n// 3. Divide cada evento en bloques de 30 minutos\n// 4. Devuelve los horarios disponibles\n\n// === CÓDIGO MEJORADO CON TIEMPO DINÁMICO ===\n\nconsole.log(\"=== GENERADOR DE HORARIOS DISPONIBLES ===\");\n\n// 🚀 Leer datos de entrada\nconst eventos = $input.all();\nconst codigoBusqueda = $('Code').first().json.ultimoCodigo?.toUpperCase();\nconst tiempoReserva = $('Datos de la propiedad').first().json.Tiempo; // ⭐ NUEVA VARIABLE\n\nconsole.log(\"Código a buscar:\", codigoBusqueda);\nconsole.log(\"Tiempo de reserva original:\", tiempoReserva);\n\n// Validar datos de entrada\nif (!codigoBusqueda) {\n    console.log(\"❌ No se proporcionó código de búsqueda\");\n    return [{\n        json: {\n            error: true,\n            message: \"No se proporcionó código de búsqueda\"\n        }\n    }];\n}\n\nif (!tiempoReserva) {\n    console.log(\"❌ No se proporcionó tiempo de reserva\");\n    return [{\n        json: {\n            error: true,\n            message: \"No se proporcionó tiempo de reserva\"\n        }\n    }];\n}\n\n// 🚀 PARSEAR EL TIEMPO CORRECTAMENTE (ej: \"1hs\" = 60min, \"30min\" = 30min)\nconst parsearTiempo = (tiempoStr) => {\n    if (!tiempoStr || typeof tiempoStr !== 'string') {\n        return null;\n    }\n    \n    const tiempoLower = tiempoStr.toLowerCase().trim();\n    console.log(\"Parseando tiempo:\", tiempoLower);\n    \n    // Buscar patrones como \"1hs\", \"2hs\", \"30min\", \"45min\", etc.\n    if (tiempoLower.includes('hs') || tiempoLower.includes('hora')) {\n        // Extraer número de horas\n        const horasMatch = tiempoLower.match(/(\\d+(?:\\.\\d+)?)\\s*(?:hs|hora)/);\n        if (horasMatch) {\n            const horas = parseFloat(horasMatch[1]);\n            const minutos = horas * 60;\n            console.log(`${horas} horas = ${minutos} minutos`);\n            return minutos;\n        }\n    } else if (tiempoLower.includes('min')) {\n        // Extraer número de minutos\n        const minutosMatch = tiempoLower.match(/(\\d+(?:\\.\\d+)?)\\s*min/);\n        if (minutosMatch) {\n            const minutos = parseFloat(minutosMatch[1]);\n            console.log(`${minutos} minutos`);\n            return minutos;\n        }\n    } else {\n        // Intentar parsear como número directo (asumir minutos)\n        const numero = parseFloat(tiempoLower);\n        if (!isNaN(numero)) {\n            console.log(`Número directo: ${numero} (asumiendo minutos)`);\n            return numero;\n        }\n    }\n    \n    return null;\n};\n\nconst tiempoReservaMin = parsearTiempo(tiempoReserva);\n\nif (tiempoReservaMin === null || tiempoReservaMin <= 0) {\n    console.log(\"❌ No se pudo parsear el tiempo de reserva:\", tiempoReserva);\n    return [{\n        json: {\n            error: true,\n            message: `Formato de tiempo inválido: \"${tiempoReserva}\". Use formatos como \"1hs\", \"30min\", etc.`\n        }\n    }];\n}\n\nconsole.log(\"Tiempo de reserva convertido:\", tiempoReservaMin, \"minutos\");\n\n// ⭐ CONTAR EVENTOS ROJOS BASÁNDOSE EN colorId\nlet eventosRojosData = [];\nlet contadorEventosRojos = 0;\n\ntry {\n    console.log(\"\\n🔍 Analizando todos los eventos para encontrar eventos rojos (colorId = 11)...\");\n    \n    // Recorrer todos los eventos de entrada para encontrar los rojos\n    eventos.forEach((item, index) => {\n        const evento = item.json;\n        \n        // Verificar si es un evento rojo (colorId = 11)\n        const esEventoRojo = evento.colorId === 11 || evento.colorId === \"11\";\n        \n        console.log(`Evento ${index + 1}: colorId = ${evento.colorId}, ¿Es rojo? ${esEventoRojo}`);\n        \n        if (esEventoRojo) {\n            // Filtrar eventos que no tienen fechas válidas\n            const start = evento.start?.dateTime || evento.start?.date || evento.start;\n            const end = evento.end?.dateTime || evento.end?.date || evento.end;\n            \n            if (start && end && \n                start !== \"America/Argentina/Buenos_Aires\" && \n                end !== \"America/Argentina/Buenos_Aires\") {\n                \n                eventosRojosData.push(evento);\n                contadorEventosRojos++;\n                \n                console.log(`✅ Evento rojo válido encontrado: ${evento.summary || 'Sin título'}`);\n            } else {\n                console.log(`❌ Evento rojo descartado por fechas inválidas`);\n            }\n        }\n    });\n    \n    console.log(`📊 Total eventos rojos encontrados: ${contadorEventosRojos}`);\n    \n} catch (error) {\n    console.log(\"⚠️ Error al analizar eventos rojos:\", error.message);\n    eventosRojosData = [];\n    contadorEventosRojos = 0;\n}\n\nconsole.log(\"Eventos rojos encontrados:\", contadorEventosRojos);\nconsole.log(\"Datos de eventos rojos:\", eventosRojosData);\n\n// 🚀 Funciones auxiliares mejoradas\nconst extraerMinutos = (isoString) => {\n    if (!isoString) return null;\n    try {\n        console.log(\"Extrayendo minutos de:\", isoString);\n        \n        // PROBLEMA: JavaScript convierte automáticamente a timezone local\n        // Necesitamos extraer la hora directamente del string ISO\n        \n        // Buscar el patrón de hora en el string ISO: YYYY-MM-DDTHH:MM:SS\n        const horaMatch = isoString.match(/T(\\d{2}):(\\d{2}):(\\d{2})/);\n        \n        if (horaMatch) {\n            const horas = parseInt(horaMatch[1]);\n            const minutos = parseInt(horaMatch[2]);\n            const totalMinutos = horas * 60 + minutos;\n            \n            console.log(`Hora extraída directamente: ${horas}:${minutos.toString().padStart(2, '0')} = ${totalMinutos} minutos`);\n            return totalMinutos;\n        }\n        \n        // Fallback: usar Date object (puede tener problemas de timezone)\n        const fecha = new Date(isoString);\n        const totalMinutosFallback = fecha.getHours() * 60 + fecha.getMinutes();\n        console.log(`Fallback con Date object: ${fecha.getHours()}:${fecha.getMinutes()} = ${totalMinutosFallback} minutos`);\n        console.log(`Fecha completa: ${fecha.toString()}`);\n        \n        return totalMinutosFallback;\n    } catch (error) {\n        console.log(\"Error parseando fecha:\", isoString, error);\n        return null;\n    }\n};\n\nconst minutosAHora = (totalMinutos) => {\n    const horas = Math.floor(totalMinutos / 60);\n    const minutos = totalMinutos % 60;\n    return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`;\n};\n\nconst crearFechaISO = (fechaBase, horaStr) => {\n    try {\n        console.log(\"Creando fecha ISO con:\");\n        console.log(\"- fechaBase:\", fechaBase);\n        console.log(\"- horaStr:\", horaStr);\n        \n        // Extraer la parte de fecha (YYYY-MM-DD) y timezone del string original\n        const fechaMatch = fechaBase.match(/^(\\d{4}-\\d{2}-\\d{2})T.*?([-+]\\d{2}:\\d{2})$/);\n        \n        if (fechaMatch) {\n            const fechaParte = fechaMatch[1]; // 2025-05-30\n            const timezone = fechaMatch[2]; // -03:00\n            \n            // Crear nueva fecha manteniendo la timezone original\n            const nuevaFechaISO = `${fechaParte}T${horaStr}:00${timezone}`;\n            console.log(\"Nueva fecha ISO creada:\", nuevaFechaISO);\n            \n            return nuevaFechaISO;\n        }\n        \n        // Fallback: reemplazar solo la parte de hora\n        const fechaModificada = fechaBase.replace(/T\\d{2}:\\d{2}/, `T${horaStr}`);\n        console.log(\"Fecha modificada (fallback):\", fechaModificada);\n        \n        return fechaModificada;\n    } catch (error) {\n        console.log(\"Error creando fecha ISO:\", fechaBase, horaStr, error);\n        return fechaBase;\n    }\n};\n\n// 🚀 Recolectar eventos válidos\nconsole.log(\"\\n--- BUSCANDO EVENTOS ---\");\nconst eventosDisponibles = [];\n\nfor (const item of eventos) {\n    const ev = item.json;\n    const start = ev.start?.dateTime || ev.start?.date || ev.start;\n    const end = ev.end?.dateTime || ev.end?.date || ev.end;\n    \n    // Filtrar elementos que no tienen fecha válida\n    if (!start || !end || \n        start === \"America/Argentina/Buenos_Aires\" || \n        end === \"America/Argentina/Buenos_Aires\") {\n        console.log(\"⏭️ Saltando evento sin fechas válidas\");\n        continue;\n    }\n    \n    const summary = ev.summary || \"\";\n    \n    // Buscar si summary contiene \"Codigo:XXXXX\"\n    const summaryUpper = summary.toUpperCase();\n    const patronBusqueda = \"CODIGO:\" + codigoBusqueda;\n    const coincide = summaryUpper.includes(patronBusqueda);\n    \n    console.log(`📅 Evento: \"${summary}\"`);\n    console.log(`🔍 Buscando: \"${patronBusqueda}\"`);\n    console.log(`✅ ¿Coincide? ${coincide}`);\n    \n    if (coincide) {\n        // Validar que las fechas se puedan parsear\n        const fechaInicio = new Date(start);\n        const fechaFin = new Date(end);\n        \n        if (isNaN(fechaInicio.getTime()) || isNaN(fechaFin.getTime())) {\n            console.log(\"❌ Fechas inválidas en evento:\", start, end);\n            continue;\n        }\n        \n        eventosDisponibles.push({ \n            start, \n            end, \n            summary, \n            location: ev.location || \"\",\n            colorId: \"10\",\n            fechaInicioParsed: fechaInicio.toISOString(),\n            fechaFinParsed: fechaFin.toISOString()\n        });\n        \n        console.log(\"✅ Evento agregado a disponibles\");\n    }\n}\n\nconsole.log(`\\n📊 Total eventos disponibles encontrados: ${eventosDisponibles.length}`);\n\n// 🚀 Procesar eventos rojos (visitas agendadas) para exclusión\nconsole.log(\"\\n--- PROCESANDO EVENTOS ROJOS (OCUPADOS) ---\");\nconst bloquesOcupados = [];\n\n// Validar que hay eventos rojos para procesar\nif (contadorEventosRojos === 0) {\n    console.log(\"ℹ️ No hay eventos rojos (colorId = 11) para procesar. Todos los horarios estarán disponibles.\");\n} else {\n    console.log(`✅ ${contadorEventosRojos} eventos rojos encontrados, procesando exclusiones...`);\n\n    // Procesar cada evento rojo encontrado\n    eventosRojosData.forEach((eventoRojo, index) => {\n        console.log(`\\n🔴 Procesando evento rojo ${index + 1}:`);\n        console.log(\"ColorId:\", eventoRojo.colorId);\n        console.log(\"Summary:\", eventoRojo.summary || \"Sin título\");\n        console.log(\"Evento completo:\", JSON.stringify(eventoRojo, null, 2));\n        \n        // Extraer fechas del evento rojo\n        let fechaInicioRojo, fechaFinRojo;\n        \n        if (eventoRojo.start && eventoRojo.start.dateTime) {\n            fechaInicioRojo = eventoRojo.start.dateTime;\n        } else if (eventoRojo.start) {\n            fechaInicioRojo = eventoRojo.start;\n        }\n        \n        if (eventoRojo.end && eventoRojo.end.dateTime) {\n            fechaFinRojo = eventoRojo.end.dateTime;\n        } else if (eventoRojo.end) {\n            fechaFinRojo = eventoRojo.end;\n        }\n        \n        if (fechaInicioRojo && fechaFinRojo) {\n            const inicioMin = extraerMinutos(fechaInicioRojo);\n            const finMin = extraerMinutos(fechaFinRojo);\n            \n            if (inicioMin !== null && finMin !== null) {\n                // Extraer fecha base (YYYY-MM-DD) para comparar con eventos disponibles\n                const fechaBaseMatch = fechaInicioRojo.match(/^(\\d{4}-\\d{2}-\\d{2})/);\n                const fechaBase = fechaBaseMatch ? fechaBaseMatch[1] : null;\n                \n                const bloqueOcupado = {\n                    fechaBase: fechaBase,\n                    inicioMin: inicioMin,\n                    finMin: finMin,\n                    fechaInicioCompleta: fechaInicioRojo,\n                    fechaFinCompleta: fechaFinRojo,\n                    summary: eventoRojo.summary || \"Visita agendada\",\n                    colorId: eventoRojo.colorId\n                };\n                \n                bloquesOcupados.push(bloqueOcupado);\n                \n                console.log(`✅ Bloque ocupado: ${fechaBase} de ${minutosAHora(inicioMin)} a ${minutosAHora(finMin)} (${eventoRojo.summary || 'Sin título'})`);\n            } else {\n                console.log(\"❌ No se pudieron extraer minutos del evento rojo\");\n            }\n        } else {\n            console.log(\"❌ No se pudieron extraer fechas del evento rojo\");\n        }\n    });\n}\n\nconsole.log(`\\n📋 Total bloques ocupados: ${bloquesOcupados.length}`);\n\n// Función para verificar si un bloque está ocupado\nconst estaOcupado = (fechaBase, inicioMin, finMin) => {\n    return bloquesOcupados.some(ocupado => {\n        // Debe ser la misma fecha\n        if (ocupado.fechaBase !== fechaBase) return false;\n        \n        // Verificar superposición de tiempo:\n        // Un bloque está ocupado si hay ANY superposición con un evento rojo\n        const haySuperpocision = (\n            // El nuevo bloque empieza antes de que termine el ocupado Y\n            inicioMin < ocupado.finMin &&\n            // El nuevo bloque termina después de que empiece el ocupado\n            finMin > ocupado.inicioMin\n        );\n        \n        if (haySuperpocision) {\n            console.log(`❌ Bloque ${minutosAHora(inicioMin)}-${minutosAHora(finMin)} ocupado por: ${ocupado.summary}`);\n        }\n        \n        return haySuperpocision;\n    });\n};\n\n// 🚀 Si no hay eventos disponibles\nif (eventosDisponibles.length === 0) {\n    return [{\n        json: {\n            noMatchingEvents: true,\n            message: `No se encontraron eventos disponibles para el código: ${codigoBusqueda}`,\n            debug: {\n                codigoBuscado: codigoBusqueda,\n                patronBusqueda: \"CODIGO:\" + codigoBusqueda,\n                totalEventosAnalizados: eventos.length\n            }\n        }\n    }];\n}\n\n// 🚀 Procesar horarios disponibles con tiempo dinámico\nconsole.log(`\\n--- GENERANDO BLOQUES DE ${tiempoReservaMin} MINUTOS ---`);\n\nconst resultados = eventosDisponibles.map((evento, index) => {\n    console.log(`\\n🏗️ Procesando evento ${index + 1}: \"${evento.summary}\"`);\n    \n    const inicioEventoMin = extraerMinutos(evento.start);\n    const finEventoMin = extraerMinutos(evento.end);\n    \n    if (inicioEventoMin === null || finEventoMin === null) {\n        console.log(\"❌ No se pudieron extraer minutos del evento\");\n        return {\n            eventoPrincipal: {\n                resumen: evento.summary,\n                location: evento.location,\n                inicio: evento.start,\n                fin: evento.end,\n                colorId: \"10\",\n                error: \"No se pudieron procesar las horas\"\n            },\n            horariosDisponibles: []\n        };\n    }\n    \n    console.log(`⏰ Evento de ${minutosAHora(inicioEventoMin)} a ${minutosAHora(finEventoMin)}`);\n    console.log(`📏 Duración total: ${finEventoMin - inicioEventoMin} minutos`);\n    \n    // Crear bloques basados en el tiempo de reserva\n    const bloques = [];\n    let bloquesGenerados = 0;\n    let bloquesExcluidos = 0;\n    \n    // Extraer fecha base del evento para comparar con eventos rojos\n    const fechaBaseEvento = evento.start.match(/^(\\d{4}-\\d{2}-\\d{2})/);\n    const fechaBase = fechaBaseEvento ? fechaBaseEvento[1] : null;\n    \n    for (let m = inicioEventoMin; m + tiempoReservaMin <= finEventoMin; m += tiempoReservaMin) {\n        const horaInicio = minutosAHora(m);\n        const horaFin = minutosAHora(m + tiempoReservaMin);\n        \n        // ⭐ VERIFICAR SI ESTE BLOQUE ESTÁ OCUPADO\n        const bloqueOcupado = estaOcupado(fechaBase, m, m + tiempoReservaMin);\n        \n        if (bloqueOcupado) {\n            bloquesExcluidos++;\n            console.log(`  ❌ Bloque ${horaInicio} - ${horaFin} EXCLUIDO (ocupado)`);\n            continue; // Saltar este bloque\n        }\n        \n        const bloque = {\n            horaInicio: horaInicio,\n            horaFin: horaFin,\n            inicio: crearFechaISO(evento.start, horaInicio),\n            fin: crearFechaISO(evento.start, horaFin),\n            duracionMinutos: tiempoReservaMin\n        };\n        \n        bloques.push(bloque);\n        bloquesGenerados++;\n        \n        console.log(`  ✅ Bloque ${bloquesGenerados}: ${horaInicio} - ${horaFin} DISPONIBLE`);\n    }\n    \n    console.log(`✅ Total bloques disponibles: ${bloquesGenerados}`);\n    console.log(`❌ Total bloques excluidos: ${bloquesExcluidos}`);\n    \n    return {\n        eventoPrincipal: {\n            resumen: evento.summary,\n            location: evento.location,\n            inicio: evento.start,\n            fin: evento.end,\n            horaInicio: minutosAHora(inicioEventoMin),\n            horaFin: minutosAHora(finEventoMin),\n            colorId: \"10\",\n            duracionTotalMinutos: finEventoMin - inicioEventoMin,\n            tiempoReservaMinutos: tiempoReservaMin\n        },\n        horariosDisponibles: bloques,\n        estadisticas: {\n            totalBloques: bloquesGenerados,\n            bloquesExcluidos: bloquesExcluidos,\n            duracionBloque: tiempoReservaMin,\n            duracionEvento: finEventoMin - inicioEventoMin\n        }\n    };\n});\n\n// 🚀 Calcular estadísticas generales\nconst totalBloques = resultados.reduce((sum, resultado) => sum + resultado.horariosDisponibles.length, 0);\nconst totalExcluidos = resultados.reduce((sum, resultado) => sum + (resultado.estadisticas?.bloquesExcluidos || 0), 0);\n\nconsole.log(`\\n📈 RESUMEN FINAL:`);\nconsole.log(`- Eventos disponibles: ${eventosDisponibles.length}`);\nconsole.log(`- Total bloques de tiempo DISPONIBLES: ${totalBloques}`);\nconsole.log(`- Total bloques EXCLUIDOS (ocupados): ${totalExcluidos}`);\nconsole.log(`- Duración por bloque: ${tiempoReservaMin} minutos`);\nconsole.log(`- Eventos rojos (colorId=11) encontrados: ${contadorEventosRojos}`);\n\n// 🚀 Devolver la respuesta\nreturn [{\n    json: {\n        resultados: resultados,\n        resumen: {\n            codigoBuscado: codigoBusqueda,\n            tiempoReservaMinutos: tiempoReservaMin,\n            eventosEncontrados: eventosDisponibles.length,\n            totalBloquesDisponibles: totalBloques,\n            totalBloquesExcluidos: totalExcluidos,\n            eventosRojosEncontrados: contadorEventosRojos\n        }\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1240,
        -20
      ],
      "id": "0d444a0d-f4b3-42dc-a66e-24c6cc1b8515",
      "name": "getForCode2"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vxULMw6IdEF03hfs2a-svqJUTEuSWbW5wVUQkk88eU4",
          "mode": "list",
          "cachedResultName": "Cliente:00_urls_francisco",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vxULMw6IdEF03hfs2a-svqJUTEuSWbW5wVUQkk88eU4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Hoja 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vxULMw6IdEF03hfs2a-svqJUTEuSWbW5wVUQkk88eU4/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "CODIGO",
              "lookupValue": "={{ $('Code').first().json.ultimoCodigo }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -1880,
        -20
      ],
      "id": "2e1d6fcc-e7d6-475c-9447-ededc9763e21",
      "name": "Datos de la propiedad",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "lRj57XPEqOXW9kOd",
          "name": "Qeva Solutions Sheet"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vxULMw6IdEF03hfs2a-svqJUTEuSWbW5wVUQkk88eU4",
          "mode": "list",
          "cachedResultName": "Cliente:00_urls_francisco",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vxULMw6IdEF03hfs2a-svqJUTEuSWbW5wVUQkk88eU4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Hoja 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vxULMw6IdEF03hfs2a-svqJUTEuSWbW5wVUQkk88eU4/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "CODIGO",
              "lookupValue": "={{ $('Code').first().json.ultimoCodigo }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -1860,
        880
      ],
      "id": "0cda5006-a4fa-4bf2-a56d-97950cc711eb",
      "name": "Datos de la propiedad1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "lRj57XPEqOXW9kOd",
          "name": "Qeva Solutions Sheet"
        }
      }
    },
    {
      "parameters": {
        "content": "## Fechas disponibles, muestra la disponiblidad de un codigo en especifico de propiedad",
        "height": 580,
        "width": 1820,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2000,
        620
      ],
      "typeVersion": 1,
      "id": "cc8a1aa4-9c6a-40de-b73f-793d7f553b60",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Reagendar visita, envia lista ",
        "height": 660,
        "width": 1840,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2020,
        -280
      ],
      "typeVersion": 1,
      "id": "de956f6a-bab0-4df2-aa74-46bf2672deb9",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/interactive",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "header",
              "value": "={{ $json.header }}"
            },
            {
              "name": "body",
              "value": "={{ $json.body }}"
            },
            {
              "name": "footer",
              "value": "={{ $json.footer }}"
            },
            {
              "name": "action",
              "value": "={{ $json.action }}"
            },
            {
              "name": "type",
              "value": "={{ $json.type }}"
            },
            {
              "name": "to",
              "value": "={{ $('Calendario').first().json.numero_telefono }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        980
      ],
      "id": "5e91d3af-eec5-4e6f-9113-28487ddd1f09",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/interactive",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "header",
              "value": "={{ $json.header }}"
            },
            {
              "name": "body",
              "value": "={{ $json.body }}"
            },
            {
              "name": "footer",
              "value": "={{ $json.footer }}"
            },
            {
              "name": "action",
              "value": "={{ $json.action }}"
            },
            {
              "name": "type",
              "value": "={{ $json.type }}"
            },
            {
              "name": "to",
              "value": "={{ $('Calendario').first().json.numero_telefono }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -580,
        80
      ],
      "id": "0bcb1e55-844d-4f8b-94ec-e042ad97d324",
      "name": "HTTP Request4"
    }
  ],
  "pinData": {
    "Calendario": [
      {
        "json": {
          "Evento": "reagendar",
          "numero_telefono": "5492254423359"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Argentina/Buenos_Aires",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "2kOn0Oz7c2uvczPK"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-03-23T17:49:20.946Z",
      "updatedAt": "2025-03-23T17:49:20.946Z",
      "id": "UdWAGpsQzroykED6",
      "name": "AGENTES INMO"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-05-30T00:30:27.627Z",
  "versionId": "1c2dede4-52b8-4f18-a1ff-630f6a90dfc4"
}