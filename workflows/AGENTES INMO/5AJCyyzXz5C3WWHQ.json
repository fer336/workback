{
  "active": false,
  "connections": {
    "Calendario": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response null Codigo1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Success1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lista": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getForCode": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "getForCode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Success2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Lista",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Google Calendar1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar1": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Success3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lista1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getForCode1": {
      "main": [
        []
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "getForCode2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Success4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Lista1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getForCode2": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-29T19:14:29.563Z",
  "id": "5AJCyyzXz5C3WWHQ",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "AGENTE INMO - Consultar_fechas_disponibles",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "Evento"
            },
            {
              "name": "session_id"
            },
            {
              "name": "url_evo"
            },
            {
              "name": "instance"
            },
            {
              "name": "apikey"
            },
            {
              "name": "numero_telefono"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -3180,
        440
      ],
      "id": "6e4f3631-32d6-4a84-a3a3-404bc5d1312a",
      "name": "Calendario"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Codigo_propiedad",
        "key": "=propiedades_historial_analisis",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2960,
        440
      ],
      "id": "db279666-f2af-4220-943f-335f44a78abc",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "JMklVOvkU7koL2UG",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c358838a-4034-4100-a5cd-e89f533161b0",
              "leftValue": "={{ $json.ultimoCodigo }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2520,
        440
      ],
      "id": "3ff701f4-a965-4679-a55b-899ceded888b",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ef619c87-8996-4278-805f-187d5e1e672a",
              "name": "response",
              "value": "Codigo propiedad vacio",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2320,
        700
      ],
      "id": "b7e17bdc-0386-4846-a29f-c7424c903213",
      "name": "Response null Codigo1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "004dfd8dfad8cab59884aa5afbe99b4943ba96c971d4eb480405c7595b8160b1@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Francisco"
        },
        "returnAll": true,
        "timeMax": "={{ $now.plus({ week: 2 }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -2080,
        540
      ],
      "id": "305f5c1a-e231-4f10-983e-d3054fd5250b",
      "name": "Google Calendar",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "248CSUaxOr8MEWUN",
          "name": "Google Calendar account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Calendario').first().json.url_evo }}/message/sendList/{{ $('Calendario').first().json.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Calendario').first().json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Calendario').first().json.numero_telefono }}"
            },
            {
              "name": "title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "description",
              "value": "={{ $json.description }}"
            },
            {
              "name": "buttonText",
              "value": "={{ $json.buttonText }}"
            },
            {
              "name": "footerText",
              "value": "="
            },
            {
              "name": "sections",
              "value": "={{ $json.sections }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -980,
        640
      ],
      "id": "a36506e8-1dd9-4450-ae36-0d7af61dfcaa",
      "name": "HTTP Request2",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "=true",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "bc06c8aa-a328-446d-8949-60271387df59",
      "name": "Success1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -760,
        640
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del nodo anterior\nconst datos = $input.first()?.json?.resultados || [];\nconsole.log(\"DEBUG - Datos recibidos:\", JSON.stringify(datos).substring(0, 200) + \"...\");\n\n// Verificar si tenemos datos\nif (!datos || !datos.length) {\n  console.log(\"DEBUG - No hay datos disponibles\");\n  return [{\n    json: {\n      error: \"No se encontraron eventos\",\n      message: \"El nodo anterior no devolvió ningún horario disponible\"\n    },\n    pairedItem: 0\n  }];\n}\n\n// Función para obtener el emoji estacional según el mes (hemisferio sur)\nfunction getEmojiEstacional(mes) {\n  if (mes >= 3 && mes <= 5) return \"🍂\"; // Otoño\n  if (mes >= 6 && mes <= 8) return \"❄️\"; // Invierno\n  if (mes >= 9 && mes <= 11) return \"🌸\"; // Primavera\n  return \"☀️\"; // Verano\n}\n\n// Nombres de los meses\nconst nombresMeses = {\n  1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril',\n  5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto',\n  9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'\n};\n\n// Nombres de los días de la semana\nconst nombresDias = {\n  0: 'Domingo',\n  1: 'Lunes',\n  2: 'Martes',\n  3: 'Miércoles',\n  4: 'Jueves',\n  5: 'Viernes',\n  6: 'Sábado'\n};\n\n// Extraer fecha de una cadena ISO\nfunction extraerFechaYHora(isoString) {\n  if (!isoString) return null;\n  \n  const match = isoString.match(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2})/);\n  if (match) {\n    const fechaCompleta = new Date(`${match[1]}-${match[2]}-${match[3]}T${match[4]}:${match[5]}:00`);\n    const diaSemana = nombresDias[fechaCompleta.getDay()];\n    \n    return {\n      anio: parseInt(match[1], 10),\n      mes: parseInt(match[2], 10),\n      dia: parseInt(match[3], 10),\n      hora: `${match[4]}:${match[5]}`,\n      fechaCompleta: fechaCompleta,\n      diaSemana: diaSemana\n    };\n  }\n  return null;\n}\n\n// Función para formatear el rango de hora correctamente (12:00 a 12:30)\nfunction formatearRangoHora(horaInicio, horaFin) {\n  // Extraer horas y minutos de ambos horarios\n  const inicioMatch = horaInicio.match(/^(\\d+):(\\d+)/);\n  const finMatch = horaFin.match(/^(\\d+):(\\d+)/);\n  \n  // Formatear correctamente con horas y minutos\n  const horaInicioFormateada = inicioMatch ? `${inicioMatch[1]}:${inicioMatch[2]}` : horaInicio;\n  const horaFinFormateada = finMatch ? `${finMatch[1]}:${finMatch[2]}` : horaFin;\n  \n  return `${horaInicioFormateada} a ${horaFinFormateada}`;\n}\n\n// Obtener la fecha y hora actual\nconst ahora = new Date();\nconsole.log(`DEBUG - Fecha actual: ${ahora.toISOString()}`);\nconsole.log(`DEBUG - Fecha local: ${ahora.toString()}`);\n\n// Agrupar horarios por mes y día\nconst mesesAgrupados = {};\n\n// Procesar los horarios disponibles de todos los eventos\ndatos.forEach(evento => {\n  if (!evento.horariosDisponibles || !evento.horariosDisponibles.length) return;\n  \n  evento.horariosDisponibles.forEach(horario => {\n    try {\n      // Obtener la fecha de inicio del horario\n      const fechaHorario = new Date(horario.inicio);\n      \n      // Para debug\n      console.log(`DEBUG - Evaluando horario: ${horario.inicio}`);\n      \n      // COMPARACIÓN SIMPLE: Verificar si la fecha ya pasó\n      if (fechaHorario <= ahora) {\n        console.log(`DEBUG - FILTRADA: Fecha ya pasó`);\n        return; // Saltar este horario porque ya pasó\n      }\n      \n      // Extraer componentes de la fecha para agrupar\n      const fechaInicio = extraerFechaYHora(horario.inicio);\n      if (!fechaInicio) {\n        console.log(`DEBUG - Error al extraer fecha y hora de: ${horario.inicio}`);\n        return;\n      }\n      \n      const mes = fechaInicio.mes;\n      const dia = fechaInicio.dia;\n      const nombreMes = nombresMeses[mes];\n      const diaSemana = fechaInicio.diaSemana;\n      \n      // Inicializar el grupo del mes si no existe\n      if (!mesesAgrupados[nombreMes]) {\n        mesesAgrupados[nombreMes] = {\n          mes: mes,\n          fechas: []\n        };\n      }\n      \n      // Evitar duplicados\n      const yaExiste = mesesAgrupados[nombreMes].fechas.some(\n        e => e.dia === dia && e.horaInicio === horario.horaInicio\n      );\n      \n      if (!yaExiste) {\n        mesesAgrupados[nombreMes].fechas.push({\n          dia,\n          horaInicio: horario.horaInicio,\n          horaFin: horario.horaFin,\n          mes,\n          diaSemana,\n          resumen: evento.eventoPrincipal.resumen,\n          rowId: `${mes}-${dia}-${horario.horaInicio.replace(\":\", \"\")}`\n        });\n      }\n    } catch (error) {\n      console.log(`ERROR procesando horario: ${error.message}`);\n    }\n  });\n});\n\n// Armar la estructura para WhatsApp SendList\nconst sections = [];\n\n// Crear una sección para cada mes\nfor (const [nombreMes, datosMes] of Object.entries(mesesAgrupados)) {\n  const filas = datosMes.fechas;\n  if (filas.length === 0) continue;\n  \n  // Obtener el emoji estacional para este mes\n  const emoji = getEmojiEstacional(datosMes.mes);\n  \n  // Ordenar filas por día y hora\n  filas.sort((a, b) => {\n    if (a.dia !== b.dia) return a.dia - b.dia;\n    return a.horaInicio.localeCompare(b.horaInicio);\n  });\n  \n  const rowsDelMes = [];\n  filas.forEach(f => {\n    const horaFormateada = formatearRangoHora(f.horaInicio, f.horaFin);\n    rowsDelMes.push({\n      title: `🕒 ${f.dia} de ${nombreMes} : ${horaFormateada}`,\n      description: `${f.diaSemana}`,\n      rowId: f.rowId\n    });\n  });\n  \n  // Agregar la sección del mes con el emoji estacional\n  if (rowsDelMes.length > 0) {\n    sections.push({\n      title: `${emoji} ${nombreMes}`,\n      rows: rowsDelMes\n    });\n  }\n}\n\n// Sección por defecto si no hay nada\nif (sections.length === 0) {\n  sections.push({\n    title: \"⚠️ Sin horarios disponibles\",\n    rows: [{\n      title: \"No hay horarios disponibles\",\n      description: \"Intenta más tarde\",\n      rowId: \"no-disponible\"\n    }]\n  });\n}\n\n// Obtener número de cliente desde otro nodo o poner uno por defecto\nconst remoteJid = $('Calendario').first().json.numero_cliente;\n\n// JSON final para enviar por WhatsApp\nconst requestBody = {\n  number: remoteJid,\n  title: \"📅 Fechas Disponibles\",\n  description: \"Seleccioná una fecha y hora para agendar tu visita\\n🕒 Cada visita tiene una duración de 30 minutos aprox.\",\n  buttonText: \"Seleccioná 👆\",\n  footerText: \"\", // Ya incluimos la información de duración en la descripción\n  sections\n};\n\n// Retornar el mensaje final en el formato que espera n8n\nreturn [{\n  json: requestBody,\n  pairedItem: 0 // Agregamos pairedItem para mantener el enlace con el elemento de entrada\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1200,
        640
      ],
      "id": "ae9a13fb-b9b6-4237-ae12-338898fce69e",
      "name": "Lista"
    },
    {
      "parameters": {
        "jsCode": "// Código para obtener el último código de propiedad\n// Obtenemos todos los ítems de Redis\nconst redisItems =$input.first().json.Codigo_propiedad ;\n\n// Verificamos si existe la propiedad y es un array\nif (!Array.isArray(redisItems)) {\n  console.log(\"Error: No se encontró un array de códigos de propiedad\");\n  return $input.all();\n}\n\n// Obtenemos el último elemento del array\nconst ultimoCodigo = redisItems[redisItems.length - 1];\nconsole.log(\"Último código de propiedad:\", ultimoCodigo);\n\n// Añadimos el último código a todos los ítems de entrada\nconst items = $input.all();\nfor (const item of items) {\n  item.json.ultimoCodigo = ultimoCodigo;\n}\n\n// Devolvemos los ítems con el nuevo campo\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2740,
        440
      ],
      "id": "d714ca80-98fb-4845-8cb3-d7bf383ec8f1",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// 🚀 Leer todos los eventos\nconst eventos = $input.all();\nconst codigoBusqueda = $('Code').first().json.ultimoCodigo?.toUpperCase();\n\n// Agregar logs para depuración\nconsole.log(\"Código a buscar:\", codigoBusqueda);\n\n// 🚀 Funciones auxiliares\nconst extraerMinutos = (isoString) => {\n  if (!isoString) return null;\n  const hora = isoString.substring(11,16).split(':');\n  return parseInt(hora[0]) * 60 + parseInt(hora[1]);\n};\n\nconst minutosAHora = (totalMinutos) => {\n  const horas = Math.floor(totalMinutos / 60);\n  const minutos = totalMinutos % 60;\n  return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`;\n};\n\nconst crearFechaISO = (fechaBase, horaStr) => {\n  return fechaBase.substring(0, 11) + horaStr + fechaBase.substring(16);\n};\n\n// 🚀 Recolectar eventos válidos (asumiendo que todos son colorID 10)\nconst eventosColorID10 = [];\nconst eventosRojos = []; // Mantenemos esta estructura vacía por ahora\n\nfor (const item of eventos) {\n  const ev = item.json;\n  const start = ev.start?.dateTime || ev.start?.date || ev.start;\n  const end = ev.end?.dateTime || ev.end?.date || ev.end;\n  \n  // Filtrar elementos que no tienen fecha o tienen solo zona horaria\n  if (!start || !end || \n      start === \"America/Argentina/Buenos_Aires\" || \n      end === \"America/Argentina/Buenos_Aires\") continue;\n  \n  const summary = ev.summary || \"\";\n  \n  // Buscar si summary contiene \"Codigo:XXXXX\"\n  const summaryUpper = summary.toUpperCase();\n  const patronBusqueda = \"CODIGO:\" + codigoBusqueda;\n  const coincide = summaryUpper.includes(patronBusqueda);\n  \n  // Log para depuración\n  console.log(\"Evaluando evento:\", summary);\n  console.log(\"Patrón buscado:\", patronBusqueda);\n  console.log(\"¿Coincide?\", coincide);\n  \n  // Si coincide, añadirlo a eventos con colorID 10\n  if (coincide) {\n    // Simulamos que tiene colorID 10\n    eventosColorID10.push({ \n      start, \n      end, \n      summary, \n      location: ev.location || \"\",\n      colorId: \"10\" // Asignamos explícitamente colorID 10\n    });\n  }\n}\n\n// 🚀 Si no hay eventos colorID 10, devolver mensaje\nif (eventosColorID10.length === 0) {\n  return [{\n    json: {\n      noMatchingEvents: true,\n      message: \"No se encontraron eventos disponibles para la propiedad.\"\n    }\n  }];\n}\n\n// 🚀 Procesar horarios disponibles\nconst resultados = eventosColorID10.map(evento => {\n  const inicioEventoMin = extraerMinutos(evento.start);\n  const finEventoMin = extraerMinutos(evento.end);\n  \n  // Creamos bloques de 30 minutos para todo el evento\n  const bloques = [];\n  for (let m = inicioEventoMin; m + 30 <= finEventoMin; m += 30) {\n    const horaInicio = minutosAHora(m);\n    const horaFin = minutosAHora(m + 30);\n    bloques.push({\n      horaInicio: horaInicio,\n      horaFin: horaFin,\n      inicio: crearFechaISO(evento.start, horaInicio),\n      fin: crearFechaISO(evento.start, horaFin)\n    });\n  }\n  \n  return {\n    eventoPrincipal: {\n      resumen: evento.summary,\n      location: evento.location,\n      inicio: evento.start,\n      fin: evento.end,\n      horaInicio: minutosAHora(inicioEventoMin),\n      horaFin: minutosAHora(finEventoMin),\n      colorId: \"10\" // Incluir colorId en la respuesta\n    },\n    horariosDisponibles: bloques\n  };\n});\n\n// 🚀 Devolver la respuesta\nreturn [{\n  json: {\n    resultados: resultados\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1640,
        540
      ],
      "id": "e8ad3a77-dca2-4e50-a840-1fbd4f3a5187",
      "name": "getForCode"
    },
    {
      "parameters": {
        "fieldToSplitOut": "summary, start, end, location, colorId, description, id",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1860,
        540
      ],
      "id": "5bdf6fd1-d1b3-42b4-8ca8-ffb7aaba17cb",
      "name": "Split Out"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b272870f-2db7-43e9-b82f-131ed3160b38",
              "leftValue": "={{ $json.message }}",
              "rightValue": "=No se encontraron eventos disponibles para la propiedad.",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1420,
        540
      ],
      "id": "f29796f5-987b-4b1b-a419-448eb760e7c8",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "=No hay evento cargados para esta propiedad",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "956ea19e-b07d-4eea-894c-0da963c65220",
      "name": "Success2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1200,
        440
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "435d1553-cd6c-4d79-85c9-bf9b09fef4fd",
              "leftValue": "={{ $('Calendario').item.json.Evento }}",
              "rightValue": "reagendar",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2300,
        340
      ],
      "id": "04879fbb-87a8-49dc-91e7-8235bc0b09b4",
      "name": "If2"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "004dfd8dfad8cab59884aa5afbe99b4943ba96c971d4eb480405c7595b8160b1@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Francisco"
        },
        "returnAll": true,
        "timeMax": "={{ $now.plus({ week: 2 }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -2080,
        140
      ],
      "id": "9bbc5406-f79e-486e-96e7-037773d23987",
      "name": "Google Calendar1",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "248CSUaxOr8MEWUN",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Calendario').first().json.url_evo }}/message/sendList/{{ $('Calendario').first().json.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Calendario').first().json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Calendario').first().json.numero_telefono }}"
            },
            {
              "name": "title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "description",
              "value": "={{ $json.description }}"
            },
            {
              "name": "buttonText",
              "value": "={{ $json.buttonText }}"
            },
            {
              "name": "footerText",
              "value": "={{ $json.footerText }}"
            },
            {
              "name": "sections",
              "value": "={{ $json.sections }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -980,
        240
      ],
      "id": "a4ff3271-c078-4b9e-bae1-38ab121066ac",
      "name": "HTTP Request",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "=true",
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "cefd55d1-7160-46e4-a9d1-aeaf63ee6c3e",
      "name": "Success3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -760,
        240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del nodo anterior\nconst datos = $input.first()?.json?.resultados || [];\nconsole.log(\"DEBUG - Datos recibidos:\", JSON.stringify(datos).substring(0, 200) + \"...\");\n\n// Verificar si tenemos datos\nif (!datos || !datos.length) {\n  console.log(\"DEBUG - No hay datos disponibles\");\n  return [{\n    json: {\n      error: \"No se encontraron eventos\",\n      message: \"El nodo anterior no devolvió ningún horario disponible\"\n    },\n    pairedItem: 0\n  }];\n}\n\n// Función para obtener el emoji estacional según el mes (hemisferio sur)\nfunction getEmojiEstacional(mes) {\n  if (mes >= 3 && mes <= 5) return \"🍂\"; // Otoño\n  if (mes >= 6 && mes <= 8) return \"❄️\"; // Invierno\n  if (mes >= 9 && mes <= 11) return \"🌸\"; // Primavera\n  return \"☀️\"; // Verano\n}\n\n// Nombres de los meses\nconst nombresMeses = {\n  1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril',\n  5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto',\n  9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'\n};\n\n// Nombres de los días de la semana\nconst nombresDias = {\n  0: 'Domingo',\n  1: 'Lunes',\n  2: 'Martes',\n  3: 'Miércoles',\n  4: 'Jueves',\n  5: 'Viernes',\n  6: 'Sábado'\n};\n\n// Extraer fecha de una cadena ISO\nfunction extraerFechaYHora(isoString) {\n  if (!isoString) return null;\n  \n  const match = isoString.match(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2})/);\n  if (match) {\n    const fechaCompleta = new Date(`${match[1]}-${match[2]}-${match[3]}T${match[4]}:${match[5]}:00`);\n    const diaSemana = nombresDias[fechaCompleta.getDay()];\n    \n    return {\n      anio: parseInt(match[1], 10),\n      mes: parseInt(match[2], 10),\n      dia: parseInt(match[3], 10),\n      hora: `${match[4]}:${match[5]}`,\n      fechaCompleta: fechaCompleta,\n      diaSemana: diaSemana\n    };\n  }\n  return null;\n}\n\n// Función para formatear el rango de hora correctamente (12:00 a 12:30)\nfunction formatearRangoHora(horaInicio, horaFin) {\n  // Extraer horas y minutos de ambos horarios\n  const inicioMatch = horaInicio.match(/^(\\d+):(\\d+)/);\n  const finMatch = horaFin.match(/^(\\d+):(\\d+)/);\n  \n  // Formatear correctamente con horas y minutos\n  const horaInicioFormateada = inicioMatch ? `${inicioMatch[1]}:${inicioMatch[2]}` : horaInicio;\n  const horaFinFormateada = finMatch ? `${finMatch[1]}:${finMatch[2]}` : horaFin;\n  \n  return `${horaInicioFormateada} a ${horaFinFormateada}`;\n}\n\n// Obtener la fecha y hora actual\nconst ahora = new Date();\nconsole.log(`DEBUG - Fecha actual: ${ahora.toISOString()}`);\nconsole.log(`DEBUG - Fecha local: ${ahora.toString()}`);\n\n// Agrupar horarios por mes y día\nconst mesesAgrupados = {};\n\n// Procesar los horarios disponibles de todos los eventos\ndatos.forEach(evento => {\n  if (!evento.horariosDisponibles || !evento.horariosDisponibles.length) return;\n  \n  evento.horariosDisponibles.forEach(horario => {\n    try {\n      // Obtener la fecha de inicio del horario\n      const fechaHorario = new Date(horario.inicio);\n      \n      // Para debug\n      console.log(`DEBUG - Evaluando horario: ${horario.inicio}`);\n      \n      // COMPARACIÓN SIMPLE: Verificar si la fecha ya pasó\n      if (fechaHorario <= ahora) {\n        console.log(`DEBUG - FILTRADA: Fecha ya pasó`);\n        return; // Saltar este horario porque ya pasó\n      }\n      \n      // Extraer componentes de la fecha para agrupar\n      const fechaInicio = extraerFechaYHora(horario.inicio);\n      if (!fechaInicio) {\n        console.log(`DEBUG - Error al extraer fecha y hora de: ${horario.inicio}`);\n        return;\n      }\n      \n      const mes = fechaInicio.mes;\n      const dia = fechaInicio.dia;\n      const nombreMes = nombresMeses[mes];\n      const diaSemana = fechaInicio.diaSemana;\n      \n      // Inicializar el grupo del mes si no existe\n      if (!mesesAgrupados[nombreMes]) {\n        mesesAgrupados[nombreMes] = {\n          mes: mes,\n          fechas: []\n        };\n      }\n      \n      // Evitar duplicados\n      const yaExiste = mesesAgrupados[nombreMes].fechas.some(\n        e => e.dia === dia && e.horaInicio === horario.horaInicio\n      );\n      \n      if (!yaExiste) {\n        mesesAgrupados[nombreMes].fechas.push({\n          dia,\n          horaInicio: horario.horaInicio,\n          horaFin: horario.horaFin,\n          mes,\n          diaSemana,\n          resumen: evento.eventoPrincipal.resumen,\n          rowId: `${mes}-${dia}-${horario.horaInicio.replace(\":\", \"\")}`\n        });\n      }\n    } catch (error) {\n      console.log(`ERROR procesando horario: ${error.message}`);\n    }\n  });\n});\n\n// Armar la estructura para WhatsApp SendList\nconst sections = [];\n\n// Crear una sección para cada mes\nfor (const [nombreMes, datosMes] of Object.entries(mesesAgrupados)) {\n  const filas = datosMes.fechas;\n  if (filas.length === 0) continue;\n  \n  // Obtener el emoji estacional para este mes\n  const emoji = getEmojiEstacional(datosMes.mes);\n  \n  // Ordenar filas por día y hora\n  filas.sort((a, b) => {\n    if (a.dia !== b.dia) return a.dia - b.dia;\n    return a.horaInicio.localeCompare(b.horaInicio);\n  });\n  \n  const rowsDelMes = [];\n  filas.forEach(f => {\n    const horaFormateada = formatearRangoHora(f.horaInicio, f.horaFin);\n    rowsDelMes.push({\n      title: `🕒 ${f.dia} de ${nombreMes} : ${horaFormateada}`,\n      description: `${f.diaSemana}`,\n      rowId: f.rowId\n    });\n  });\n  \n  // Agregar la sección del mes con el emoji estacional\n  if (rowsDelMes.length > 0) {\n    sections.push({\n      title: `${emoji} ${nombreMes}`,\n      rows: rowsDelMes\n    });\n  }\n}\n\n// Sección por defecto si no hay nada\nif (sections.length === 0) {\n  sections.push({\n    title: \"⚠️ Sin horarios disponibles\",\n    rows: [{\n      title: \"No hay horarios disponibles\",\n      description: \"Intenta más tarde\",\n      rowId: \"no-disponible\"\n    }]\n  });\n}\n\n// Obtener número de cliente desde otro nodo o poner uno por defecto\nconst remoteJid = $('Calendario').first().json.numero_cliente;\n\n// JSON final para enviar por WhatsApp\nconst requestBody = {\n  number: remoteJid,\n  title: \"📅 Fechas de Reprogramación\",\n  description: \"Seleccioná una fecha y hora para reagendar tu visita\",\n  buttonText: \"Seleccioná 👆\",\n  footerText: \"🕒 Cada visita tiene una duración de 30 minutos aprox\", // Ya incluimos la información de duración en la descripción\n  sections\n};\n\n// Retornar el mensaje final en el formato que espera n8n\nreturn [{\n  json: requestBody,\n  pairedItem: 0 // Agregamos pairedItem para mantener el enlace con el elemento de entrada\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1200,
        240
      ],
      "id": "2da1d5a4-b775-44f5-8130-195fee697e1b",
      "name": "Lista1"
    },
    {
      "parameters": {
        "jsCode": "// 🚀 Leer todos los eventos\nconst eventos = $input.all();\nconst codigoBusqueda = $('Code').first().json.ultimoCodigo?.toLowerCase();\n\n// 🚀 Funciones auxiliares\nconst extraerMinutos = (isoString) => {\n  if (!isoString) return null;\n  const hora = isoString.substring(11,16).split(':');\n  return parseInt(hora[0]) * 60 + parseInt(hora[1]);\n};\n\nconst minutosAHora = (totalMinutos) => {\n  const horas = Math.floor(totalMinutos / 60);\n  const minutos = totalMinutos % 60;\n  return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`;\n};\n\nconst crearFechaISO = (fechaBase, horaStr) => {\n  return fechaBase.substring(0, 11) + horaStr + fechaBase.substring(16);\n};\n\n// 🚀 Clasificar eventos\nconst eventosVerdes = [];\nconst eventosRojos = [];\n\nfor (const item of eventos) {\n  const ev = item.json;\n  const start = ev.start?.dateTime || ev.start?.date || ev.start;\n  const end = ev.end?.dateTime || ev.end?.date || ev.end;\n\n  if (!start || !end) continue;\n\n  const summary = ev.summary?.toLowerCase() || \"\";\n  const location = ev.location?.toLowerCase() || \"\";\n  const description = ev.description?.toLowerCase() || \"\";\n  const colorId = ev.colorId?.toString();\n\n  const coincide = summary.includes(codigoBusqueda) || location.includes(codigoBusqueda) || description.includes(codigoBusqueda);\n\n  if (!coincide) continue;\n\n  if (colorId === \"2\") {\n    eventosVerdes.push({ start, end, summary, location });\n  } else if (colorId === \"11\") {\n    eventosRojos.push({ start, end });\n  }\n}\n\n// 🚀 Si no hay verdes, devolver mensaje\nif (eventosVerdes.length === 0) {\n  return [{\n    json: {\n      noMatchingEvents: true,\n      message: \"No se encontraron eventos disponibles para la propiedad.\"\n    }\n  }];\n}\n\n// 🚀 Procesar horarios disponibles\nconst resultados = eventosVerdes.map(evento => {\n  const inicioVerdeMin = extraerMinutos(evento.start);\n  const finVerdeMin = extraerMinutos(evento.end);\n\n  const bloques = [];\n\n  for (let m = inicioVerdeMin; m + 30 <= finVerdeMin; m += 30) {\n    let bloqueOk = true;\n\n    for (const rojo of eventosRojos) {\n      const inicioRojoMin = extraerMinutos(rojo.start);\n      const finRojoMin = extraerMinutos(rojo.end);\n\n      if (inicioRojoMin === null || finRojoMin === null) continue;\n\n      // Verificar solapamiento\n      if (!(m + 30 <= inicioRojoMin || m >= finRojoMin)) {\n        bloqueOk = false;\n        break;\n      }\n    }\n\n    if (bloqueOk) {\n      const horaInicio = minutosAHora(m);\n      const horaFin = minutosAHora(m + 30);\n\n      bloques.push({\n        horaInicio: horaInicio,\n        horaFin: horaFin,\n        inicio: crearFechaISO(evento.start, horaInicio),\n        fin: crearFechaISO(evento.start, horaFin)\n      });\n    }\n  }\n\n  return {\n    eventoPrincipal: {\n      resumen: evento.summary,\n      location: evento.location,\n      inicio: evento.start,\n      fin: evento.end,\n      horaInicio: minutosAHora(inicioVerdeMin),\n      horaFin: minutosAHora(finVerdeMin)\n    },\n    horariosDisponibles: bloques\n  };\n});\n\n// 🚀 Devolver la respuesta\nreturn [{\n  json: {\n    resultados: resultados\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1640,
        -120
      ],
      "id": "517488c1-b309-4971-974e-59aa27d61c99",
      "name": "getForCode1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "summary, start, end, location, colorId, description, id",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1860,
        140
      ],
      "id": "17ab3e84-17d0-4733-8ecb-879d58ae6930",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b272870f-2db7-43e9-b82f-131ed3160b38",
              "leftValue": "={{ $json.message }}",
              "rightValue": "=No se encontraron eventos disponibles para la propiedad.",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1420,
        140
      ],
      "id": "15f7b69e-b6b4-4bb1-abba-cc52525be075",
      "name": "If3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "=No hay evento cargados para esta propiedad",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d5b2d7c9-db67-4315-9581-f35f93d32690",
      "name": "Success4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1200,
        40
      ]
    },
    {
      "parameters": {
        "jsCode": "// 🚀 Leer todos los eventos\nconst eventos = $input.all();\nconst codigoBusqueda = $('Code').first().json.ultimoCodigo?.toUpperCase();\n\n// Agregar logs para depuración\nconsole.log(\"Código a buscar:\", codigoBusqueda);\n\n// 🚀 Funciones auxiliares\nconst extraerMinutos = (isoString) => {\n  if (!isoString) return null;\n  const hora = isoString.substring(11,16).split(':');\n  return parseInt(hora[0]) * 60 + parseInt(hora[1]);\n};\n\nconst minutosAHora = (totalMinutos) => {\n  const horas = Math.floor(totalMinutos / 60);\n  const minutos = totalMinutos % 60;\n  return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`;\n};\n\nconst crearFechaISO = (fechaBase, horaStr) => {\n  return fechaBase.substring(0, 11) + horaStr + fechaBase.substring(16);\n};\n\n// 🚀 Recolectar eventos válidos (asumiendo que todos son colorID 10)\nconst eventosColorID10 = [];\nconst eventosRojos = []; // Mantenemos esta estructura vacía por ahora\n\nfor (const item of eventos) {\n  const ev = item.json;\n  const start = ev.start?.dateTime || ev.start?.date || ev.start;\n  const end = ev.end?.dateTime || ev.end?.date || ev.end;\n  \n  // Filtrar elementos que no tienen fecha o tienen solo zona horaria\n  if (!start || !end || \n      start === \"America/Argentina/Buenos_Aires\" || \n      end === \"America/Argentina/Buenos_Aires\") continue;\n  \n  const summary = ev.summary || \"\";\n  \n  // Buscar si summary contiene \"Codigo:XXXXX\"\n  const summaryUpper = summary.toUpperCase();\n  const patronBusqueda = \"CODIGO:\" + codigoBusqueda;\n  const coincide = summaryUpper.includes(patronBusqueda);\n  \n  // Log para depuración\n  console.log(\"Evaluando evento:\", summary);\n  console.log(\"Patrón buscado:\", patronBusqueda);\n  console.log(\"¿Coincide?\", coincide);\n  \n  // Si coincide, añadirlo a eventos con colorID 10\n  if (coincide) {\n    // Simulamos que tiene colorID 10\n    eventosColorID10.push({ \n      start, \n      end, \n      summary, \n      location: ev.location || \"\",\n      colorId: \"10\" // Asignamos explícitamente colorID 10\n    });\n  }\n}\n\n// 🚀 Si no hay eventos colorID 10, devolver mensaje\nif (eventosColorID10.length === 0) {\n  return [{\n    json: {\n      noMatchingEvents: true,\n      message: \"No se encontraron eventos disponibles para la propiedad.\"\n    }\n  }];\n}\n\n// 🚀 Procesar horarios disponibles\nconst resultados = eventosColorID10.map(evento => {\n  const inicioEventoMin = extraerMinutos(evento.start);\n  const finEventoMin = extraerMinutos(evento.end);\n  \n  // Creamos bloques de 30 minutos para todo el evento\n  const bloques = [];\n  for (let m = inicioEventoMin; m + 30 <= finEventoMin; m += 30) {\n    const horaInicio = minutosAHora(m);\n    const horaFin = minutosAHora(m + 30);\n    bloques.push({\n      horaInicio: horaInicio,\n      horaFin: horaFin,\n      inicio: crearFechaISO(evento.start, horaInicio),\n      fin: crearFechaISO(evento.start, horaFin)\n    });\n  }\n  \n  return {\n    eventoPrincipal: {\n      resumen: evento.summary,\n      location: evento.location,\n      inicio: evento.start,\n      fin: evento.end,\n      horaInicio: minutosAHora(inicioEventoMin),\n      horaFin: minutosAHora(finEventoMin),\n      colorId: \"10\" // Incluir colorId en la respuesta\n    },\n    horariosDisponibles: bloques\n  };\n});\n\n// 🚀 Devolver la respuesta\nreturn [{\n  json: {\n    resultados: resultados\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1640,
        140
      ],
      "id": "0d444a0d-f4b3-42dc-a66e-24c6cc1b8515",
      "name": "getForCode2"
    }
  ],
  "pinData": {
    "Calendario": [
      {
        "json": {
          "Evento": "consultar",
          "session_id": "bb51bf53-69b7-4f56-9b7b-d9027c9ee92b",
          "url_evo": "https://evo.innovasoftpro.dev",
          "instance": "tester",
          "apikey": "89EBC4C29BD1-4035-982B-DDF76B7D0A5F",
          "numero_telefono": "5492254423359"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Argentina/Buenos_Aires",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "2kOn0Oz7c2uvczPK"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-03-23T17:49:20.946Z",
      "updatedAt": "2025-03-23T17:49:20.946Z",
      "id": "UdWAGpsQzroykED6",
      "name": "AGENTES INMO"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-05-22T18:14:08.049Z",
  "versionId": "5c95d51d-0fb1-4ca2-b986-973c63694ce8"
}