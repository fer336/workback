{
  "active": false,
  "connections": {
    "Preparar Mensaje": {
      "main": [
        [
          {
            "node": "FERNANDO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        []
      ]
    },
    "FERNANDO": {
      "main": [
        []
      ]
    },
    "vars": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Preparar Mensaje1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Mensaje1": {
      "main": [
        [
          {
            "node": "Texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Preparar Mensaje2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Mensaje2": {
      "main": [
        [
          {
            "node": "es-wa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        []
      ]
    },
    "vars1": {
      "main": [
        [
          {
            "node": "get_participantes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_participantes": {
      "main": [
        [
          {
            "node": "Preparar Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-28T03:55:45.572Z",
  "id": "Jhg5kS8wJEi7bmsk",
  "isArchived": false,
  "meta": null,
  "name": "Mencion fantasma",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Obtener todos los participantes desde el input\nconst participantes = $input.first().json.participants || [];\nconst config = $node[\"vars1\"].json;\n\n// Obtener todos los jid de los participantes que terminan con @s.whatsapp.net\nconst numerosTelefono = participantes\n  .filter(p => p && p.jid && p.jid.endsWith('@s.whatsapp.net'))\n  .map(p => p.jid);  // Obtener el campo jid, no id\n\n// Crear menciones\nconst mentions = numerosTelefono.map(numero => ({\n  mentioned: numero,\n  name: '\\u200E'\n}));\n\n// Devolver TODO en un solo objeto\nreturn {\n  json: {\n    participantes: numerosTelefono,  // Array con TODOS los números (jid)\n    texto: config.text,\n    totalParticipantes: numerosTelefono.length,\n    requestData: {\n      number: config.number,\n      options: {\n        delay: config.options.delay,\n        presence: config.options.presence\n      },\n      textMessage: {\n        text: config.text,\n        mentions: mentions\n      }\n    }\n  }\n};"
      },
      "name": "Preparar Mensaje",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        144,
        1024
      ],
      "id": "6036c74c-8077-421d-a60b-ea2e115ecdc5"
    },
    {
      "parameters": {
        "jsCode": "// Nodo de depuración\nconst inputData = $node[\"Preparar Mensaje\"].json;\nconsole.log(\"Datos originales:\", JSON.stringify(inputData, null, 2));\n\n// Intentar con una serialización/deserialización adicional\nconst serialized = JSON.stringify(inputData);\nconst deserialized = JSON.parse(serialized);\nconsole.log(\"Después de serializar/deserializar:\", JSON.stringify(deserialized, null, 2));\n\nreturn {json: deserialized};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        1200
      ],
      "id": "bb462e51-8317-466b-80a4-b0b598949ae5",
      "name": "Code"
    },
    {
      "parameters": {
        "content": "## Grupo buitres 5491138677828-1439064022@g.us\n\n## Grupo General IA \"120363409752146229@g.us\"\n\n## Grupo TRAID general \"120363347362371229@g.us\"\n\n## Grupo Inmobiliario \"120363407640794586@g.us\"\n\n## GRUPO RUBEN \"120363150353486693@g.us\"\n\n## GRUPO DEL VILLANO (120363419074159638@g.us)",
        "height": 660,
        "width": 580
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -560,
        -80
      ],
      "typeVersion": 1,
      "id": "3a5ac9ca-9811-4765-983c-96f2a4a71a12",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('vars').item.json.url }}/message/sendText/{{ $('vars').item.json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $('vars').item.json.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $json.number }}"
            },
            {
              "name": "options",
              "value": "={{ $json.options }}"
            },
            {
              "name": "text",
              "value": "={{ $json.textMessage.text }}"
            },
            {
              "name": "mentions",
              "value": "={{ $json.textMessage.mentions }}"
            },
            {
              "name": "mentionsEveryOne",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "name": "Mensaje2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1008,
        1328
      ],
      "id": "26951623-760e-4013-931a-7cb12e2ec413",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo.qeva.xyz/message/sendText/fer",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('vars1').item.json.number }}"
            },
            {
              "name": "options",
              "value": "={{ $('vars1').first().json.options }}"
            },
            {
              "name": "text",
              "value": "={{ $('vars1').first().json.text }}"
            },
            {
              "name": "mentions",
              "value": "={{ $json.participantes }}"
            },
            {
              "name": "mentionsEveryOne",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "name": "FERNANDO",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        400,
        1024
      ],
      "id": "948a1325-ab71-4e2d-8f04-80084d5e3137",
      "credentials": {
        "httpBasicAuth": {
          "id": "OpgdvMlLy6Zxc6ii",
          "name": "NOCODB"
        },
        "httpHeaderAuth": {
          "id": "AyfwVfJv24ug21lX",
          "name": "EVOLUTION API - FER"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fer33",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -784,
        688
      ],
      "id": "b812773e-1f6e-475a-8360-d9206fe2776e",
      "name": "Webhook",
      "webhookId": "9ba09d30-2eb8-4bdf-8785-2bfc45e3f63d",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "23189e14-968e-44f2-be6c-32e7889d5294",
              "name": "number",
              "value": "=120363407640794586@g.us",
              "type": "string"
            },
            {
              "id": "c403ade0-2efe-493c-96e6-a45fcb270920",
              "name": "url",
              "value": "=https://evo.innovasoftpro.dev",
              "type": "string"
            },
            {
              "id": "237b606f-962f-485e-8945-2409e46b5ed8",
              "name": "apikey",
              "value": "=B8F21C0B3BFC-453F-A467-B69E2BB0D8E3",
              "type": "string"
            },
            {
              "id": "6b637992-7137-4ec6-adb4-db6fa6706671",
              "name": "instance",
              "value": "=fernando",
              "type": "string"
            },
            {
              "id": "c584414f-8f84-450d-8999-3071701de88c",
              "name": "options",
              "value": "={delay: 1200,presence: 'composing'}",
              "type": "object"
            },
            {
              "id": "d7e9739d-f087-4f35-bd14-b39bb38ab224",
              "name": "text",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "0def1f68-c153-4d34-8b8a-90014d5be372",
              "name": "mentions",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -544,
        1296
      ],
      "id": "4d448bde-b5b2-4007-a7ee-3e52d8ae13e6",
      "name": "vars"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "=Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "typing_time",
              "value": "={{1}}"
            },
            {
              "name": "body",
              "value": "={{ $json.body }}"
            },
            {
              "name": "to",
              "value": "={{ $json.to }}"
            },
            {
              "name": "mentions",
              "value": "={{ $json.mentions }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        192,
        1296
      ],
      "id": "b653112a-bf0c-4c0c-8430-3bcb8c6b56f6",
      "name": "Texto"
    },
    {
      "parameters": {
        "url": "https://gate.whapi.cloud/groups/120363150353486693@g.us",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "count",
              "value": "200"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -320,
        1296
      ],
      "id": "f2bc2863-9838-43f8-91de-48ab11953d39",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// VERSIÓN SIMPLE Y DIRECTA\nconst group = $input.item.json;\nconst config = $node[\"vars\"].json;\n\n// Extraer números de los participantes\nconst mentions = group.participants\n  .map(p => p.id.replace('@s.whatsapp.net', ''))\n  .filter(num => num && num !== 'status@broadcast');\n\n// Crear mensaje\nconst body = ` ${config.text} `;\n\n// Devolver objeto para WhAPI\nreturn {\n  json: {\n    to: group.id,\n    body: body,\n    mentions: mentions,\n    typing_time: 3\n  }\n};"
      },
      "name": "Preparar Mensaje1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -80,
        1296
      ],
      "id": "defc02ce-d3af-4ac7-a379-9452879d920d"
    },
    {
      "parameters": {
        "url": "https://us.api-wa.me/2522xaf8359c21b/groups/120363419074159638@g.us",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -528,
        1552
      ],
      "id": "22a8d1bb-ffc3-42cb-accd-94216d6ded01",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "jsCode": "// VERSIÓN ADAPTADA - SOLO PARTICIPANTES\nconst response = $input.item.json;\nconst config = $('chat').first().json.chatInput ;\n\n// Acceder a los datos del grupo desde la nueva estructura\nconst groupData = Array.isArray(response) ? response[0].data : response.data;\n\n// OPCIÓN 1: TODOS LOS PARTICIPANTES (sin quitar el @lid)\nconst mentions = groupData.participants.map(p => p.id);\n\n// OPCIÓN 2: TODOS LOS PARTICIPANTES (quitando @lid para obtener solo números)\n// const mentions = groupData.participants.map(p => p.id.replace('@lid', ''));\n\n// OPCIÓN 3: EXCLUIR AL OWNER/ADMIN (si no quieres mencionar al creador del grupo)\n// const mentions = groupData.participants\n//   .filter(p => p.id !== groupData.owner)\n//   .map(p => p.id);\n\n// OPCIÓN 4: SOLO PARTICIPANTES NO-ADMIN\n// const mentions = groupData.participants\n//   .filter(p => !p.admin)\n//   .map(p => p.id);\n\n// Crear mensaje\nconst body = $('chat').first().json.chatInput;\n\n// Devolver objeto para WhAPI\nreturn {\n  json: {\n    to: groupData.id,\n    body: body,\n    mentions: mentions,\n    typing_time: 3\n  }\n};\n\n// ALTERNATIVA: Si necesitas incluir el @lid en las menciones\n// (depende de cómo funcione tu API de WhatsApp)\n/*\nconst mentionsWithLid = groupData.participants\n  .map(p => p.id)\n  .filter(id => id && id !== 'status@broadcast');\n\nreturn {\n  json: {\n    to: groupData.id,\n    body: body,\n    mentions: mentionsWithLid,\n    typing_time: 3\n  }\n};\n*/\n\n// VERSIÓN CON VALIDACIÓN ADICIONAL\n/*\n// Verificar que tenemos datos válidos\nif (!response || (Array.isArray(response) && response.length === 0)) {\n  throw new Error('No se recibieron datos del grupo');\n}\n\nconst groupData = Array.isArray(response) ? response[0].data : response.data;\n\nif (!groupData || !groupData.participants) {\n  throw new Error('Estructura de datos inválida');\n}\n\n// Extraer números con validación\nconst mentions = groupData.participants\n  .filter(p => p && p.id) // Verificar que el participante y su ID existen\n  .map(p => p.id.replace('@lid', ''))\n  .filter(num => num && num !== 'status@broadcast');\n\n// Log para debugging\nconsole.log('Grupo ID:', groupData.id);\nconsole.log('Participantes encontrados:', mentions.length);\nconsole.log('Menciones:', mentions);\n\nconst body = ` ${config.text} `;\n\nreturn {\n  json: {\n    to: groupData.id,\n    body: body,\n    mentions: mentions,\n    typing_time: 3\n  }\n};\n*/"
      },
      "name": "Preparar Mensaje2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -208,
        1552
      ],
      "id": "c0d7ccf7-440e-414c-847b-bc9bdbeb796e"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://us.api-wa.me/2522xaf8359c21b/message/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.to }}"
            },
            {
              "name": "text",
              "value": "={{ $json.body }}"
            },
            {
              "name": "mentions",
              "value": "={{ $json.mentions }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        128,
        1552
      ],
      "id": "922f52e1-f147-464d-b0fb-831de9ff56d3",
      "name": "es-wa"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "23189e14-968e-44f2-be6c-32e7889d5294",
              "name": "number",
              "value": "=120363419074159638@g.us",
              "type": "string"
            },
            {
              "id": "c403ade0-2efe-493c-96e6-a45fcb270920",
              "name": "url",
              "value": "=https://evo.qeva.xyz",
              "type": "string"
            },
            {
              "id": "237b606f-962f-485e-8945-2409e46b5ed8",
              "name": "apikey",
              "value": "=0B7C4E05F589-499F-A318-DA1AF7EC1E5E",
              "type": "string"
            },
            {
              "id": "6b637992-7137-4ec6-adb4-db6fa6706671",
              "name": "instance",
              "value": "=fernando",
              "type": "string"
            },
            {
              "id": "c584414f-8f84-450d-8999-3071701de88c",
              "name": "options",
              "value": "={delay: 1200,presence: 'composing'}",
              "type": "object"
            },
            {
              "id": "d7e9739d-f087-4f35-bd14-b39bb38ab224",
              "name": "text",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -368,
        1024
      ],
      "id": "993491aa-eb67-4e86-80a2-e8123176b1cc",
      "name": "vars1"
    },
    {
      "parameters": {
        "url": "=https://evo.qeva.xyz/group/participants/fer?groupJid={{ $json.number }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "name": "get_participantes",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -128,
        1024
      ],
      "id": "aac34276-b477-4aff-a29c-c3a00f5d7c47",
      "credentials": {
        "httpBasicAuth": {
          "id": "OpgdvMlLy6Zxc6ii",
          "name": "NOCODB"
        },
        "httpHeaderAuth": {
          "id": "AyfwVfJv24ug21lX",
          "name": "EVOLUTION API - FER"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -928,
        1392
      ],
      "id": "03a2ed6b-8565-4be1-ab32-6586afaa6299",
      "name": "chat",
      "webhookId": "b62d2c70-4f2a-4915-b55c-0984918d98bf"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8nw.qeva.xyz",
            "user-agent": "axios/1.10.0",
            "content-length": "25761",
            "accept": "application/json, text/plain, */*",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8nw.qeva.xyz",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "7697b68d06c2",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "fer",
            "data": {
              "key": {
                "remoteJid": "447453536046@s.whatsapp.net",
                "fromMe": true,
                "id": "7ECBE08691B07B0E769CDEA75B85B1C3"
              },
              "pushName": "Fer { }",
              "status": "SERVER_ACK",
              "message": {
                "audioMessage": {
                  "url": "https://mmg.whatsapp.net/v/t62.7117-24/530168562_679299981819585_1233676222050210383_n.enc?ccb=11-4&oh=01_Q5Aa2QGs4pi2xe4RrK-0TesXOjOu4VpMrPxhPOd0Gt691vTQHQ&oe=68C1962C&_nc_sid=5e03e0&mms3=true",
                  "mimetype": "audio/ogg; codecs=opus",
                  "fileSha256": "rFKZh4uAjWn5a5+9isTD9MGdFMl1/MyCSLGenT8+X7U=",
                  "fileLength": "18286",
                  "seconds": 7,
                  "ptt": true,
                  "mediaKey": "hncgzvZe7jwsVqSin4YLc4c1BAY/6cnhM5jIQmcZzQA=",
                  "fileEncSha256": "GF6X5cF4Yo+agnVYw60J83//fARGaCeCg7Pwk/LyEqQ=",
                  "directPath": "/v/t62.7117-24/530168562_679299981819585_1233676222050210383_n.enc?ccb=11-4&oh=01_Q5Aa2QGs4pi2xe4RrK-0TesXOjOu4VpMrPxhPOd0Gt691vTQHQ&oe=68C1962C&_nc_sid=5e03e0",
                  "mediaKeyTimestamp": "1754927312",
                  "waveform": "AAAAAAAAAABENU1KTkFAJBwzK0E7JSo7NTU0NTUoACogTjo7SzU6Ojc6JD1ANEhIORdAKB40RSIANiYKLz9GKQ=="
                },
                "base64": ""
              },
              "contextInfo": null,
              "messageType": "audioMessage",
              "messageTimestamp": 1754927319,
              "instanceId": "bd90f601-1776-4ff2-bec6-92f96eeb5148",
              "source": "android"
            },
            "destination": "https://n8nw.qeva.xyz/webhook/fer33",
            "date_time": "2025-08-11T12:48:39.636Z",
            "sender": "5492254423359@s.whatsapp.net",
            "server_url": "https://evo.qeva.xyz",
            "apikey": "0B7C4E05F589-499F-A318-DA1AF7EC1E5E"
          },
          "webhookUrl": "https://n8nw.qeva.xyz/webhook/fer33",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "2kOn0Oz7c2uvczPK"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-08-11T20:02:00.954Z",
  "versionId": "a8c06b1e-52e6-4b71-a73a-eaa602651224"
}