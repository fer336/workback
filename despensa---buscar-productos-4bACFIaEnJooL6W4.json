{"createdAt":"2025-02-07T13:24:04.491Z","updatedAt":"2025-05-01T11:41:01.788Z","id":"4bACFIaEnJooL6W4","name":"DESPENSA - Buscar productos","active":false,"nodes":[{"parameters":{"documentId":{"__rl":true,"value":"1BjXUpF4UGYet7F-ajPFJgBLgpoaS2Wy3WqcBQVislIs","mode":"list","cachedResultName":"Productos - Bot","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1BjXUpF4UGYet7F-ajPFJgBLgpoaS2Wy3WqcBQVislIs/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":375361433,"mode":"list","cachedResultName":"Productos","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1BjXUpF4UGYet7F-ajPFJgBLgpoaS2Wy3WqcBQVislIs/edit#gid=375361433"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[-2860,-1300],"id":"23d0ac2e-eca6-4da2-8308-37d41b4ae89f","name":"Google Sheets","credentials":{"googleSheetsOAuth2Api":{"id":"yxBoR5sUs8UyR9Sc","name":"Despensa"}}},{"parameters":{"url":"https://db.innovasoftpro.dev/api/v2/tables/mkwl4et7ud76b4z/records","sendQuery":true,"queryParameters":{"parameters":[{"name":"offset","value":"0"},{"name":"limit","value":"25"},{"name":"where"},{"name":"viewId","value":"vwd7uibsibi9lysx"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"xc-token","value":"fEcCdge9m2uaEAqN9jdFSM-EQB2wUf1CVkAtN3UE"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2860,-1040],"id":"fb2d589e-08de-455f-91c7-eca4cc1bcf16","name":"Get Productos"},{"parameters":{"method":"DELETE","url":"https://db.innovasoftpro.dev/api/v2/tables/mkwl4et7ud76b4z/records","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"*/*"},{"name":"xc-token","value":"fEcCdge9m2uaEAqN9jdFSM-EQB2wUf1CVkAtN3UE"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"Id","value":"2"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2860,-780],"id":"5d4288eb-2cda-4520-b05c-7f400600a6fa","name":"HTTP Request"},{"parameters":{"requestMethod":"DELETE","url":"https://db.innovasoftpro.dev/api/v1/db/data/bulk/noco/lodepocho/Productos/all","options":{},"headerParametersUi":{"parameter":[{"name":"xc-token","value":"fEcCdge9m2uaEAqN9jdFSM-EQB2wUf1CVkAtN3UE"},{"name":"Content-Type","value":"application/json"}]}},"id":"41f723fe-6eeb-4c9d-a949-1562a80cd288","name":"Borrar todos los productos","type":"n8n-nodes-base.httpRequest","typeVersion":2,"position":[-2860,-1560]},{"parameters":{"assignments":{"assignments":[{"id":"cb510607-dec6-4dc9-bed4-93cff471833a","name":"response","value":"={{ $json.data }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[900,-520],"id":"79d7e04f-d3ee-4036-b61d-5b31b84d6ba1","name":"response"},{"parameters":{"operation":"text","binaryPropertyName":"Productos","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[660,-520],"id":"c034ee46-493d-4ce1-a0d8-fa96ae916c98","name":"Extract from File"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"7e74ea41-3be9-4587-9278-3e562f6e4b9d","leftValue":"={{ $('Aggregate1').item.json.data }}","rightValue":"","operator":{"type":"array","operation":"exists","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[440,-420],"id":"de52d82d-1091-4c7f-a743-fdbd6b12cb42","name":"If"},{"parameters":{"assignments":{"assignments":[{"id":"cb510607-dec6-4dc9-bed4-93cff471833a","name":"response","value":"=no se encontraron productos","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[660,-320],"id":"33386582-f631-4980-9bfd-c83dafc1ba69","name":"response1"},{"parameters":{"inputSource":"passthrough"},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-2860,-420],"id":"3ddd907c-d195-413b-a9b1-9f6b0ea025cd","name":"Workflow Input Trigger"},{"parameters":{"assignments":{"assignments":[{"id":"6e46f8fb-879f-4d37-b5f9-cfdf1177e673","name":"descripcion","value":"={{ $json.query.Descripcion }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2640,-420],"id":"8eba37c2-4412-4081-8796-e92b1387ab4c","name":"vars"},{"parameters":{"authentication":"nocoDbApiToken","operation":"getAll","projectId":"pc1g3m0ih934pz9","table":"mkx16x0s84d6l5i","returnAll":true,"options":{"fields":[]}},"type":"n8n-nodes-base.nocoDb","typeVersion":3,"position":[-1760,-345],"id":"ef5e73b4-6963-4a65-a5f1-c6ad203443de","name":"NocoDB","credentials":{"nocoDbApiToken":{"id":"CawnXo6TfhLoivTw","name":"NocoDB Token account"}}},{"parameters":{"operation":"push","list":"=Productos","messageData":"={{ JSON.stringify($json.productos) }}","tail":true},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[-1100,-345],"id":"3c36cb9e-4b30-410a-934a-6a4c09ac357c","name":"Productos","credentials":{"redis":{"id":"JMklVOvkU7koL2UG","name":"Redis"}}},{"parameters":{"aggregate":"aggregateAllItemData","destinationFieldName":"=productos","include":"specifiedFields","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[-1320,-345],"id":"11e30581-4fb3-4780-b0ee-e38bf094db10","name":"Aggregate"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"fd06524c-64b9-494c-b07c-866a083aed27","leftValue":"={{ $json.productos }}","rightValue":"null","operator":{"type":"array","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-1980,-420],"id":"1fe18096-fbfe-42bc-aa7e-8bc5d1c6beb1","name":"If1"},{"parameters":{"operation":"get","propertyName":"=productos","key":"=Productos","options":{}},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[-2420,-420],"id":"3ec9e433-7628-47ee-8895-404ad4e9497f","name":"Redis1","credentials":{"redis":{"id":"JMklVOvkU7koL2UG","name":"Redis"}}},{"parameters":{"jsCode":"const descripcion = $('vars').first().json.descripcion;\n\n// 1️⃣ Convertir a minúsculas\nlet cleanText = descripcion.toLowerCase();\n\n// 2️⃣ Reemplazar caracteres especiales y eliminar acentos\ncleanText = cleanText\n    .normalize(\"NFD\") // Descompone caracteres acentuados\n    .replace(/[\\u0300-\\u036f]/g, \"\") // Elimina los acentos\n    .replace(/[^a-z0-9\\sáéíóúüñ]/gi, \"\"); // Conserva letras y números\n\n// 3️⃣ Dividir en palabras por espacio\nconst palabras = cleanText.split(\" \");\n\n// 4️⃣ Filtrar palabras vacías o irrelevantes\nconst palabrasFiltradas = palabras.filter(palabra => palabra.length > 1);\n\n// 5️⃣ Estructurar en un solo objeto JSON\nlet resultado = {};\npalabrasFiltradas.forEach((palabra, index) => {\n    resultado[`word_${index + 1}`] = palabra;\n});\n\n// 6️⃣ Retornar un solo objeto en un array\nreturn [{ ...resultado }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-440,-420],"id":"4a1dda9c-c911-4158-88c0-aaa0b04943a7","name":"Traer datos","alwaysOutputData":true,"onError":"continueRegularOutput"},{"parameters":{"assignments":{"assignments":[{"id":"a36ae4f2-54a0-4d2d-b58e-1a8c013faf22","name":"productos","value":"={{ $json.productos[0] }}","type":"array"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2200,-420],"id":"99cf7e53-6713-405a-a521-c0079dfe6a28","name":"Productos2"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[-660,-420],"id":"31352c44-071c-4938-a4d1-0990eefc1f49","name":"Merge"},{"parameters":{"assignments":{"assignments":[{"id":"5b1f7094-6f76-4c92-b112-059537c4d552","name":"productos","value":"={{ $json.productos }}","type":"array"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-880,-345],"id":"34222b18-ca1f-46cd-96fe-a373702b0321","name":"Productos1"},{"parameters":{"operation":"toText","sourceProperty":"data","binaryPropertyName":"=Productos","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[220,-420],"id":"169e5995-8f9a-44b9-86bd-c325e965b618","name":"Convert to File1"},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[0,-420],"id":"072902e6-ddfb-4448-9d73-f464fd42b32a","name":"Aggregate1"},{"parameters":{"operation":"delete","key":"Productos"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[-2020,-60],"id":"ffdb5cde-47d1-4892-b7e6-72a0a5f5ec7f","name":"Redis2","credentials":{"redis":{"id":"JMklVOvkU7koL2UG","name":"Redis"}}},{"parameters":{"assignments":{"assignments":[{"id":"cb510607-dec6-4dc9-bed4-93cff471833a","name":"response","value":"={{ $json.message.content }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2860,200],"id":"354f62df-5dcd-476d-9d26-199b868df06b","name":"response2"},{"parameters":{"fieldToSplitOut":"Producto, ['P. Venta']","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-1540,-345],"id":"de926338-9d24-49bf-a9c9-6a85ac198eda","name":"Split Out2"},{"parameters":{"jsCode":"// Obtener las palabras de búsqueda\nconst word1 = $input.first().json.word_1 || \"\";\nconst word2 = $input.first().json.word_2 || \"\";\nconsole.log(`Buscando coincidencias para: \"${word1}\" y \"${word2}\"`);\n\n// Obtener productos directamente desde Merge\nlet productosRaw = $('Merge').first().json.productos;\nconsole.log(\"Tipo de datos de productos:\", typeof productosRaw);\n\n// Asegurarnos de que productos sea un array\nlet productos = [];\n\nif (Array.isArray(productosRaw)) {\n  productos = productosRaw.filter(item => item !== null); // Filtrar posibles valores null dentro del array\n} else if (productosRaw !== null && typeof productosRaw === 'object') {\n  // Si es un objeto, lo convertimos en un array con un elemento\n  productos = [productosRaw];\n} else {\n  // Si es null o undefined, usamos un array vacío\n  productos = [];\n}\n\nconsole.log(`Total de productos disponibles: ${productos.length}`);\n\n// Función mejorada para verificar si un texto contiene una palabra (considerando singular/plural)\nfunction contienePalabra(texto, palabra) {\n  if (!texto || !palabra) return false;\n  \n  try {\n    // Limpiamos y normalizamos el texto y la palabra\n    texto = (texto || \"\").toString().toLowerCase().trim();\n    palabra = (palabra || \"\").toString().toLowerCase().trim();\n    \n    if (palabra === \"\") return false;\n    \n    // Considerar variantes (singular/plural y más)\n    let variantes = [palabra];\n    \n    // Plural a singular\n    if (palabra.endsWith('s') && palabra.length > 2) {\n      variantes.push(palabra.slice(0, -1)); // Quitar la 's' final\n      // Casos especiales como \"es\" -> \"e\" (ej. \"dentales\" -> \"dental\")\n      if (palabra.endsWith('es') && palabra.length > 3) {\n        variantes.push(palabra.slice(0, -2));\n      }\n    } \n    // Singular a plural\n    else {\n      variantes.push(palabra + 's'); // Añadir 's' al final\n      // Casos especiales como \"al\" -> \"ales\"\n      if (palabra.endsWith('al')) {\n        variantes.push(palabra.slice(0, -1) + 'ales');\n      }\n    }\n    \n    // Log para debug\n    // console.log(`Buscando variantes para \"${palabra}\":`, variantes);\n    \n    // Buscar palabra completa primero (priorizar coincidencias exactas)\n    const palabraRegex = new RegExp(`(^|\\\\s|[^a-zñáéíóúü])${palabra}(\\\\s|[^a-zñáéíóúü]|$)`, 'i');\n    if (palabraRegex.test(texto)) {\n      return true;\n    }\n    \n    // Si no hay coincidencia exacta, probar con las variantes\n    return variantes.some(v => {\n      if (v === palabra) return false; // Ya probamos con la palabra exacta\n      \n      try {\n        const varianteRegex = new RegExp(`(^|\\\\s|[^a-zñáéíóúü])${v}(\\\\s|[^a-zñáéíóúü]|$)`, 'i');\n        return varianteRegex.test(texto);\n      } catch (e) {\n        console.log(`Error en regex para variante \"${v}\":`, e.message);\n        // Fallback - búsqueda simple\n        return texto.includes(v);\n      }\n    });\n  } catch (e) {\n    console.log(\"Error en contienePalabra:\", e.message);\n    return false;\n  }\n}\n\n// Función mejorada para verificar si un producto contiene una palabra\nfunction productoContienePalabra(producto, palabra) {\n  if (!palabra || !producto) return false;\n  \n  try {\n    // Buscar en todos los campos de texto del producto\n    // Esto es más flexible que solo buscar en campos específicos\n    for (const [clave, valor] of Object.entries(producto)) {\n      // Solo procesar valores de texto\n      if (typeof valor === 'string' && valor.trim() !== '') {\n        if (contienePalabra(valor, palabra)) {\n          // console.log(`Coincidencia encontrada para \"${palabra}\" en campo \"${clave}\": \"${valor}\"`);\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  } catch (e) {\n    console.log(\"Error en productoContienePalabra:\", e.message);\n    return false;\n  }\n}\n\n// Manejar búsquedas con protección contra errores\nlet resultadosWord1 = [];\nlet resultadosWord2 = [];\n\n// Buscar productos que coincidan con word1\nif (word1 && productos.length > 0) {\n  resultadosWord1 = productos.filter(p => p && productoContienePalabra(p, word1));\n  console.log(`Productos que coinciden con \"${word1}\": ${resultadosWord1.length}`);\n  // Mostrar algunos ejemplos para debug\n  if (resultadosWord1.length > 0) {\n    console.log(\"Ejemplos de coincidencias para word1:\");\n    resultadosWord1.slice(0, 3).forEach((p, i) => {\n      console.log(`  ${i+1}. ${p.Producto || p.producto || JSON.stringify(p).substring(0, 50)}`);\n    });\n  }\n}\n\n// Buscar productos que coincidan con word2\nif (word2 && productos.length > 0) {\n  resultadosWord2 = productos.filter(p => p && productoContienePalabra(p, word2));\n  console.log(`Productos que coinciden con \"${word2}\": ${resultadosWord2.length}`);\n  // Mostrar algunos ejemplos para debug\n  if (resultadosWord2.length > 0) {\n    console.log(\"Ejemplos de coincidencias para word2:\");\n    resultadosWord2.slice(0, 3).forEach((p, i) => {\n      console.log(`  ${i+1}. ${p.Producto || p.producto || JSON.stringify(p).substring(0, 50)}`);\n    });\n  }\n}\n\n// Combinar resultados (sin duplicados)\nconst todosIds = new Set();\nconst resultadosCombinados = [];\n\n// Agregar primero los resultados de word1\nresultadosWord1.forEach(producto => {\n  try {\n    if (!producto) return;\n    const id = producto.Codigo || producto.codigo || JSON.stringify(producto);\n    if (!todosIds.has(id)) {\n      todosIds.add(id);\n      resultadosCombinados.push(producto);\n    }\n  } catch (e) {\n    console.log(\"Error al procesar un producto de word1:\", e.message);\n  }\n});\n\n// Agregar después los resultados de word2 (si no están ya incluidos)\nresultadosWord2.forEach(producto => {\n  try {\n    if (!producto) return;\n    const id = producto.Codigo || producto.codigo || JSON.stringify(producto);\n    if (!todosIds.has(id)) {\n      todosIds.add(id);\n      resultadosCombinados.push(producto);\n    }\n  } catch (e) {\n    console.log(\"Error al procesar un producto de word2:\", e.message);\n  }\n});\n\nconsole.log(`Total de productos encontrados: ${resultadosCombinados.length}`);\n\n// Si no hay resultados, mostrar un mensaje\nif (resultadosCombinados.length === 0) {\n  console.log(`No se encontraron productos que coincidan con \"${word1}\" o \"${word2}\"`);\n}\n\n// Retornar los resultados combinados\nreturn resultadosCombinados.map(p => ({ json: p }));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-220,-420],"id":"d6c5f260-6302-478c-9581-c1389c187409","name":"Code"}],"connections":{"Google Sheets":{"main":[[]]},"Borrar todos los productos":{"main":[[]]},"Extract from File":{"main":[[{"node":"response","type":"main","index":0}]]},"If":{"main":[[{"node":"Extract from File","type":"main","index":0}],[{"node":"response1","type":"main","index":0}]]},"Workflow Input Trigger":{"main":[[{"node":"vars","type":"main","index":0}]]},"vars":{"main":[[{"node":"Redis1","type":"main","index":0}]]},"NocoDB":{"main":[[{"node":"Split Out2","type":"main","index":0}]]},"Productos":{"main":[[{"node":"Productos1","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Productos","type":"main","index":0}]]},"If1":{"main":[[{"node":"Merge","type":"main","index":0}],[{"node":"NocoDB","type":"main","index":0}]]},"Redis1":{"main":[[{"node":"Productos2","type":"main","index":0}]]},"Traer datos":{"main":[[{"node":"Code","type":"main","index":0}]]},"Productos2":{"main":[[{"node":"If1","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Traer datos","type":"main","index":0}]]},"Productos1":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Convert to File1":{"main":[[{"node":"If","type":"main","index":0}]]},"Aggregate1":{"main":[[{"node":"Convert to File1","type":"main","index":0}]]},"Redis2":{"main":[[]]},"Split Out2":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Code":{"main":[[{"node":"Aggregate1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","errorWorkflow":"2kOn0Oz7c2uvczPK"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Workflow Input Trigger":[{"json":{"query":{"Descripcion":"Shampoo"},"Telefono":"5492254596618"}}]},"versionId":"442204ca-a805-421e-9885-463e10d1f8db","triggerCount":0,"tags":[]}