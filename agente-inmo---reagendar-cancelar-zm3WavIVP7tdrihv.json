{"createdAt":"2025-06-28T04:26:02.162Z","updatedAt":"2025-07-06T22:55:21.352Z","id":"zm3WavIVP7tdrihv","name":"AGENTE INMO - Reagendar-Cancelar","active":false,"isArchived":false,"nodes":[{"parameters":{"content":"## VERIFICADOR NO FUNCIONA","height":80,"width":380},"type":"n8n-nodes-base.stickyNote","position":[540,900],"typeVersion":1,"id":"3f036746-1232-41f9-a027-0a2517669f1b","name":"Sticky Note"},{"parameters":{"inputSource":"jsonExample","jsonExample":"\n{\n\"numero_cliente\": \nnull,\n\"fecha_cita\": \nnull,\n\"Nombre\": \nnull,\n\"Evento\": \nnull,\n\"correo_electronico\": \nnull\n}\n"},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-140,520],"id":"5921ee10-339b-4f6c-8b25-1ecdc1c2f476","name":"Calendario"},{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"004dfd8dfad8cab59884aa5afbe99b4943ba96c971d4eb480405c7595b8160b1@group.calendar.google.com","mode":"list","cachedResultName":"Francisco"},"returnAll":true,"timeMax":"={{ $now.plus({ week: 2 }) }}","options":{"query":"={{ $json[\"correo_electronico\"] }}"}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[80,520],"id":"6d58e95c-9acc-4ca8-938a-4e57ba4cec97","name":"Obtener eventos","alwaysOutputData":true,"credentials":{"googleCalendarOAuth2Api":{"id":"b9dhe93V3wFhoVsL","name":"Calendario Qeva Francisco"}},"onError":"continueRegularOutput"},{"parameters":{"fieldToSplitOut":"summary, start, end, location, colorId, id, description, attendees[0].email","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[540,520],"id":"5fe776cb-bad2-4aa9-8a53-a5f237fc737c","name":"Split Out2","alwaysOutputData":true,"onError":"continueRegularOutput"},{"parameters":{"assignments":{"assignments":[{"id":"39c2f302-03be-4464-a17a-d7cc481d6d44","name":"=response","value":"=REAGENDAR_ENVIADA","type":"string"}]},"options":{}},"id":"7cff4dab-8106-44c4-95ac-59bb1b4ee6a4","name":"Success1","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1840,420]},{"parameters":{"jsCode":"// Obtener los datos del nodo anterior (eventos rojos filtrados)\nconst datosEventos = $input.first()?.json?.eventosRojos || [];\n// Verificar si tenemos datos\nconst hayDatos = datosEventos && datosEventos.length > 0;\n\n// Teléfono del cliente dinámico\nlet remoteJid = \"\";\ntry {\n  remoteJid = $('Calendario').first().json.numero_cliente || \"\";\n} catch {\n  remoteJid = \"\";\n}\n\n// Si NO hay datos, enviar un mensaje simple en lugar de una lista\nif (!hayDatos) {\n  const mensajeSinVisitas = {\n    to: remoteJid,\n    type: \"text\",\n    text: `*No tenés visitas agendadas* 📅\\n\\nActualmente no hay visitas programadas en tu agenda. Cuando agendes una nueva visita, podrás verla y gestionarla desde acá.\\n\\nSi necesitás agendar una visita, por favor compartí el enlace de la propiedad que te interesa.`\n  };\n  return [{ json: mensajeSinVisitas }];\n}\n\n// Función para obtener el emoji estacional según el mes (hemisferio sur)\nfunction getEmojiEstacional(mes) {\n  if (mes >= 3 && mes <= 5) return \"🍂\";\n  if (mes >= 6 && mes <= 8) return \"❄️\";\n  if (mes >= 9 && mes <= 11) return \"🌸\";\n  return \"☀️\";\n}\n\nconst nombresMeses = {\n  1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril',\n  5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto',\n  9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'\n};\n\nconst nombresDias = {\n  0: 'Domingo', 1: 'Lunes', 2: 'Martes', 3: 'Miércoles',\n  4: 'Jueves', 5: 'Viernes', 6: 'Sábado'\n};\n\n// Extraer fecha y hora de una cadena ISO\nfunction extraerFechaYHora(isoString) {\n  if (!isoString) return null;\n  const match = isoString.match(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2})/);\n  if (match) {\n    const fechaCompleta = new Date(`${match[1]}-${match[2]}-${match[3]}T${match[4]}:${match[5]}:00`);\n    return {\n      anio: parseInt(match[1], 10),\n      mes: parseInt(match[2], 10),\n      dia: parseInt(match[3], 10),\n      hora: `${match[4]}:${match[5]}`,\n      fechaCompleta: fechaCompleta,\n      diaSemana: nombresDias[fechaCompleta.getDay()],\n      isoString: `${match[1]}-${match[2]}-${match[3]}T${match[4]}:${match[5]}` // Agregar formato ISO requerido\n    };\n  }\n  return null;\n}\n\nfunction formatearRangoHora(horaInicio, horaFin) {\n  // Simplemente unificamos el formato como en la otra lista\n  return `${horaInicio} a ${horaFin}`;\n}\n\n// Función para extraer el código de propiedad de la descripción o summary\nfunction extraerCodigoPropiedad(evento) {\n  let codigo = \"Sin código\";\n  if (evento.description) {\n    const matchDescripcion = evento.description.match(/[Cc][oó]digo\\s*(?:propiedad|de\\s*propiedad)?:\\s*([A-Za-z0-9-_]+)/i);\n    if (matchDescripcion) codigo = matchDescripcion[1];\n  }\n  if (codigo === \"Sin código\" && evento.summary) {\n    const matchSummary = evento.summary.match(/[Cc][oó]digo:\\s*([A-Za-z0-9-_]+)/i);\n    if (matchSummary) codigo = matchSummary[1];\n  }\n  return codigo;\n}\n\nfunction extraerDireccion(evento) {\n  let direccion = evento.location || \"Sin dirección\";\n  if (evento.summary) {\n    const matchDireccion = evento.summary.match(/[Dd]irecci[oó]n:\\s*([^-]+)/);\n    if (matchDireccion) direccion = matchDireccion[1].trim();\n  }\n  return direccion;\n}\n\nfunction extraerInteresado(evento) {\n  let interesado = \"Cliente\";\n  if (evento.summary) {\n    const matchInteresado = evento.summary.match(/[Ii]nteresado:\\s*([^-]+)/);\n    if (matchInteresado) interesado = matchInteresado[1].trim();\n  }\n  return interesado;\n}\n\n// Agrupar eventos por mes\nconst mesesAgrupados = {};\nconst mapaEventos = {}; // Mapa para guardar los datos completos por ID\n\ndatosEventos.forEach(evento => {\n  const fechaInicio = extraerFechaYHora(evento.start);\n  const fechaFin = extraerFechaYHora(evento.end);\n  if (!fechaInicio || !fechaFin) return;\n\n  const mes = fechaInicio.mes;\n  const dia = fechaInicio.dia;\n  const nombreMes = nombresMeses[mes];\n  const diaSemana = fechaInicio.diaSemana;\n\n  const codigoPropiedad = extraerCodigoPropiedad(evento);\n  const direccion = extraerDireccion(evento);\n  const interesado = extraerInteresado(evento);\n  const email = evento['attendees[0].email'] ||\n                (evento.attendees && evento.attendees[0] && evento.attendees[0].email) ||\n                \"Sin email\";\n\n  if (!mesesAgrupados[nombreMes]) mesesAgrupados[nombreMes] = [];\n  \n  const yaExiste = mesesAgrupados[nombreMes].some(\n    e => e.dia === dia && e.horaInicio === fechaInicio.hora && e.direccion === direccion\n  );\n  \n  if (!yaExiste) {\n    const eventoData = {\n      id: evento.id, // El rowId será el eventId del calendario\n      dia,\n      horaInicio: fechaInicio.hora,\n      horaFin: fechaFin.hora,\n      mes,\n      diaSemana,\n      direccion,\n      interesado,\n      codigoPropiedad,\n      email,\n      resumen: evento.summary || \"Visita programada\",\n      fechaIsoInicio: fechaInicio.isoString, // Fecha ISO de inicio\n      fechaIsoFin: fechaFin.isoString // Fecha ISO de fin\n    };\n    \n    mesesAgrupados[nombreMes].push(eventoData);\n    \n    // Guardar en el mapa usando la fecha ISO como clave\n    mapaEventos[fechaInicio.isoString] = eventoData;\n  }\n});\n\n// Orden de meses\nconst ordenMeses = [\n  \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\n  \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n];\nconst mesesOrdenados = Object.keys(mesesAgrupados).sort((a, b) => {\n  const idxA = ordenMeses.indexOf(a);\n  const idxB = ordenMeses.indexOf(b);\n  if (idxA !== -1 && idxB !== -1) return idxA - idxB;\n  if (idxA !== -1) return -1;\n  if (idxB !== -1) return 1;\n  return a.localeCompare(b);\n});\n\n// Crear sections en formato SendList\nconst sections = [];\nfor (const nombreMes of mesesOrdenados) {\n  const filas = mesesAgrupados[nombreMes];\n  if (filas.length === 0) continue;\n  const mes = filas[0].mes;\n  const emoji = getEmojiEstacional(mes);\n\n  // Ordenar por día y hora\n  filas.sort((a, b) => {\n    if (a.dia !== b.dia) return a.dia - b.dia;\n    return a.horaInicio.localeCompare(b.horaInicio);\n  });\n\n  const rows = filas.map(f => ({\n    id: f.fechaIsoInicio, // CAMBIO: usar la fecha ISO como ID del row\n    title: `📅 ${f.dia} de ${nombreMes} : ${formatearRangoHora(f.horaInicio, f.horaFin)}`,\n    description: `📍 ${f.direccion}\\n👤 ${f.interesado}\\n🏠 Código: ${f.codigoPropiedad}`\n  }));\n\n  sections.push({\n    title: `${emoji} ${nombreMes}`,\n    rows\n  });\n}\n\n// JSON final para enviar por WhatsApp (idéntico al formato SendList del primer código)\nconst headerObj = {\n  text: \"🔔 Visitas Agendadas\"\n};\nconst bodyObj = {\n  text: `Seleccioná una visita para reprogramar o cancelar\\n🕒 Cada visita tiene una duración de 30 minutos aprox.`\n};\nconst footerObj = {\n  text: \"\"\n};\nconst actionObj = {\n  list: {\n    sections: sections,\n    label: \"Seleccioná 👆\"\n  }\n};\n\nconst requestBody = {\n  header: headerObj,\n  body: bodyObj,\n  footer: footerObj,\n  action: actionObj,\n  type: \"list\",\n  to: remoteJid,\n  // Agregar metadata con el mapa de eventos para poder recuperar los datos\n  metadata: {\n    eventosMap: mapaEventos\n  }\n};\n\n// Para manejar la respuesta cuando se selecciona un item:\n// Función auxiliar para obtener datos del evento seleccionado\nfunction obtenerDatosEventoSeleccionado(fechaIsoSeleccionada) {\n  const evento = mapaEventos[fechaIsoSeleccionada];\n  if (evento) {\n    return {\n      fecha_iso: fechaIsoSeleccionada, // La fecha ISO que se seleccionó\n      event_id: evento.id, // El ID original del evento del calendario\n      fecha_iso_inicio: evento.fechaIsoInicio,\n      fecha_iso_fin: evento.fechaIsoFin,\n      direccion: evento.direccion,\n      interesado: evento.interesado,\n      codigo_propiedad: evento.codigoPropiedad,\n      email: evento.email\n    };\n  }\n  return null;\n}\n\n// Agregar la función al contexto global para uso posterior\nif (typeof global !== 'undefined') {\n  global.obtenerDatosEventoSeleccionado = obtenerDatosEventoSeleccionado;\n  global.mapaEventosActual = mapaEventos;\n}\n\nreturn [{ json: requestBody }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1180,320],"id":"fc9fc3a1-9084-459d-b685-209dd9e379cb","name":"Lista"},{"parameters":{"jsCode":"\nlet emailBuscado = '';\ntry {\n  const inputData = $input.first().json;\n  if (inputData && inputData['attendees[0].email']) {\n    emailBuscado = inputData['attendees[0].email'];\n  } else if (inputData && inputData.attendees && inputData.attendees[0] && inputData.attendees[0].email) {\n    emailBuscado = inputData.attendees[0].email;\n  }\n} catch (error) {\n  console.log(\"Error al obtener el email:\", error.message);\n}\n\n// Procesar todos los eventos de entrada\nconst events = $input.all();\n\n// Para debugging\nconsole.log(\"Número total de eventos a procesar:\", events.length);\nconsole.log(\"Email a buscar:\", emailBuscado || \"No se encontró email\");\n\n// Array para almacenar los eventos rojos que coinciden con el email\nconst eventosRojosFiltrados = [];\n\n// Verificar si tenemos un email para buscar\nif (!emailBuscado) {\n  console.log(\"No se encontró un email válido para filtrar. Devolviendo todos los eventos rojos.\");\n  \n  // Devolver todos los eventos rojos ya que no hay email para filtrar\n  events.forEach(item => {\n    const event = item.json;\n    \n    // Ignorar objetos que son solo timezone\n    if (event && typeof event === 'object' && \n        event.start === \"America/Argentina/Buenos_Aires\" && \n        event.end === \"America/Argentina/Buenos_Aires\") {\n      return;\n    }\n    \n    // Verificar que event y colorId existan\n    if (event && typeof event === 'object' && \n        (event.colorId === \"3\" || event.colorId === 3)) {\n      eventosRojosFiltrados.push({\n        ...event,\n        tipo: \"rojo\",\n        sinEmail: true\n      });\n    }\n  });\n} else {\n  // Si tenemos email, procesar eventos normalmente\n  console.log(\"\\n=== PROCESAMIENTO DE EVENTOS POR EMAIL ===\");\n  \n  // Convertir email a minúsculas para comparación insensible a mayúsculas\n  const emailBuscadoLowerCase = emailBuscado.toLowerCase();\n  \n  events.forEach(item => {\n    // Verificar que item.json existe\n    if (!item || !item.json) return;\n    \n    const event = item.json;\n    \n    // Ignorar objetos que son solo timezone\n    if (event.start === \"America/Argentina/Buenos_Aires\" && \n        event.end === \"America/Argentina/Buenos_Aires\") {\n      return;\n    }\n    \n    // Filtrar solo eventos ROJOS (colorId=11)\n    if (event.colorId === \"3\" || event.colorId === 3) {\n      let coincideEmail = false;\n      \n      // Verificar si el evento tiene attendees (asistentes)\n      if (event.attendees && Array.isArray(event.attendees)) {\n        // Buscar si alguno de los asistentes tiene el email buscado\n        coincideEmail = event.attendees.some(attendee => \n          attendee && attendee.email && \n          attendee.email.toLowerCase() === emailBuscadoLowerCase\n        );\n      }\n      \n      // Si no coincide por attendees, buscar en todo el evento\n      if (!coincideEmail) {\n        try {\n          const eventString = JSON.stringify(event).toLowerCase();\n          coincideEmail = eventString.includes(emailBuscadoLowerCase);\n        } catch (error) {\n          console.log(`Error al procesar evento: ${error.message}`);\n        }\n      }\n      \n      // Si encontramos coincidencia, agregar a la lista\n      if (coincideEmail) {\n        console.log(`Evento ROJO con email coincidente: ${event.summary || 'Sin título'}`);\n        eventosRojosFiltrados.push({\n          ...event,\n          tipo: \"rojo\"\n        });\n      }\n    }\n  });\n  \n  // Si no encontramos eventos con el email, devolver todos los eventos rojos\n  if (eventosRojosFiltrados.length === 0) {\n    console.log(\"\\n=== NO SE ENCONTRARON COINCIDENCIAS. DEVOLVIENDO TODOS LOS EVENTOS ROJOS ===\");\n    \n    events.forEach(item => {\n      if (!item || !item.json) return;\n      \n      const event = item.json;\n      \n      // Ignorar objetos timezone\n      if (event.start === \"America/Argentina/Buenos_Aires\" && \n          event.end === \"America/Argentina/Buenos_Aires\") {\n        return;\n      }\n      \n      if (event.colorId === \"3\" || event.colorId === 3) {\n        eventosRojosFiltrados.push({\n          ...event,\n          tipo: \"rojo\",\n          sinCoincidencia: true\n        });\n      }\n    });\n  }\n}\n\n// Registrar el resultado final\nconsole.log(`\\nResultado final: ${eventosRojosFiltrados.length} eventos rojos${emailBuscado ? ` para el email ${emailBuscado}` : ''}`);\n\n// Devolver eventos encontrados\nreturn [{\n  json: {\n    email: emailBuscado || \"No especificado\",\n    eventosRojos: eventosRojosFiltrados,\n    totalEventos: eventosRojosFiltrados.length\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[740,520],"id":"5105c9f7-b330-4147-a277-157f5e471f72","name":"getForCode"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Calendario').first().json.Evento }}","rightValue":"=reagendar","operator":{"type":"string","operation":"equals"},"id":"6671b8d5-40ea-46e0-830d-f67ff8c0f13f"}],"combinator":"and"},"renameOutput":true,"outputKey":"reagendar"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"ea3f8fa5-6749-4f18-9a4e-8bce2cd1c5fa","leftValue":"={{ $('Calendario').first().json.Evento }}","rightValue":"cancelar","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"cancelar"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[960,520],"id":"5c777c38-149a-400b-912a-da3fa553d393","name":"Switch"},{"parameters":{"assignments":{"assignments":[{"id":"39c2f302-03be-4464-a17a-d7cc481d6d44","name":"=response","value":"=CANCELAR_ENVIADO","type":"string"}]},"options":{}},"id":"f0464eac-3bdd-4aa8-9bfd-21d7535e4208","name":"Success","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1840,820]},{"parameters":{"jsCode":"// Obtener los datos del nodo anterior (eventos rojos filtrados)\nconst datosEventos = $input.first()?.json?.eventosRojos || [];\n\n// Verificar si tenemos datos\nconst hayDatos = datosEventos && datosEventos.length > 0;\n\n// Teléfono del cliente dinámico\nlet remoteJid = \"\";\ntry {\n  remoteJid = $('Calendario').first().json.numero_cliente || \"\";\n} catch {\n  remoteJid = \"\";\n}\n\n// Si NO hay datos, enviar un mensaje simple en lugar de una lista\nif (!hayDatos) {\n  const mensajeSinVisitas = {\n    to: remoteJid,\n    type: \"text\",\n    text: `*No tenés visitas para cancelar* ❌\\n\\nActualmente no hay visitas programadas que puedas cancelar. Cuando tengas visitas agendadas, podrás usar esta opción para cancelarlas.\\n\\nSi necesitás agendar una nueva visita, por favor compartí el enlace de la propiedad que te interesa.`\n  };\n  return [{ json: mensajeSinVisitas }];\n}\n\n// Función para obtener el emoji estacional según el mes (hemisferio sur)\nfunction getEmojiEstacional(mes) {\n  if (mes >= 3 && mes <= 5) return \"🍂\";\n  if (mes >= 6 && mes <= 8) return \"❄️\";\n  if (mes >= 9 && mes <= 11) return \"🌸\";\n  return \"☀️\";\n}\n\nconst nombresMeses = {\n  1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril',\n  5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto',\n  9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'\n};\n\nconst nombresDias = {\n  0: 'Domingo', 1: 'Lunes', 2: 'Martes', 3: 'Miércoles',\n  4: 'Jueves', 5: 'Viernes', 6: 'Sábado'\n};\n\n// Extraer fecha y hora de una cadena ISO\nfunction extraerFechaYHora(isoString) {\n  if (!isoString) return null;\n  const match = isoString.match(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2})/);\n  if (match) {\n    const fechaCompleta = new Date(`${match[1]}-${match[2]}-${match[3]}T${match[4]}:${match[5]}:00`);\n    return {\n      anio: parseInt(match[1], 10),\n      mes: parseInt(match[2], 10),\n      dia: parseInt(match[3], 10),\n      hora: `${match[4]}:${match[5]}`,\n      fechaCompleta: fechaCompleta,\n      diaSemana: nombresDias[fechaCompleta.getDay()],\n      isoString: `${match[1]}-${match[2]}-${match[3]}T${match[4]}:${match[5]}` // Agregar formato ISO requerido\n    };\n  }\n  return null;\n}\n\nfunction formatearRangoHora(horaInicio, horaFin) {\n  // Mismo formato que en la otra lista\n  return `${horaInicio} a ${horaFin}`;\n}\n\nfunction extraerCodigoPropiedad(evento) {\n  let codigo = \"Sin código\";\n  if (evento.description) {\n    const matchDescripcion = evento.description.match(/[Cc][oó]digo\\s*(?:propiedad|de\\s*propiedad)?:\\s*([A-Za-z0-9-_]+)/i);\n    if (matchDescripcion) codigo = matchDescripcion[1];\n  }\n  if (codigo === \"Sin código\" && evento.summary) {\n    const matchSummary = evento.summary.match(/[Cc][oó]digo:\\s*([A-Za-z0-9-_]+)/i);\n    if (matchSummary) codigo = matchSummary[1];\n  }\n  return codigo;\n}\n\nfunction extraerDireccion(evento) {\n  let direccion = evento.location || \"Sin dirección\";\n  if (evento.summary) {\n    const matchDireccion = evento.summary.match(/[Dd]irecci[oó]n:\\s*([^-]+)/);\n    if (matchDireccion) direccion = matchDireccion[1].trim();\n  }\n  return direccion;\n}\n\nfunction extraerInteresado(evento) {\n  let interesado = \"Cliente\";\n  if (evento.summary) {\n    const matchInteresado = evento.summary.match(/[Ii]nteresado:\\s*([^-]+)/);\n    if (matchInteresado) interesado = matchInteresado[1].trim();\n  }\n  return interesado;\n}\n\n// Agrupar eventos por mes\nconst mesesAgrupados = {};\nconst mapaEventos = {}; // Mapa para guardar los datos completos por fecha ISO\n\ndatosEventos.forEach(evento => {\n  const fechaInicio = extraerFechaYHora(evento.start);\n  const fechaFin = extraerFechaYHora(evento.end);\n  if (!fechaInicio || !fechaFin) return;\n\n  const mes = fechaInicio.mes;\n  const dia = fechaInicio.dia;\n  const nombreMes = nombresMeses[mes];\n  const diaSemana = fechaInicio.diaSemana;\n\n  const codigoPropiedad = extraerCodigoPropiedad(evento);\n  const direccion = extraerDireccion(evento);\n  const interesado = extraerInteresado(evento);\n  const email = evento['attendees[0].email'] ||\n                (evento.attendees && evento.attendees[0] && evento.attendees[0].email) ||\n                \"Sin email\";\n\n  if (!mesesAgrupados[nombreMes]) mesesAgrupados[nombreMes] = [];\n  \n  const yaExiste = mesesAgrupados[nombreMes].some(\n    e => e.dia === dia && e.horaInicio === fechaInicio.hora && e.direccion === direccion\n  );\n  \n  if (!yaExiste) {\n    const eventoData = {\n      id: evento.id, // El ID original del evento del calendario\n      dia,\n      horaInicio: fechaInicio.hora,\n      horaFin: fechaFin.hora,\n      mes,\n      diaSemana,\n      direccion,\n      interesado,\n      codigoPropiedad,\n      email,\n      resumen: evento.summary || \"Visita programada\",\n      fechaIsoInicio: fechaInicio.isoString, // Fecha ISO de inicio\n      fechaIsoFin: fechaFin.isoString // Fecha ISO de fin\n    };\n    \n    mesesAgrupados[nombreMes].push(eventoData);\n    \n    // Guardar en el mapa usando la fecha ISO como clave\n    mapaEventos[fechaInicio.isoString] = eventoData;\n  }\n});\n\n// Orden de meses\nconst ordenMeses = [\n  \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\n  \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n];\nconst mesesOrdenados = Object.keys(mesesAgrupados).sort((a, b) => {\n  const idxA = ordenMeses.indexOf(a);\n  const idxB = ordenMeses.indexOf(b);\n  if (idxA !== -1 && idxB !== -1) return idxA - idxB;\n  if (idxA !== -1) return -1;\n  if (idxB !== -1) return 1;\n  return a.localeCompare(b);\n});\n\n// Crear sections en formato SendList\nconst sections = [];\nfor (const nombreMes of mesesOrdenados) {\n  const filas = mesesAgrupados[nombreMes];\n  if (filas.length === 0) continue;\n  const mes = filas[0].mes;\n  const emoji = getEmojiEstacional(mes);\n\n  filas.sort((a, b) => {\n    if (a.dia !== b.dia) return a.dia - b.dia;\n    return a.horaInicio.localeCompare(b.horaInicio);\n  });\n\n  const rows = filas.map(f => ({\n    id: f.fechaIsoInicio, // CAMBIO: usar la fecha ISO como ID del row\n    title: `📅 ${f.dia} de ${nombreMes} : ${formatearRangoHora(f.horaInicio, f.horaFin)}`,\n    description: `📍 ${f.direccion}\\n👤 ${f.interesado}\\n🏠 Código: ${f.codigoPropiedad}`\n  }));\n\n  sections.push({\n    title: `${emoji} ${nombreMes}`,\n    rows\n  });\n}\n\n// JSON final para enviar por WhatsApp (idéntico al formato SendList del primer código)\nconst headerObj = {\n  text: \"❌ Cancelar Visitas\"\n};\nconst bodyObj = {\n  text: `Seleccioná una visita para cancelar\\n🕒 Cada visita tiene una duración de 30 minutos aprox.`\n};\nconst footerObj = {\n  text: \"🔴 Seleccioná la visita que deseás cancelar\"\n};\nconst actionObj = {\n  list: {\n    sections: sections,\n    label: \"Seleccioná 👆\"\n  }\n};\n\nconst requestBody = {\n  header: headerObj,\n  body: bodyObj,\n  footer: footerObj,\n  action: actionObj,\n  type: \"list\",\n  to: remoteJid,\n  // Agregar metadata con el mapa de eventos para poder recuperar los datos\n  metadata: {\n    eventosMap: mapaEventos\n  }\n};\n\n// Para manejar la respuesta cuando se selecciona un item:\n// Función auxiliar para obtener datos del evento seleccionado\nfunction obtenerDatosEventoCancelacion(fechaIsoSeleccionada) {\n  const evento = mapaEventos[fechaIsoSeleccionada];\n  if (evento) {\n    return {\n      fecha_iso: fechaIsoSeleccionada, // La fecha ISO que se seleccionó\n      event_id: evento.id, // El ID original del evento del calendario\n      fecha_iso_inicio: evento.fechaIsoInicio,\n      fecha_iso_fin: evento.fechaIsoFin,\n      direccion: evento.direccion,\n      interesado: evento.interesado,\n      codigo_propiedad: evento.codigoPropiedad,\n      email: evento.email\n    };\n  }\n  return null;\n}\n\n// Agregar la función al contexto global para uso posterior\nif (typeof global !== 'undefined') {\n  global.obtenerDatosEventoCancelacion = obtenerDatosEventoCancelacion;\n  global.mapaEventosCancelacion = mapaEventos;\n}\n\nreturn [{ json: requestBody }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1180,720],"id":"1cb2993d-3c08-4976-95d6-5192efb0b8d2","name":"Lista1"},{"parameters":{"method":"POST","url":"={{ $('Calendario').first().json.url }}/message/sendList/{{ $('Calendario').first().json.instancia }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"apikey","value":"={{ $('Calendario').first().json.apikey }}"}]},"sendBody":true,"contentType":"form-urlencoded","bodyParameters":{"parameters":[{"name":"number","value":"={{ $json.number }}"},{"name":"title","value":"={{ $json.title }}"},{"name":"description","value":"={{ $json.description }}"},{"name":"buttonText","value":"={{ $json.buttonText }}"},{"name":"footerText","value":"={{ $json.footerText }}"},{"name":"sections","value":"={{ $json.sections }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2320,820],"id":"e1d84d70-e9f2-4333-bf29-88d51e77e86f","name":"cancelar","alwaysOutputData":true,"onError":"continueRegularOutput"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"ce3e00c5-d3a3-4552-bc8a-8d81d833cd66","leftValue":"={{ $('Obtener eventos').item.json.hasOwnProperty('items') && $('Obtener eventos').item.json.items.length > 0 }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[300,520],"id":"03a2372a-2433-43cc-bc23-fa7e0389cfd7","name":"If","disabled":true},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8556af96-b20f-4490-9862-36f04aa4ee38","leftValue":"={{ $json.type }}","rightValue":"text","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1400,320],"id":"916abb6d-3da8-450e-9d19-33442582533b","name":"If1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8556af96-b20f-4490-9862-36f04aa4ee38","leftValue":"={{ $json.type }}","rightValue":"text","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1400,720],"id":"1cfd0c7b-df98-463d-8b24-d520b0bb8ac2","name":"If2"},{"parameters":{"assignments":{"assignments":[{"id":"39c2f302-03be-4464-a17a-d7cc481d6d44","name":"=response","value":"=REAGENDAR_ENVIADA","type":"string"}]},"options":{}},"id":"eb740c73-8a9a-454b-90a1-61cce87c4198","name":"Success2","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1840,220]},{"parameters":{"assignments":{"assignments":[{"id":"39c2f302-03be-4464-a17a-d7cc481d6d44","name":"=response","value":"=CANCELAR_ENVIADO","type":"string"}]},"options":{}},"id":"9bc7f7c7-edf5-4256-8ce2-87e0ab94d35e","name":"Success3","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1840,620]},{"parameters":{"content":"## Parametros necesarios\n{\n    \"numero_cliente\": \"5492254423359\",\n    \"fecha_cita\": null,\n    \"Nombre\": \"Juan Carlos\",\n    \"Evento\": \"cancelar\", or \"reagendar\"\n    \"correo_electronico\": \"\",\n    \"session_id\": \"\",\n    \"url\": \"\",\n    \"instancia\": \"\",\n    \"apikey\": \"\"\n  }(https://docs.n8n.io/workflows/sticky-notes/)","height":300,"width":380},"type":"n8n-nodes-base.stickyNote","position":[-160,-80],"typeVersion":1,"id":"c79b9cff-a964-4959-a281-0bbc38f9b9c2","name":"Sticky Note1"},{"parameters":{"method":"POST","url":"=https://gate.whapi.cloud/messages/text","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"typing_time","value":"={{1}}"},{"name":"body","value":"={{ $json.text.replace(/\\n/g,'\\n').replace(/\\\"/g,'\\'') }}"},{"name":"to","value":"={{ $('Calendario').first().json.numero_cliente }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1620,220],"id":"6bbd4ca5-97bb-433b-bd2e-429cccc37274","name":"Texto","credentials":{"httpHeaderAuth":{"id":"ekaTMbiKps3wYx80","name":"Whapi - Agente inmobiliario"}}},{"parameters":{"method":"POST","url":"https://gate.whapi.cloud/messages/interactive","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"},{"name":"content-type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"header","value":"={{ $json.header }}"},{"name":"body","value":"={{ $json.body }}"},{"name":"footer","value":"={{ $json.footer }}"},{"name":"action","value":"={{ $json.action }}"},{"name":"type","value":"={{ $json.type }}"},{"name":"to","value":"={{ $('Calendario').first().json.numero_cliente }}"}]},"options":{"response":{"response":{"fullResponse":true,"responseFormat":"json"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1620,420],"id":"eee21d65-4004-436d-b25c-d119bbc03aba","name":"HTTP Request2","credentials":{"httpHeaderAuth":{"id":"ekaTMbiKps3wYx80","name":"Whapi - Agente inmobiliario"}}},{"parameters":{"method":"POST","url":"=https://gate.whapi.cloud/messages/text","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"},{"name":"authorization","value":"=Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"typing_time","value":"={{1}}"},{"name":"body","value":"={{ $json.message.replace(/\\n/g,'\\n').replace(/\\\"/g,'\\'') }}"},{"name":"to","value":"={{ $('Calendario').first().json.numero_cliente }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1080,960],"id":"49b08397-1735-4f91-9ee7-2257db860ed8","name":"Texto1"},{"parameters":{"method":"POST","url":"https://gate.whapi.cloud/messages/interactive","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"},{"name":"content-type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"header","value":"={{ $json.header }}"},{"name":"body","value":"={{ $json.body }}"},{"name":"footer","value":"={{ $json.footer }}"},{"name":"action","value":"={{ $json.action }}"},{"name":"type","value":"={{ $json.type }}"},{"name":"to","value":"={{ $('Calendario').first().json.numero_cliente }}"}]},"options":{"response":{"response":{"fullResponse":true,"responseFormat":"json"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1620,840],"id":"4c659882-34e6-4222-9722-ec4d23bb300f","name":"HTTP Request","credentials":{"httpHeaderAuth":{"id":"ekaTMbiKps3wYx80","name":"Whapi - Agente inmobiliario"}}},{"parameters":{"method":"POST","url":"=https://gate.whapi.cloud/messages/text","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"typing_time","value":"={{1}}"},{"name":"body","value":"={{ $json.text.replace(/\\n/g,'\\n').replace(/\\\"/g,'\\'') }}"},{"name":"to","value":"={{ $('Calendario').first().json.numero_cliente }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1620,640],"id":"afa7701b-395e-4c53-a155-119677d482bc","name":"Texto2","credentials":{"httpHeaderAuth":{"id":"ekaTMbiKps3wYx80","name":"Whapi - Agente inmobiliario"}}},{"parameters":{"method":"POST","url":"={{ $('Calendario').first().json.url }}/message/sendList/{{ $('Calendario').first().json.instancia }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"apikey","value":"={{ $('Calendario').first().json.apikey }}"}]},"sendBody":true,"contentType":"form-urlencoded","bodyParameters":{"parameters":[{"name":"number","value":"={{ $json.number }}"},{"name":"title","value":"={{ $json.title }}"},{"name":"description","value":"={{ $json.description }}"},{"name":"buttonText","value":"={{ $json.buttonText }}"},{"name":"footerText","value":"={{ $json.footerText }}"},{"name":"sections","value":"={{ $json.sections }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1300,20],"id":"c488f46b-215d-42ff-ba3a-c498ba097e33","name":"Reagendar","alwaysOutputData":true,"onError":"continueRegularOutput"}],"connections":{"Calendario":{"main":[[{"node":"Obtener eventos","type":"main","index":0}]]},"Obtener eventos":{"main":[[{"node":"If","type":"main","index":0}]]},"Split Out2":{"main":[[{"node":"getForCode","type":"main","index":0}]]},"Lista":{"main":[[{"node":"If1","type":"main","index":0}]]},"getForCode":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Lista","type":"main","index":0}],[{"node":"Lista1","type":"main","index":0}]]},"Lista1":{"main":[[{"node":"If2","type":"main","index":0}]]},"If":{"main":[[{"node":"Split Out2","type":"main","index":0}]]},"If1":{"main":[[{"node":"Texto","type":"main","index":0}],[{"node":"HTTP Request2","type":"main","index":0}]]},"If2":{"main":[[{"node":"Texto2","type":"main","index":0}],[{"node":"HTTP Request","type":"main","index":0}]]},"Texto":{"main":[[{"node":"Success2","type":"main","index":0}]]},"HTTP Request2":{"main":[[{"node":"Success1","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Success","type":"main","index":0}]]},"Texto2":{"main":[[{"node":"Success3","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"cancelar":[{"json":{"error":{"code":"ERR_INVALID_URL","input":"/message/sendList/"}}}],"Calendario":[{"json":{"numero_cliente":"5492254423359","fecha_cita":null,"Nombre":null,"Evento":"reagendar","correo_electronico":"casserafernando@gmail.com"}}]},"versionId":"0d62449e-d147-46ce-91e3-18f0a8e51379","triggerCount":0,"tags":[]}