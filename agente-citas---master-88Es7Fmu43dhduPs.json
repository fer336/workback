{"createdAt":"2025-06-28T03:55:59.462Z","updatedAt":"2025-06-28T04:03:03.628Z","id":"88Es7Fmu43dhduPs","name":"AGENTE CITAS - MASTER","active":false,"isArchived":false,"nodes":[{"parameters":{"batchSize":"=1","options":{"reset":false}},"id":"32381d6a-8d2c-4dbe-8b6c-68942256d94d","name":"Loop Over Items","type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[4860,1260],"alwaysOutputData":false,"executeOnce":false},{"parameters":{"fieldToSplitOut":"messages","options":{}},"id":"876f996a-e51f-482d-8d39-8b8c7ed0f556","name":"Split Out","type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[4640,1260]},{"parameters":{"jsCode":"// --- Funciones de procesamiento de texto ---\n\n// Función para dividir texto en fragmentos con tiempo de lectura\nfunction splitTextIntoChunks(text, maxChars = 200) {\n  // Si el texto es muy corto, devolvemos un solo fragmento\n  if (!text || text.length <= maxChars) {\n    return [{\n      parte: 1,\n      texto: text || '',\n      time: calculateReadingTime(text || '')\n    }];\n  }\n\n  const chunks = [];\n  let currentChunk = '';\n  let partNumber = 1;\n  \n  // Dividimos por palabras para no cortar palabras a la mitad\n  const words = text.split(' ');\n  \n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const potentialChunk = currentChunk ? currentChunk + ' ' + word : word;\n    \n    // Si agregar la siguiente palabra excede el límite\n    if (potentialChunk.length > maxChars) {\n      // Si la palabra sola es más larga que maxChars, la cortamos\n      if (word.length > maxChars) {\n        // Guardamos el chunk actual si tiene contenido\n        if (currentChunk) {\n          chunks.push({\n            parte: partNumber++,\n            texto: currentChunk.trim(),\n            time: calculateReadingTime(currentChunk.trim())\n          });\n        }\n        \n        // Cortamos la palabra larga en pedazos\n        let remainingWord = word;\n        while (remainingWord.length > maxChars) {\n          chunks.push({\n            parte: partNumber++,\n            texto: remainingWord.substring(0, maxChars),\n            time: calculateReadingTime(remainingWord.substring(0, maxChars))\n          });\n          remainingWord = remainingWord.substring(maxChars);\n        }\n        \n        // El resto de la palabra se convierte en el nuevo currentChunk\n        currentChunk = remainingWord;\n      } else {\n        // Guardamos el chunk actual y empezamos uno nuevo con esta palabra\n        chunks.push({\n          parte: partNumber++,\n          texto: currentChunk.trim(),\n          time: calculateReadingTime(currentChunk.trim())\n        });\n        currentChunk = word;\n      }\n    } else {\n      // Si cabe, agregamos la palabra al chunk actual\n      currentChunk = potentialChunk;\n    }\n  }\n  \n  // Agregar el último chunk si queda algo\n  if (currentChunk.trim()) {\n    chunks.push({\n      parte: partNumber,\n      texto: currentChunk.trim(),\n      time: calculateReadingTime(currentChunk.trim())\n    });\n  }\n  \n  return chunks;\n}\n\n// Función para calcular el tiempo de lectura basado en la longitud del texto\nfunction calculateReadingTime(text) {\n  const length = text.length;\n  \n  if (length > 150) {\n    return 4; // segundos\n  } else if (length >= 50) {\n    return 3; // segundos\n  } else {\n    return 1; // segundo\n  }\n}\n\n// Función para determinar si un texto necesita ser dividido\nfunction needsSplitting(text) {\n  if (!text || typeof text !== 'string') return false;\n  \n  // Criterios: más de 500 caracteres o más de 100 palabras\n  const charCount = text.length;\n  const wordCount = text.split(/\\s+/).filter(word => word.length > 0).length;\n  \n  return charCount > 500 || wordCount > 100;\n}\n\n// Función para procesar el texto y dividirlo inteligentemente (función original mejorada)\nfunction processAndSplitText(textInput) {\n  // Asegúrate de que textInput sea un string o pueda ser convertido\n  let text = textInput;\n\n  // Si la entrada no es un string\n  if (typeof text !== 'string') {\n    // Si es null o undefined, simplemente devolvemos un array vacío\n    if (text === null || text === undefined) {\n      return [];\n    }\n\n    // Si es un objeto, intentamos encontrar campos comunes que contengan texto\n    if (typeof text === 'object') {\n      if (text.text) {\n        text = text.text;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.type === 'text' && text.text) {\n        text = text.text;\n      } else if (text.output) {\n        // Si output es un string, lo usamos\n        if (typeof text.output === 'string') {\n          text = text.output;\n        } else {\n          // Si output es un objeto o array, intentamos extraer de ahí\n          const extracted = extractTextContent(text.output);\n          if (extracted) {\n            text = extracted;\n          } else {\n            // Si no pudimos extraer, intentamos convertir todo el objeto a string\n            try {\n              text = JSON.stringify(text);\n            } catch (e) {\n              console.error(\"No se pudo serializar el objeto a string:\", e);\n              return [];\n            }\n          }\n        }\n      } else {\n        // Si no encontramos campos de texto comunes ni 'output', intentamos convertir a string\n        try {\n          text = JSON.stringify(text);\n        } catch (e) {\n          console.error(\"No se pudo serializar el objeto a string:\", e);\n          return [];\n        }\n      }\n    } else {\n      // Si no es string, objeto, null o undefined, devolvemos vacío\n      console.warn(\"Entrada a processAndSplitText no es string, objeto, null o undefined:\", typeof text);\n      return [];\n    }\n  }\n\n  // Si después de los intentos no tenemos un string válido, devolvemos vacío\n  if (typeof text !== 'string' || text.trim() === '') {\n    return [];\n  }\n\n  // Ahora que tenemos un string, procesamos el formato\n  const processedText = text\n    .replace(/\\*\\*(.+?)\\*\\*/g, '*$1*') // **texto** -> *texto*\n    .replace(/###\\s*/g, '')         // Elimina encabezados ###\n    .replace(/[¡¿!]/g, '');         // Elimina signos de exclamación e interrogación iniciales y finales\n\n  // Divide en líneas para análisis\n  const lines = processedText.split('\\n');\n\n  // Grupos para almacenar los mensajes\n  const messages = [];\n  let currentMessage = [];\n  let inNumberedSection = false;\n  let currentSectionNumber = null;\n\n  // Detectar secciones numeradas y agrupables\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    // Detecta si la línea es un encabezado numerado (ej: \"1. Tipo de propiedad:\")\n    const numberedHeaderMatch = line.match(/^\\s*(\\d+)\\.\\s+([^:]+):/);\n\n    if (numberedHeaderMatch) {\n      const sectionNumber = parseInt(numberedHeaderMatch[1]);\n\n      // Si estamos empezando una nueva sección numerada O si el número no es el siguiente esperado\n      if (!inNumberedSection || (inNumberedSection && sectionNumber !== currentSectionNumber + 1)) {\n        // Si tenemos contenido previo, guardamos como mensaje separado\n        if (currentMessage.length > 0) {\n          messages.push(currentMessage.join('\\n').trim());\n          currentMessage = [];\n        }\n        inNumberedSection = true;\n      }\n      currentSectionNumber = sectionNumber;\n      currentMessage.push(line);\n\n    } else if (line.trim() === '') {\n      // Una línea vacía puede terminar una sección si hay contenido previo\n      if (currentMessage.length > 0) {\n        // Si no estamos en una sección numerada, una línea vacía termina el mensaje actual\n        if (!inNumberedSection) {\n          messages.push(currentMessage.join('\\n').trim());\n          currentMessage = [];\n        } else {\n          // Si estamos en una sección numerada, una línea vacía se agrega al mensaje actual\n          currentMessage.push(line);\n        }\n      }\n\n    } else {\n      // Línea con contenido que no es un encabezado numerado\n      currentMessage.push(line);\n      inNumberedSection = false;\n    }\n  }\n\n  // Agregar el último mensaje si queda algo\n  if (currentMessage.length > 0) {\n    messages.push(currentMessage.join('\\n').trim());\n  }\n\n  // Filtrar mensajes vacíos y limpiar líneas vacías extra\n  return messages\n    .filter(msg => msg.length > 0)\n    .map(msg => {\n      // Eliminar líneas vacías múltiples dentro del mensaje\n      return msg.replace(/\\n{2,}/g, '\\n\\n');\n    });\n}\n\n// Función para extraer texto de diferentes estructuras de datos\nfunction extractTextContent(data) {\n  // Si la data es null o undefined, retornamos null inmediatamente\n  if (data === null || data === undefined) {\n    return null;\n  }\n\n  // Si es un string, lo retornamos directamente\n  if (typeof data === 'string') {\n    return data;\n  }\n\n  // Si es un array\n  if (Array.isArray(data)) {\n    // Iteramos sobre el array e intentamos extraer texto de cada elemento\n    for (const item of data) {\n      const extracted = extractTextContent(item);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    return null;\n  }\n\n  // Si es un objeto\n  if (typeof data === 'object') {\n    // Priorizamos campos comunes que suelen contener texto\n    if (data.text) {\n      return data.text;\n    }\n    if (data.message) {\n      return data.message;\n    }\n    // Si tiene un campo 'output', intentamos extraer texto de él\n    if (data.output !== undefined && data.output !== null) {\n      const extracted = extractTextContent(data.output);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    // Si tiene un campo 'response', intentamos extraer texto de él\n    if (data.response !== undefined && data.response !== null) {\n      const extracted = extractTextContent(data.response);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    // Si tiene un campo 'json', intentamos extraer texto de él\n    if (data.json !== undefined && data.json !== null) {\n      const extracted = extractTextContent(data.json);\n      if (extracted) {\n        return extracted;\n      }\n    }\n    // Si no encontramos campos de texto comunes ni estructuras anidadas esperadas,\n    // intentamos convertir el objeto completo a string como último recurso\n    try {\n      return JSON.stringify(data);\n    } catch (e) {\n      console.error(\"No se pudo serializar el objeto a string en extractTextContent:\", e);\n      return null;\n    }\n  }\n\n  // Si el tipo de dato no es manejado, retornamos null\n  console.warn(\"Tipo de dato no manejado en extractTextContent:\", typeof data);\n  return null;\n}\n\n// --- Lógica Principal con manejo seguro de nodos ---\nlet textToProcess = null;\n\ntry {\n  // Verificar si el nodo \"Cancelar evento\" existe y tiene datos\n  let cancelarEventoData = null;\n  try {\n    // Usamos try-catch para capturar errores si el nodo no existe\n    cancelarEventoData = $('Cancelar evento');\n    if (cancelarEventoData && cancelarEventoData.first() && cancelarEventoData.first().json) {\n      if (cancelarEventoData.first().json.response !== undefined) {\n        textToProcess = extractTextContent(cancelarEventoData.first().json.response);\n      } else {\n        textToProcess = extractTextContent(cancelarEventoData.first().json);\n      }\n    }\n  } catch (e) {\n    // Silenciosamente ignoramos errores si el nodo no existe\n    console.log(\"Nodo 'Cancelar evento' no disponible o sin datos válidos\");\n  }\n  \n  // Solo intentamos acceder a AGE3 si aún no hemos encontrado texto para procesar\n  if (!textToProcess) {\n    try {\n      // Usamos try-catch para capturar errores si el nodo no existe\n      const age3Data = $('AGE3');\n      if (age3Data && age3Data.first() && age3Data.first().json) {\n        if (age3Data.first().json.output !== undefined) {\n          textToProcess = extractTextContent(age3Data.first().json.output);\n        } else {\n          textToProcess = extractTextContent(age3Data.first().json);\n        }\n      }\n    } catch (e) {\n      // Silenciosamente ignoramos errores si el nodo no existe\n      console.log(\"Nodo 'AGE3' no disponible o sin datos válidos\");\n    }\n  }\n  \n  // Si no hemos encontrado datos en los nodos específicos, intentamos con $input directamente\n  if (!textToProcess) {\n    try {\n      const inputItems = $input.all();\n      if (inputItems && inputItems.length > 0 && inputItems[0].json) {\n        textToProcess = extractTextContent(inputItems[0].json);\n      }\n    } catch (e) {\n      console.log(\"No se pudo acceder a los datos de entrada directamente:\", e.message);\n    }\n  }\n  \n  // Procesar y retornar el resultado\n  if (textToProcess) {\n    const textArray = processAndSplitText(textToProcess);\n    \n    // Procesar cada mensaje y dividirlo en chunks si es necesario\n    const processedMessages = [];\n    \n    for (const message of textArray) {\n      if (needsSplitting(message)) {\n        // Si el mensaje es largo, lo dividimos en chunks\n        const chunks = splitTextIntoChunks(message);\n        processedMessages.push(...chunks);\n      } else {\n        // Si el mensaje es corto, lo agregamos tal cual con tiempo de lectura\n        processedMessages.push({\n          parte: processedMessages.length + 1,\n          texto: message,\n          time: calculateReadingTime(message)\n        });\n      }\n    }\n    \n    // Re-numerar las partes para que sean consecutivas\n    processedMessages.forEach((msg, index) => {\n      msg.parte = index + 1;\n    });\n    \n    // Devolvemos la estructura con los mensajes procesados\n    return [{json: {messages: processedMessages, totalParts: processedMessages.length}}];\n  } else {\n    // Si no se pudo obtener ni procesar texto, devolvemos un array vacío\n    return [{json: {messages: [], totalParts: 0}}];\n  }\n} catch (error) {\n  // Capturamos cualquier error no manejado y devolvemos un objeto con información del error\n  console.error(\"Error general en el nodo:\", error.message);\n  return [{json: {messages: [], totalParts: 0, error: error.message}}];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4420,1260],"id":"abd29851-3bf1-478a-8b91-1bafdd3000ea","name":"Separa datos"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"leftValue":"={{ $json.output.trim() }}","rightValue":"DISPONIBILIDAD_ENVIADA","operator":{"type":"string","operation":"equals"},"id":"a5815733-94ac-45ad-924d-2d0f7ff43d95"}],"combinator":"and"},"renameOutput":true,"outputKey":"Disponibildiad"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"f9031e7e-158c-460e-8e57-c3aac4b8bda8","leftValue":"={{ $json.output.trim() }}","rightValue":"REAGENDAR_ENVIADA","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Reagendar"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"0b9fb62f-0af6-4f05-81f9-7eedcf6b6bf6","leftValue":"={{ $json.output.trim() }}","rightValue":"CANCELAR_ENVIADO","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Cacelar"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"68a4c039-97cc-425f-b3ed-d8621a725305","leftValue":"={{ $json.output.trim() }}","rightValue":"\"DISPONIBILIDAD_ENVIADA\"","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Disponibildiad"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"619a91cb-6f17-4d04-9df5-8113f798a6ed","leftValue":"={{ $json.output.trim() }}","rightValue":"CANCELAR_ENVIADA","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Cancelar"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"f9dcdadc-c2c1-46d2-b6b1-67c91dd8ffe6","leftValue":"={{ $json.output.trim() }}","rightValue":" DISPONIBILIDAD_ENVIADA\\n","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"9fb87954-32ca-42db-86a5-fedd4834a548","leftValue":"={{ $json.output }}","rightValue":"ERROR","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}}]},"looseTypeValidation":true,"options":{"fallbackOutput":"extra"}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[8360,240],"id":"5c52782b-792c-4a1f-95f1-580920d78f6a","name":"Switch"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.msg.type }}","rightValue":"voice","operator":{"type":"string","operation":"equals"},"id":"c203e3f3-cdae-4308-b7ca-2300800248e7"}],"combinator":"and"},"renameOutput":true,"outputKey":"Audio"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"0cb14635-2673-408e-86db-ce9e0373674b","leftValue":"={{ $json.msg.type }}","rightValue":"text","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Text"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"462a2dc9-b455-4b67-a55b-15ce1554f0e8","leftValue":"={{ $json.msg.type }}","rightValue":"reply","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"button"}]},"options":{}},"id":"d71e55de-abb0-4109-ac1c-3b2db2838d6f","name":"Message Type","type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[2160,1160]},{"parameters":{"promptType":"define","text":"={{ $json.message }}","options":{"systemMessage":"=# Prompt para Juli - Asistente de Citas Médicas\n\n## Rol\n\nSos **Juli**, asistente de citas médicas. Tu saludo inicial siempre es: \"¡Hola! Soy Juli 😊 ¿En qué te puedo ayudar hoy?\"\n\nTenés experiencia en:\n- Comunicación empática con pacientes\n- Coordinación eficiente de turnos\n- Procesos administrativos médicos\n\nTu forma de comunicarte es **cálida, cercana y típicamente argentina**. Usás un lenguaje cotidiano, claro y amigable. Evitás tecnicismos médicos y mantenés siempre la precisión en los datos.\n\n## Tarea\n\nTu trabajo principal es ayudar a los pacientes con sus turnos médicos:\n- **Sacar turnos nuevos** de manera simple y amigable\n- **Cambiar turnos existentes** cuando lo necesiten\n- **Cancelar turnos** si no pueden asistir\n\nLo que hacés:\n- Conversás naturalmente mientras recopilás la información necesaria\n- Chequeás que todo esté disponible en el sistema\n- Confirmás cada dato de forma amigable (sin ser robótica)\n- Te asegurás de que todo quede bien registrado\n\nSolo podés dar turnos dentro del horario de atención del consultorio.\n\n## Contexto\n\nTrabajás en la recepción virtual de un consultorio médico. Tu trabajo es súper importante porque:\n- Los pacientes necesitan acceder a la atención médica\n- El consultorio necesita organizarse bien\n- Una buena coordinación mejora la experiencia de todos\n\nLa fecha y hora actual es: **{{$now}}**\n\n## Instrucciones\n\n### 📅 Horarios del Consultorio\n\n**Atendemos:**\n- De lunes a viernes\n\n**Horarios:**\n- **Por la mañana:** 8:00 a 12:00\n- **Por la tarde:** 14:00 a 19:00\n- **Cerrado al mediodía:** 12:00 a 14:00\n\n**No atendemos:**\n- Sábados y domingos\n- Feriados\n\n### 🗓️ Interpretación de Fechas\n\nCuando el paciente mencione fechas de forma natural, interpretá según **{{$now}}**:\n\n**Expresiones de días:**\n- \"hoy\" → el día actual\n- \"mañana\" → el día siguiente\n- \"pasado mañana\" → dos días después\n- \"ayer\" → no válido (ya pasó)\n\n**Expresiones de semanas:**\n- \"esta semana\" → la semana actual\n- \"la semana que viene\" / \"la próxima semana\" → la semana siguiente\n- \"en dos semanas\" → dos semanas después\n\n**Días específicos:**\n- \"el lunes\" → el próximo lunes (si hoy es lunes, será el lunes siguiente)\n- \"el lunes que viene\" → el lunes de la próxima semana\n- \"este viernes\" → el viernes de esta semana\n\n**Expresiones de meses:**\n- \"este mes\" → el mes actual\n- \"el mes que viene\" / \"el próximo mes\" → el mes siguiente\n- \"fin de mes\" → últimos días del mes actual\n\n**Importante:** Siempre confirmá la fecha exacta con el paciente usando un formato claro como \"¿Te referís al martes 15 de marzo?\"\n\n### 🔧 Herramientas del Sistema\n\n**1. `getCliente`** - Buscar si el paciente ya existe\n   - Usala después de que te den el email\n\n**2. `getCitas`** - Ver qué horarios están libres\n   - Usala cuando el paciente elija una fecha\n   - La fecha debe estar en formato: `YYYY-MM-DDTHH:MM`\n\n**3. `confirmar_fecha`** - Mostrar el resumen del turno\n   - EJECUTAR con todos los parámetros del turno\n   - La tool muestra automáticamente el formato de confirmación al paciente\n   - **DESPUÉS DE EJECUTARLA, SOLO RESPONDÉ: \"BUTTON_ENVIADO\"**\n   - No agregues ningún otro texto\n   - OBLIGATORIO antes de: `insertar_cita`, `modificar_cita` o `eliminar_cita`\n\n**4. `insertar_cita`** - Guardar el turno definitivamente\n\n**5. `modificar_cita`** - Cambiar un turno existente\n\n**6. `eliminar_cita`** - Cancelar un turno\n\n### 💬 Cómo Sacar un Turno Nuevo\n\n#### 1. **Saludo Inicial**\n\"¡Hola! Soy Juli 😊 ¿En qué te puedo ayudar hoy?\"\n\n#### 2. **Motivo de la Consulta**\n\"¿Para qué necesitás el turno?\" o \"¿Qué te anda pasando?\" (sin entrometerte demasiado)\n\n#### 3. **Nombre del Paciente**\n\"Genial, ¿me decís tu nombre completo?\" y después \"¿[Nombre] se escribe así...?\"\n\n#### 4. **Email**\n\"Perfecto, ¿tu email cuál es?\" \n- Chequeá que tenga @ y .com/.ar/etc\n- **Usá `getCliente`** para ver si ya está registrado\n\n#### 5. **Elegir el Horario**\n\"¿Qué día te queda cómodo? Acordate que atendemos de lunes a viernes, de 8 a 12 y de 14 a 19\"\n- Cuando te diga algo como \"mañana a la tarde\", traducilo a fecha exacta\n- Confirmá: \"¿Te sirve el martes 15 a las 15:00?\"\n- Convertí al formato ISO y **usá `getCitas`**\n\n#### 6. **Confirmar Todo**\n**EJECUTÁ `confirmar_fecha`** con los siguientes parámetros:\n- nombre: [NOMBRE_COMPLETO]\n- email: [EMAIL]\n- fecha: [FECHA en formato ISO]\n- hora: [HORA]\n- motivo: [RAZÓN]\n\n**IMPORTANTE:** \n- La tool mostrará automáticamente el resumen al paciente\n- **Tu única respuesta después de ejecutarla debe ser: \"BUTTON_ENVIADO\"**\n- No escribas nada más\n- Esperá la confirmación del paciente (SÍ/NO)\n\n#### 7. **Finalización**\n- Una vez que recibiste \"BUTTON_ENVIADO\" de `confirmar_fecha`\n- Y el paciente confirmó con \"SÍ\"\n- **EJECUTÁ INMEDIATAMENTE `insertar_cita`** (no preguntes de nuevo)\n- Mensaje final: \"¡Listo! Ya tenés tu turno confirmado 🎉\"\n\n### 🔄 Para Cambiar un Turno\n\n#### 1. **Entender qué Necesita**\n\"¿Necesitás cambiar un turno que ya tenés?\"\n\n#### 2. **Buscar el Turno**\n\"Dale, ¿me pasás tu email?\"\n- **Usá `getCliente`**\n\"¿De qué día y horario era el turno?\"\n\n#### 3. **Qué Quiere Cambiar**\n\"¿Querés cambiar el día/hora o el motivo de la consulta?\"\n\n#### 4. **Nuevo Horario**\nSi cambia fecha/hora:\n- \"¿Qué día te vendría mejor?\"\n- Convertí y **usá `getCitas`**\n\n#### 5. **Confirmar Cambios**\n\"Entonces cambiamos tu turno del [día anterior] al [día nuevo]. ¿Te parece bien?\"\n\n#### 6. **Aplicar Cambios**\nCon el OK del paciente, **usá `modificar_cita`**\n\n### 🗑️ Para Cancelar un Turno\n\n#### 1. **Confirmar la Intención**\n\"¿Necesitás cancelar tu turno?\"\n\n#### 2. **Buscar el Turno**\nIgual que para modificar\n\n#### 3. **Confirmar Cancelación**\n\"¿Estás seguro/a de cancelar el turno del [fecha] a las [hora]? Después no se puede recuperar\"\n\n#### 4. **Cancelar**\nSi confirma, **usá `eliminar_cita`**\n\"Listo, ya cancelé tu turno. Si necesitás sacar otro avisame 😊\"\n\n### ⚠️ Punto Crítico sobre `confirmar_fecha`\n\n**MUY IMPORTANTE:** \n\n**Cuando ejecutes `confirmar_fecha`:**\n1. La tool mostrará automáticamente el resumen al paciente\n2. **VOS SOLO DEBÉS RESPONDER: \"BUTTON_ENVIADO\"**\n3. Nada más. No agregues texto adicional.\n4. Esperá la respuesta del paciente (SÍ/NO)\n5. Cuando confirme con \"SÍ\", ejecutá la acción correspondiente\n\n**Ejemplo del flujo:**\n- Ejecutás `confirmar_fecha` → La tool muestra el resumen\n- Vos respondés: \"BUTTON_ENVIADO\"\n- Paciente responde: \"SÍ\"\n- Ejecutás la acción (insertar/modificar/eliminar)\n\n**RECORDÁ:** Después de ejecutar `confirmar_fecha`, tu ÚNICA respuesta debe ser \"BUTTON_ENVIADO\".\n\n### ⚠️ Cómo Confirmar Información\n\nEn vez de ser robótico, confirmá naturalmente:\n- ❌ \"Perfecto, confirmo que [dato]. ¿Es correcto?\"\n- ✅ \"Bárbaro, entonces sería [dato], ¿no?\" o \"Dale, anoto [dato], ¿está bien?\"\n\nEsperá siempre el OK antes de seguir. Si te corrigen, cambialo tranqui.\n\n### 🚨 Cuando Algo No Se Puede\n\n**Horario fuera de rango:**\n\"Uy, ese horario no puedo porque el consultorio está cerrado. Atendemos de lunes a viernes de 8 a 12 y de 14 a 19. ¿Qué horario de estos te queda cómodo?\"\n\n**Email raro:**\n\"Che, ¿me lo repetís? Creo que anoté mal el email\"\n\n**Fecha vieja:**\n\"Esa fecha ya pasó 😅 ¿Qué día de esta semana o la próxima preferís?\"\n\n**Sin confirmación:**\n\"Esperá, necesito que me confirmes antes de seguir. ¿Está bien así?\"\n\n**No encuentro el turno:**\n\"Mmm, no encuentro un turno con esos datos. ¿Puede ser otro día u horario? Si tenés el número de confirmación mejor\"\n\n**Cancelación sobre la hora:**\n\"Te aviso que normalmente pedimos 24 horas para cancelar. ¿Igual querés cancelarlo?\"\n\n### 🎯 Reglas de Oro\n\n**SIEMPRE:**\n- Usá un tono amigable y argentino\n- Confirmá cada dato de forma natural\n- Respetá el orden de las herramientas\n- Convertí las fechas naturales usando {{$now}} como referencia\n- Pasá todo a formato ISO antes de usar `getCitas`\n- **EJECUTÁ `confirmar_fecha` ANTES de cualquier acción final**\n- **Después de ejecutar `confirmar_fecha`, SOLO escribí: \"BUTTON_ENVIADO\"**\n- **Cuando el paciente confirme con \"SÍ\", ejecutá INMEDIATAMENTE la acción correspondiente**\n\n**NUNCA:**\n- Des turnos fuera del horario de atención\n- Sigas sin que el paciente confirme\n- Uses lenguaje muy formal o técnico\n- Asumas datos sin confirmar\n- **Escribas el resumen del turno manualmente**\n- **Agregues texto adicional después de ejecutar `confirmar_fecha`**\n- **Ejecutes acciones finales sin antes usar `confirmar_fecha`**\n\n### 💬 Tu Estilo de Comunicación\n\n- Sé cálido/a y cercano/a, como charlando con un conocido\n- Usá emojis cuando ayuden a la comunicación 😊\n- Hacé que el paciente se sienta cómodo\n- Si algo no se puede, ofrecé alternativas\n- Mantené la conversación ágil pero sin apurar\n\n### 📌 Recordá\n\n> **Tu trabajo ayuda a que la gente pueda cuidar su salud. Cada turno bien coordinado es un paciente que recibe la atención que necesita. ¡Hacelo con buena onda y precisión!**"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.9,"position":[3700,1160],"id":"2fc27920-9159-4221-858b-1541f86ad436","name":"Tester Prompt"},{"parameters":{"sessionIdType":"customKey","sessionKey":"=agente_citas:{{ $('V1').first().json.msg.telefono }}","sessionTTL":3600,"contextWindowLength":9},"type":"@n8n/n8n-nodes-langchain.memoryRedisChat","typeVersion":1.5,"position":[3460,1640],"id":"bc8d82af-7ba1-4fb2-a58e-16618100a234","name":"Redis Chat Memory","credentials":{"redis":{"id":"JMklVOvkU7koL2UG","name":"Redis"}}},{"parameters":{"method":"POST","url":"={{ $('Variables globales').item.json.server_url }}/message/sendReaction/tester","sendHeaders":true,"headerParameters":{"parameters":[{"name":"apikey","value":"={{ $('Variables globales').item.json.apikey }}"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={   \n    \"key\": {\n        \"remoteJid\": \"{{ $('Variables globales').item.json.TelefonoCliente }}@s.whatsapp.net\",\n        \"fromMe\":false,\n        \"id\": \"{{ $('Variables globales').item.json.idMensaje }}\"\n    },\n    \"reaction\": \"⛔\"\n} ","options":{}},"id":"33d0d47f-f1d5-4ff4-b14d-38a75071edaf","name":"Reaction3","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[8820,380],"disabled":true},{"parameters":{"workflowId":{"__rl":true,"value":"o8xV7KjMjwGmMY54","mode":"list","cachedResultName":"SUB TAREA - OBTENER NOMBRE O INSERTAR"},"workflowInputs":{"mappingMode":"defineBelow","value":{"numero":"={{ $('V1').first().json.msg.telefono }}","servidor_db":"https://db.innovasoftpro.dev","idTabla":"m0fz2s4w73upduq","nombre_columna":"Telefono","pushname":"={{ $('V1').first().json.msg.nombre }}","token":"8swibk167yA8yLIM6pwCwuTBsnup15m4dFJjMDag"},"matchingColumns":[],"schema":[{"id":"servidor_db","displayName":"servidor_db","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"idTabla","displayName":"idTabla","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"token","displayName":"token","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"numero","displayName":"numero","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"nombre_columna","displayName":"nombre_columna","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"pushname","displayName":"pushname","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"servidor_evo","displayName":"servidor_evo","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":true},{"id":"id_mensaje","displayName":"id_mensaje","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":true}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1060,1500],"id":"4bb21619-8a2b-4a8c-ba86-61963baf003e","name":"Validar Cliente"},{"parameters":{"content":"## Validacion de cliente en base de datos","height":380,"width":340,"color":7},"type":"n8n-nodes-base.stickyNote","position":[500,1340],"typeVersion":1,"id":"b8a30471-6f2c-4875-b0c8-c742800ed91b","name":"Sticky Note"},{"parameters":{"workflowId":{"__rl":true,"value":"nJ8oQiqiXN62qgkS","mode":"list","cachedResultName":"SUB TAREA - ENLOCAR MSG"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{"waitForSubWorkflow":true}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2600,1160],"id":"e1bccc3d-4d41-431c-941b-bf5e307c53c5","name":"Encolado de msg"},{"parameters":{"sortFieldsUi":{"sortField":[{"fieldName":"timestamp"}]},"options":{}},"type":"n8n-nodes-base.sort","typeVersion":1,"position":[2840,1160],"id":"93136af9-3dd0-4fec-8186-4ff043782c42","name":"Sort"},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"text","renameField":true,"outputFieldName":"text"}]},"options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[3080,1160],"id":"31bb4de9-fb18-4409-b62e-14361ef29027","name":"Aggregate"},{"parameters":{"assignments":{"assignments":[{"id":"0fae28c9-d30a-4250-9a50-5b68c61164cf","name":"message","value":"={{ $json.text.join(\"\\n\") }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[3320,1160],"id":"2f8a9fe2-146d-491b-a23b-3079d05096ad","name":"chatInput"},{"parameters":{"assignments":{"assignments":[{"id":"79a702ff-5f8c-4814-bddf-5e3acb5a5f2e","name":"msg","value":"={{ JSON.stringify($('V1').first().json.msg)}}","type":"object"},{"id":"9337176e-e568-4efa-8c05-3bdb12ecfb61","name":"id_cliente","value":"={{ $('Validar Cliente').first().json.list[0].Id }}","type":"number"}]},"options":{}},"id":"88fe48ee-51f4-4eba-8c05-a30164f0f0ac","name":"Variables globales","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1460,1500],"notesInFlow":true},{"parameters":{"content":"## Variables Generales y necesarias","height":380,"width":340,"color":7},"type":"n8n-nodes-base.stickyNote","position":[100,1340],"typeVersion":1,"id":"9b61c82b-c39d-49fc-90bf-4a7aae1cdd75","name":"Sticky Note8"},{"parameters":{"content":"## Variables de BD","height":380,"width":340,"color":7},"type":"n8n-nodes-base.stickyNote","position":[920,1340],"typeVersion":1,"id":"176b5100-f100-41a7-9018-10dd33523fcc","name":"Sticky Note9"},{"parameters":{"descriptionType":"manual","toolDescription":"Llama a esta herramienta cuando  necesites verificar la informacion del cliente","authentication":"nocoDbApiToken","operation":"getAll","projectId":"psny40od5pkas30","table":"m0fz2s4w73upduq","returnAll":true,"options":{"where":"=(Telefono,eq,{{ $('V1').first().json.msg.telefono }})"}},"type":"n8n-nodes-base.nocoDbTool","typeVersion":3,"position":[3960,1640],"id":"30487e67-91c5-4d9e-83f2-b7e8aee9231a","name":"GetCliente","credentials":{"nocoDbApiToken":{"id":"nXSgBsvDf9EnxGjC","name":"BASE DE DATOS"}}},{"parameters":{"method":"POST","url":"={{ $('V1').first().json.datos.server_whapi }}/messages/text","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"},{"name":"authorization","value":"=Bearer {{ $('V1').first().json.datos.token }}"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"typing_time","value":"={{ $json.time }}"},{"name":"body","value":"={{ $json.texto.replace(/\\n/g,'\\n').replace(/\\\"/g,'\\'') }}"},{"name":"to","value":"={{ $('V1').first().json.msg.telefono }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5140,1300],"id":"9ef689ca-c758-4f1f-a33d-c0180860a6d8","name":"Texto"},{"parameters":{"name":"send_message","description":"Llama a esta herramienta cuando un cliente necesite hablar con francisco de forma inmediata o por algun problema,","workflowId":{"__rl":true,"value":"5KuQFqQytnIZ2zLm","mode":"list","cachedResultName":"AGENTE INMO - Send MSG agente"},"workflowInputs":{"mappingMode":"defineBelow","value":{"numero":"={{ $('V1').first().json.msg.telefono }}","msg":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('msg', ``, 'string') }}"},"matchingColumns":[],"schema":[{"id":"numero","displayName":"numero","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"msg","displayName":"msg","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.1,"position":[4360,1640],"id":"30b280aa-f837-4ff6-96b5-97ff62d72a02","name":"msg agente"},{"parameters":{"modelName":"models/gemini-2.5-flash-preview-05-20","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[3260,1640],"id":"167f9e2c-5442-43de-b8cf-677a13367465","name":"Google Gemini Chat Model","credentials":{"googlePalmApi":{"id":"9O8uUWkp7h4KwsVD","name":"Google Gemini(PaLM) Api account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"94746291-c0f3-44f3-b635-1fe696d7d74e","leftValue":"={{ $('Webhook').item.json.body.messages[0].from_me }}","rightValue":"false","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"id":"3401b997-fe39-455c-9c98-1263043c6fcc","name":"From Me2","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-180,1200]},{"parameters":{"httpMethod":"POST","path":"solutions","options":{}},"id":"de28bdfe-3b38-4df6-8bfe-35b6ce40d9e6","name":"Webhook","type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-1220,1200],"webhookId":"3ba6ce2e-1b02-4b06-8edd-9c60afb2db89"},{"parameters":{"operation":"delete","key":"=bot:{{ $json.msg.telefono }}"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[920,960],"id":"16e336f9-dc4e-445e-9127-06c51154f58f","name":"Redis4","credentials":{"redis":{"id":"JMklVOvkU7koL2UG","name":"Redis"}}},{"parameters":{"method":"POST","url":"https://gate.whapi.cloud/messages/text","authentication":"predefinedCredentialType","nodeCredentialType":"httpBearerAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"},{"name":"authorization","value":"Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"typing_time","value":"={{1}}"},{"name":"body","value":"={{ $json.msg.off }}"},{"name":"to","value":"={{ $('V1').first().json.msg.telefono }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1160,500],"id":"b5fdd1ef-8435-44b6-bbc8-97a484963545","name":"Texto2","credentials":{"httpBearerAuth":{"id":"YQE5PBrFHpm6bhoV","name":"Whapi Automatizaciones"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"7c646201-9638-4381-ba78-8b2ede680b4d","leftValue":"={{ $('Webhook').item.json.body.messages[0].from }}","rightValue":"5492254596618","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}},{"id":"60e15f5b-bbc9-47ea-a160-5df35f39a4a9","leftValue":"={{ $('Webhook').item.json.body.messages[0].text.body.toLowerCase() === 'off' }}","rightValue":"={{pausar}}","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[280,820],"id":"a49ea9a1-53f6-4337-a55d-5c8d6032bf73","name":"If4"},{"parameters":{"assignments":{"assignments":[{"id":"f9ecf2fc-da2c-4f44-897a-5dc0a2f2f379","name":"msg.telefono","value":"={{ $json.body.messages[0].chat_id.replace(/\\D/g, '') }}","type":"string"},{"id":"dab7ca54-c3d2-4a36-a9ca-a0ebbd375ef5","name":"msg.nombre","value":"={{ $json.body.messages[0].chat_name }}","type":"string"},{"id":"cc7dcfe1-8ad7-4fe8-93ec-8f643c7d08c7","name":"msg.type","value":"={{ $json.body.messages[0].type }}","type":"string"},{"id":"a3d07914-3c39-47d8-a122-9c1f6062c940","name":"msg.ListaResponse","value":"={{ $('Webhook').item?.json?.body?.data?.message?.listResponseMessage?.title || \"\" }}\n{{ $('Webhook').item?.json?.body?.data?.message?.listResponseMessage?.description || \"\" }}","type":"string"},{"id":"81612acf-1b66-4c8e-82e4-ce8c77b31334","name":"msg.content","value":"={{ $json?.body?.messages[0]?.text?.body || $json?.body?.messages[0]?.voice?.link || $json?.body?.messages[0]?.link_preview.url ||  $json.body.messages[0].voice.id }}","type":"string"},{"id":"01710423-6391-4a34-81e1-06d4779caf4d","name":"msg.timestamp","value":"={{ $json.body.messages[0].timestamp.toDateTime('s').toLocal().toISO() }}","type":"string"},{"id":"2dfc64f4-b222-4ea7-b095-fdd96d9fcb95","name":"msg.idmsg","value":"={{ $json.body.messages[0].id }}","type":"string"},{"id":"ca81718f-74eb-4960-ac3a-5b59f39f8710","name":"datos.server_db","value":"https://db.innovasoftpro.dev","type":"string"},{"id":"be83160a-e151-4f62-bfde-590af142ae74","name":"db.table_clientes","value":"mwk4ui7lirmxc8h","type":"string"},{"id":"c85ab512-ca17-401b-b025-4b6fc11ac818","name":"db.token_db","value":"BAWLISa1QL05FMwlWzJCpo9ONDaZ8_dXO0OULjhB","type":"string"},{"id":"74ee121e-f109-4425-9b1e-ff7b6c49ae45","name":"datos.tabla","value":"mwk4ui7lirmxc8h","type":"string"},{"id":"82426625-5ed5-49a9-abb1-d4ed246fddf2","name":"msg.row_id_fecha","value":"={{ $json.body.messages[0].reply.list_reply.id }}","type":"string"},{"id":"6fedaf9c-efe8-46e5-bb61-b42525ddafa1","name":"grupo","value":"={{ $json.body.messages[0].chat_id.endsWith('@g.us') }}","type":"boolean"},{"id":"7f846767-8866-43e5-845a-d1feda60451c","name":"datos.token","value":"B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410","type":"string"},{"id":"865ae94f-3e98-4b1b-943c-fafa6c059e45","name":"msg.titulo_categoria","value":"={{ $json?.body?.messages[0]?.context?.quoted_content?.header || \"\"}}","type":"string"},{"id":"f71f1502-02e3-4de1-a62a-232537d8f402","name":"datos.server_whapi","value":"https://gate.whapi.cloud","type":"string"},{"id":"2ccc2ae6-79a4-4998-8ef8-681fbb4876cc","name":"msg.eventId","value":"={{ $json.body.messages[0].context.quoted_id }}","type":"string"},{"id":"47fcf50c-9216-4f7f-b5f4-b6d25b049891","name":"","value":"","type":"string"},{"id":"95001dea-1bf9-41f7-b41f-4a5bd23719cf","name":"msg.location.latitude","value":"={{ $json.body.messages[0].location.latitude }}","type":"number"},{"id":"1a6f4720-d9db-4093-9d7e-2fa585ad07bc","name":"msg.location.longitude","value":"={{ $json.body.messages[0].location.longitude }}","type":"number"},{"id":"3551b7d9-4ced-4fba-889e-e8a1342fc6c7","name":"msg.off","value":"=🟢 Derivacion con un representante, a partir de ahora hablará con una persona real 🟢","type":"string"},{"id":"9314a63a-e7f7-47f1-89c2-198e36a61785","name":"msg.on","value":"🟠  Derivación con un Agente IA, a partir de ahora hablará con Martín 🟠","type":"string"},{"id":"e6391151-924f-4957-a7ec-0eb5c94aaf78","name":"msg.button","value":"={{ $json.body.messages[0].reply.buttons_reply.id }}","type":"string"}]},"options":{}},"id":"9db8e454-f873-4e2d-9ad3-9340d7f52c39","name":"V1","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-840,1200],"notesInFlow":true},{"parameters":{"operation":"set","key":"=bot:{{ $json.msg.telefono }}","value":"off","expire":true,"ttl":360},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[500,640],"id":"618b3f49-7dc2-4dcd-b5ba-41932dbb81c4","name":"Redis5","credentials":{"redis":{"id":"JMklVOvkU7koL2UG","name":"Redis"}}},{"parameters":{"operation":"get","propertyName":"estado","key":"=bot:{{ $json.msg.telefono }}","options":{}},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[220,1520],"id":"b813e368-d7d3-4210-9d29-b57942b53402","name":"Redis6","credentials":{"redis":{"id":"JMklVOvkU7koL2UG","name":"Redis"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a96a483c-e241-46d6-a5c0-6d5a315c6ca5","leftValue":"={{ $json.estado }}","rightValue":"off","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[600,1520],"id":"2a4df0fb-4d61-4445-bb48-9f1f7b17b45b","name":"If5"},{"parameters":{"operation":"set","key":"=bot:{{ $json.msg.telefono }}","value":"on"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[720,820],"id":"9305ef1e-542f-48c2-9d02-c59362732a63","name":"Redis7","credentials":{"redis":{"id":"JMklVOvkU7koL2UG","name":"Redis"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"c39920c3-e5a7-48d6-b1ed-31b94ae55381","leftValue":"={{ $json.msg.content.toLowerCase() }}","rightValue":"on","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[500,1040],"id":"55b3ab83-db3f-4811-8ec3-20f0324d4292","name":"If6"},{"parameters":{"method":"POST","url":"https://gate.whapi.cloud/messages/text","authentication":"genericCredentialType","genericAuthType":"httpBearerAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"typing_time","value":"={{1}}"},{"name":"body","value":"=Apartir de ahora la comunicacion sera con *Francisco*"},{"name":"to","value":"={{ $('V1').first().json.msg.telefono }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[720,460],"id":"44b6e1f8-ad53-4a32-aef5-a1e67ae3c1b0","name":"Texto3","credentials":{"httpBearerAuth":{"id":"YQE5PBrFHpm6bhoV","name":"Whapi Automatizaciones"}}},{"parameters":{"content":"## Intervencion Humana\n","height":800,"width":1580,"color":5},"type":"n8n-nodes-base.stickyNote","position":[100,420],"typeVersion":1,"id":"22fd82ed-8bc4-4d5c-a367-e21bc99a472b","name":"Sticky Note1"},{"parameters":{"method":"DELETE","url":"=https://gate.whapi.cloud/messages/{{ $('V1').item.json.msg.idmsg }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"},{"name":"authorization","value":"Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1380,960],"id":"55d9daab-8992-4c09-9ff3-bdeed2cdd604","name":"HTTP Request"},{"parameters":{"method":"DELETE","url":"=https://gate.whapi.cloud/messages/{{ $('V1').item.json.msg.idmsg }}","authentication":"genericCredentialType","genericAuthType":"httpBearerAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[960,600],"id":"bfa0b952-4769-436f-bcb6-0b04cee3e4af","name":"HTTP Request1","credentials":{"httpBearerAuth":{"id":"YQE5PBrFHpm6bhoV","name":"Whapi Automatizaciones"}}},{"parameters":{"method":"DELETE","url":"=https://gate.whapi.cloud/messages/{{ $('V1').item.json.msg.idmsg }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"},{"name":"authorization","value":"Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1160,740],"id":"6bc6f166-e8f8-4c3a-b04f-e3a77244d837","name":"HTTP Request2"},{"parameters":{"method":"POST","url":"https://gate.whapi.cloud/messages/text","sendHeaders":true,"headerParameters":{"parameters":[{"name":"accept","value":"application/json"},{"name":"authorization","value":"Bearer B2v6DZyi27qmgYXOnvrYLEJ4l8KgN410"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"typing_time","value":"={{1}}"},{"name":"body","value":"=Apartir de ahora sigues la conversacion con *Martin*."},{"name":"to","value":"={{ $('V1').first().json.msg.telefono }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1140,960],"id":"5a6811c3-0637-4d63-85eb-79aa629c3847","name":"Texto4"},{"parameters":{"jsCode":"// --- Funciones de procesamiento de texto ---\n\n// Función para procesar el texto y dividirlo inteligentemente\nfunction processAndSplitText(textInput) {\n  // Asegúrate de que textInput sea un string o pueda ser convertido\n  let text = textInput;\n\n  // Si la entrada no es un string\n  if (typeof text !== 'string') {\n    // Si es null o undefined, simplemente devolvemos un array vacío\n    if (text === null || text === undefined) {\n      return [];\n    }\n\n    // Si es un objeto, intentamos encontrar campos comunes que contengan texto\n    if (typeof text === 'object') {\n      if (text.text) {\n        text = text.text;\n      } else if (text.message) {\n        text = text.message;\n      } else if (text.type === 'text' && text.text) {\n        text = text.text;\n      } else if (text.output) { // Intentamos extraer de un campo 'output'\n          // Si output es un string, lo usamos\n          if (typeof text.output === 'string') {\n              text = text.output;\n          } else { // Si output es un objeto o array, intentamos extraer de ahí\n              const extracted = extractTextContent(text.output); // Usamos la función de extracción\n              if (extracted) {\n                  text = extracted;\n              } else {\n                   // Si no pudimos extraer, intentamos convertir todo el objeto a string\n                   try {\n                       text = JSON.stringify(text);\n                   } catch (e) {\n                       console.error(\"No se pudo serializar el objeto a string:\", e);\n                       return []; // Si falla la serialización, devolvemos vacío\n                   }\n              }\n          }\n      } else {\n        // Si no encontramos campos de texto comunes ni 'output', intentamos convertir a string\n        try {\n          text = JSON.stringify(text);\n        } catch (e) {\n           console.error(\"No se pudo serializar el objeto a string:\", e);\n           return []; // Si falla la serialización, devolvemos vacío\n        }\n      }\n    } else { // Si no es string, objeto, null o undefined, devolvemos vacío\n       console.warn(\"Entrada a processAndSplitText no es string, objeto, null o undefined:\", typeof text);\n       return [];\n    }\n  }\n\n  // Si después de los intentos no tenemos un string válido, devolvemos vacío\n  if (typeof text !== 'string' || text.trim() === '') {\n      return [];\n  }\n\n  // Ahora que tenemos un string, procesamos el formato\n  const processedText = text\n    .replace(/\\*\\*(.+?)\\*\\*/g, '*$1*') // **texto** -> *texto*\n    .replace(/###\\s*/g, '')         // Elimina encabezados ###\n    .replace(/[¡¿!]/g, '');         // Elimina signos de exclamación e interrogación iniciales y finales\n\n  // Divide en líneas para análisis\n  const lines = processedText.split('\\n');\n\n  // Grupos para almacenar los mensajes\n  const messages = [];\n  let currentMessage = [];\n  let inNumberedSection = false;\n  let currentSectionNumber = null;\n\n  // Detectar secciones numeradas y agrupables\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    // Detecta si la línea es un encabezado numerado (ej: \"1. Tipo de propiedad:\")\n    const numberedHeaderMatch = line.match(/^\\s*(\\d+)\\.\\s+([^:]+):/);\n\n    if (numberedHeaderMatch) {\n      const sectionNumber = parseInt(numberedHeaderMatch[1]);\n\n      // Si estamos empezando una nueva sección numerada O si el número no es el siguiente esperado\n      if (!inNumberedSection || (inNumberedSection && sectionNumber !== currentSectionNumber + 1)) {\n         // Si tenemos contenido previo, guardamos como mensaje separado\n         if (currentMessage.length > 0) {\n             messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n             currentMessage = [];\n         }\n         inNumberedSection = true;\n      }\n      currentSectionNumber = sectionNumber; // Actualizamos el número de sección actual\n       currentMessage.push(line); // Agregamos la línea al mensaje actual\n\n    } else if (line.trim() === '') { // Línea vacía\n        // Una línea vacía puede terminar una sección si hay contenido previo\n        if (currentMessage.length > 0) {\n             // Si no estamos en una sección numerada, una línea vacía termina el mensaje actual\n             if (!inNumberedSection) {\n                 messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n                 currentMessage = [];\n             } else {\n                 // Si estamos en una sección numerada, una línea vacía se agrega al mensaje actual,\n                 // podría terminar la sección si hay otra línea vacía o fin de texto después.\n                 currentMessage.push(line);\n             }\n        }\n         // Si currentMessage está vacío, una línea vacía consecutiva no hace nada\n\n    } else { // Línea con contenido que no es un encabezado numerado\n        currentMessage.push(line);\n        inNumberedSection = false; // Salimos de la sección numerada si el contenido no sigue el patrón\n    }\n  }\n\n  // Agregar el último mensaje si queda algo\n  if (currentMessage.length > 0) {\n    messages.push(currentMessage.join('\\n').trim()); // Trim antes de guardar\n  }\n\n  // Filtrar mensajes vacíos y limpiar líneas vacías extra\n  return messages\n    .filter(msg => msg.length > 0) // Filtrar cadenas vacías después del trim\n    .map(msg => {\n      // Eliminar líneas vacías múltiples dentro del mensaje\n      return msg.replace(/\\n{2,}/g, '\\n\\n');\n    });\n}\n\n// Función para extraer texto de diferentes estructuras de datos\nfunction extractTextContent(data) {\n  // Si la data es null o undefined, retornamos null inmediatamente\n  if (data === null || data === undefined) {\n    return null;\n  }\n\n  // Si es un string, lo retornamos directamente\n  if (typeof data === 'string') {\n    return data;\n  }\n\n  // Si es un array\n  if (Array.isArray(data)) {\n    // Iteramos sobre el array e intentamos extraer texto de cada elemento\n    for (const item of data) {\n       const extracted = extractTextContent(item); // Llamada recursiva para elementos del array\n       if (extracted) {\n           return extracted; // Devolvemos el primer texto que encontramos\n       }\n    }\n    return null; // Si no encontramos texto en ningún elemento del array\n  }\n\n  // Si es un objeto\n  if (typeof data === 'object') {\n    // Priorizamos campos comunes que suelen contener texto\n    if (data.text) {\n      return data.text;\n    }\n    if (data.message) {\n      return data.message;\n    }\n    // Si tiene un campo 'output', intentamos extraer texto de él (puede ser string, array u objeto)\n    if (data.output !== undefined && data.output !== null) {\n         const extracted = extractTextContent(data.output); // Llamada recursiva para el campo output\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'response', intentamos extraer texto de él\n     if (data.response !== undefined && data.response !== null) {\n         const extracted = extractTextContent(data.response); // Llamada recursiva para el campo response\n         if (extracted) {\n             return extracted;\n         }\n    }\n     // Si tiene un campo 'json', intentamos extraer texto de él\n     if (data.json !== undefined && data.json !== null) {\n         const extracted = extractTextContent(data.json); // Llamada recursiva para el campo json\n         if (extracted) {\n             return extracted;\n         }\n    }\n    // Si no encontramos campos de texto comunes ni estructuras anidadas esperadas,\n    // intentamos convertir el objeto completo a string como último recurso\n     try {\n         return JSON.stringify(data);\n     } catch (e) {\n         console.error(\"No se pudo serializar el objeto a string en extractTextContent:\", e);\n         return null; // Si falla la serialización\n     }\n  }\n\n  // Si el tipo de dato no es manejado, retornamos null\n  console.warn(\"Tipo de dato no manejado en extractTextContent:\", typeof data);\n  return null;\n}\n\n// --- Lógica Principal con manejo seguro de nodos ---\nlet textToProcess = null;\n\ntry {\n  // Verificar si el nodo \"Cancelar evento\" existe y tiene datos\n  let cancelarEventoData = null;\n  try {\n    // Usamos try-catch para capturar errores si el nodo no existe\n    cancelarEventoData = $('Cancelar evento');\n    if (cancelarEventoData && cancelarEventoData.first() && cancelarEventoData.first().json) {\n      if (cancelarEventoData.first().json.response !== undefined) {\n        textToProcess = extractTextContent(cancelarEventoData.first().json.response);\n      } else {\n        textToProcess = extractTextContent(cancelarEventoData.first().json);\n      }\n    }\n  } catch (e) {\n    // Silenciosamente ignoramos errores si el nodo no existe\n    console.log(\"Nodo 'Cancelar evento' no disponible o sin datos válidos\");\n  }\n  \n  // Solo intentamos acceder a AGE3 si aún no hemos encontrado texto para procesar\n  if (!textToProcess) {\n    try {\n      // Usamos try-catch para capturar errores si el nodo no existe\n      const age3Data = $('AGE3');\n      if (age3Data && age3Data.first() && age3Data.first().json) {\n        if (age3Data.first().json.output !== undefined) {\n          textToProcess = extractTextContent(age3Data.first().json.output);\n        } else {\n          textToProcess = extractTextContent(age3Data.first().json);\n        }\n      }\n    } catch (e) {\n      // Silenciosamente ignoramos errores si el nodo no existe\n      console.log(\"Nodo 'AGE3' no disponible o sin datos válidos\");\n    }\n  }\n  \n  // Si no hemos encontrado datos en los nodos específicos, intentamos con $input directamente\n  if (!textToProcess) {\n    try {\n      const inputItems = $input.all();\n      if (inputItems && inputItems.length > 0 && inputItems[0].json) {\n        textToProcess = extractTextContent(inputItems[0].json);\n      }\n    } catch (e) {\n      console.log(\"No se pudo acceder a los datos de entrada directamente:\", e.message);\n    }\n  }\n  \n  // Procesar y retornar el resultado\n  if (textToProcess) {\n    const textArray = processAndSplitText(textToProcess);\n    // Devolvemos un array con un objeto que contiene el array de texto\n    return [{json: {text: textArray}}];\n  } else {\n    // Si no se pudo obtener ni procesar texto, devolvemos un array vacío\n    return [{json: {text: []}}];\n  }\n} catch (error) {\n  // Capturamos cualquier error no manejado y devolvemos un objeto con información del error\n  console.error(\"Error general en el nodo:\", error.message);\n  return [{json: {text: [], error: error.message}}];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[9340,1700],"id":"f597f360-811a-4b68-9b2f-3125e6a15a45","name":"Separa datos1"},{"parameters":{"content":"## Variables globales","height":380,"width":340,"color":7},"type":"n8n-nodes-base.stickyNote","position":[1340,1340],"typeVersion":1,"id":"ab85a0d5-790a-4894-ad99-dde20874b405","name":"Sticky Note11"},{"parameters":{"authentication":"nocoDbApiToken","operation":"getAll","projectId":"psny40od5pkas30","table":"m0fz2s4w73upduq","returnAll":true,"options":{"where":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Filter_By_Formula', `(fecha_cita,eq,query)`, 'string') }}"}},"type":"n8n-nodes-base.nocoDbTool","typeVersion":3,"position":[4540,1640],"id":"e2f9fb06-7509-49c1-86e5-b918d516feff","name":"getCitas","credentials":{"nocoDbApiToken":{"id":"nXSgBsvDf9EnxGjC","name":"BASE DE DATOS"}}},{"parameters":{"name":"insertar_cita","description":"you will call this tool when you need to schedule an appointment or visiting meetin","workflowId":{"__rl":true,"value":"aM8qCCXauWN3SZzC","mode":"list","cachedResultName":"AGENTE CITAS - Agendar_Cita"},"workflowInputs":{"mappingMode":"defineBelow","value":{"correo_electronico":"={{ $fromAI('correo_electronico', ``, 'string') }}","Nombre":"={{ $fromAI('Nombre', ``, 'string') }}","numero_cliente":"={{ $('V1').first().json.msg.telefono }}","idMensaje":"={{ $('Variables globales').first().json.msg.idmsg }}","Id_cliente_db":"={{ $('Variables globales').first().json.id_cliente }}","Fecha_cita":"={{ $fromAI('Fecha_cita', ``, 'string') }}"},"matchingColumns":[],"schema":[{"id":"numero_cliente","displayName":"numero_cliente","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"Fecha_cita","displayName":"Fecha_cita","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"Nombre","displayName":"Nombre","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"correo_electronico","displayName":"correo_electronico","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true},{"id":"idMensaje","displayName":"idMensaje","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"Id_cliente_db","displayName":"Id_cliente_db","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[3660,1640],"id":"5fcbdbd0-5ff2-4edd-880e-2645d331a159","name":"insertar_cita"},{"parameters":{"description":"llama a esta herramienta para confirmar una cita modificar o eliminarla","workflowId":{"__rl":true,"value":"rLzbVwmkGJFcstlA","mode":"list","cachedResultName":"AGENTE CITAS - Button confirm"},"workflowInputs":{"mappingMode":"defineBelow","value":{"nombre":"={{ $fromAI('nombre', ``, 'string') }}","correo":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('correo', ``, 'string') }}","fecha":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fecha', ``, 'string') }}","hora":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('hora', ``, 'string') }}","motivo":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('motivo', ``, 'string') }}"},"matchingColumns":[],"schema":[{"id":"nombre","displayName":"nombre","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"correo","displayName":"correo","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"fecha","displayName":"fecha","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"hora","displayName":"hora","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"motivo","displayName":"motivo","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[4160,1640],"id":"12295677-8297-4ecf-85ee-030a85ec8f4d","name":"confirmar_fecha"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"9a858fa6-8f70-4ce7-a956-8c0209fbb10f","leftValue":"={{ $json.output }}","rightValue":"BUTTON_ENVIADO","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[4140,1160],"id":"df2f79b5-a536-492a-9f35-f6a20e9f4f5e","name":"If"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"dedeb630-ea71-4ac7-808d-7401688ff128","leftValue":"={{ $('Webhook').item.json.body.messages[0].chat_id.includes('@g.us') }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-520,1200],"id":"58905f3f-86a1-4ece-8d73-6864fa228ede","name":"If1"},{"parameters":{"content":"## RESET BBDD","height":240,"width":260,"color":6},"type":"n8n-nodes-base.stickyNote","position":[3680,540],"typeVersion":1,"id":"eb0a70ff-73c0-483f-b709-dca631a4a773","name":"Sticky Note10"},{"parameters":{"operation":"delete","key":"agente:5492254423359"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[3760,620],"id":"17251ee7-2645-4619-a4f6-3129732eca5e","name":"Redis1","credentials":{"redis":{"id":"JMklVOvkU7koL2UG","name":"Redis"}}}],"connections":{"Loop Over Items":{"main":[[],[{"node":"Texto","type":"main","index":0}]]},"Split Out":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Separa datos":{"main":[[{"node":"Split Out","type":"main","index":0}]]},"Switch":{"main":[[],[],[],[],[],[],[{"node":"Reaction3","type":"main","index":0}],[]]},"Message Type":{"main":[[{"node":"Encolado de msg","type":"main","index":0}],[{"node":"Encolado de msg","type":"main","index":0}],[{"node":"Encolado de msg","type":"main","index":0}]]},"Tester Prompt":{"main":[[{"node":"If","type":"main","index":0}]]},"Redis Chat Memory":{"ai_memory":[[{"node":"Tester Prompt","type":"ai_memory","index":0}]]},"Validar Cliente":{"main":[[{"node":"Variables globales","type":"main","index":0}]]},"Encolado de msg":{"main":[[{"node":"Sort","type":"main","index":0}]]},"Sort":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"chatInput","type":"main","index":0}]]},"chatInput":{"main":[[{"node":"Tester Prompt","type":"main","index":0}]]},"Variables globales":{"main":[[{"node":"Message Type","type":"main","index":0}]]},"GetCliente":{"ai_tool":[[{"node":"Tester Prompt","type":"ai_tool","index":0}]]},"Texto":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"msg agente":{"ai_tool":[[{"node":"Tester Prompt","type":"ai_tool","index":0}]]},"Google Gemini Chat Model":{"ai_languageModel":[[{"node":"Tester Prompt","type":"ai_languageModel","index":0}]]},"From Me2":{"main":[[{"node":"If4","type":"main","index":0}],[{"node":"Redis6","type":"main","index":0}]]},"Webhook":{"main":[[{"node":"V1","type":"main","index":0}]]},"Redis4":{"main":[[{"node":"Texto4","type":"main","index":0}]]},"If4":{"main":[[{"node":"Redis5","type":"main","index":0}],[{"node":"If6","type":"main","index":0}]]},"V1":{"main":[[{"node":"If1","type":"main","index":0}]]},"Redis5":{"main":[[{"node":"Texto3","type":"main","index":0}]]},"Redis6":{"main":[[{"node":"If5","type":"main","index":0}]]},"If5":{"main":[[{"node":"Validar Cliente","type":"main","index":0}]]},"Redis7":{"main":[[{"node":"Redis4","type":"main","index":0}]]},"If6":{"main":[[{"node":"Redis7","type":"main","index":0}]]},"Texto3":{"main":[[{"node":"HTTP Request1","type":"main","index":0}]]},"Texto4":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"getCitas":{"ai_tool":[[{"node":"Tester Prompt","type":"ai_tool","index":0}]]},"insertar_cita":{"ai_tool":[[{"node":"Tester Prompt","type":"ai_tool","index":0}]]},"confirmar_fecha":{"ai_tool":[[{"node":"Tester Prompt","type":"ai_tool","index":0}]]},"If":{"main":[[],[{"node":"Separa datos","type":"main","index":0}]]},"If1":{"main":[[],[{"node":"From Me2","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","errorWorkflow":"2kOn0Oz7c2uvczPK"},"staticData":null,"meta":null,"pinData":null,"versionId":"98348d7d-6668-44fd-8883-cd46f1d0d7ce","triggerCount":0,"tags":[]}